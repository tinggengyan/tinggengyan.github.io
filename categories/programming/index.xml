<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Programming - Category - Tinggeng</title>
        <link>https://tinggengyan.github.io/categories/programming/</link>
        <description>Programming - Category - Tinggeng</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tinggengyan@gmail.com (Tinggeng)</managingEditor>
            <webMaster>tinggengyan@gmail.com (Tinggeng)</webMaster><lastBuildDate>Tue, 02 Jan 2018 20:48:43 &#43;0000</lastBuildDate><atom:link href="https://tinggengyan.github.io/categories/programming/" rel="self" type="application/rss+xml" /><item>
    <title>Annotation 使用备忘</title>
    <link>https://tinggengyan.github.io/2018/01/annotation2/</link>
    <pubDate>Tue, 02 Jan 2018 20:48:43 &#43;0000</pubDate>
    <author>Tinggeng</author>
    <guid>https://tinggengyan.github.io/2018/01/annotation2/</guid>
    <description><![CDATA[概述 本文记录使用 javapoet 以及 auto-service 进行编译时注解的过程以及注意点.
最近又使用了一次编译时注解,期间产生了不少问题.
术语的解释 Element 这个代表被注解的元素.这个类有个很重要的方法,getEnclosingElement:这方法的含义是获取 包裹 element 最外围的元素.比如类的最外围的元素是 package.
1 PackageElement pkgElement = (PackageElement) element.getEnclosingElement(); 其他方法都很简单.
javapoet 库中一些重要的接口和方法 TypeName: 对应了 java 代码中的一个类型元素,常用于声明一个方法参数,还有一些 collection 范型使用. 1 2 // 用来定一个 ComponentInfo 类的元素类型 TypeName mComponentInfoClassName = ClassName.get(ComponentInfo.class); ParameterizedTypeName 用来声明一个方法的参数.有个 get 方法,这个方法第一个参数是声明原生的类型,后面一个可变参数,声明第一个参数的参数. 1 2 3 4 5 6 7 8 // 声明一个参数的类型是 Map&lt;String,List&lt;ComponentInfo&gt;&gt; ParameterizedTypeName paramListComponent = ParameterizedTypeName.get(ClassName.get(List.class), mComponentInfoClassName); ParameterizedTypeName moduleLoaderParameter = ParameterizedTypeName.get( ClassName.get(Map.class), ClassName.get(String.class), paramListComponent ); ParameterSpec 这个类代表方法的参数
1 2 // 声明一个方法的参数是:final Map&lt;String,List&lt;ComponentInfo&gt;&gt; targetMap.]]></description>
</item>
<item>
    <title>Java 内存模型_2</title>
    <link>https://tinggengyan.github.io/2017/01/javamemorymodel-2/</link>
    <pubDate>Sat, 28 Jan 2017 02:04:06 &#43;0000</pubDate>
    <author>Tinggeng</author>
    <guid>https://tinggengyan.github.io/2017/01/javamemorymodel-2/</guid>
    <description><![CDATA[Why 理解 JMM 就需要理解 JVM 中的运行时内存区域分为哪几部分,以及各个部分的区别.
内存区域是什么? Java 虚拟机在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域.这些区域都有各自的用于,以及创建和销毁的时间,有的区域随着虚拟机进程的启动而存在,有些区域则依赖用户县城的启动和结束而建立和销毁. 上图展示了 JVM 虚拟机所管理的几个运行时数据区域. 分为两类:
所有线程都共享的,即 JVM 虚拟机就一份 线程隔离的数据区,即每个线程所特有的一份,每份线程都会创建一份.它的生命周期与线程相同. 1. 程序计数器 程序计数器是一块儿较小的内存空间,它可以看做是当前线程所执行的字节码的行号指示器.在虚拟机的概念模型里,字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令,分支,循环,跳转,异常处理,线程恢复等基础功能都需要依赖这个计数器来完成.
Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的,在任何一个确定的时刻,一个处理器(对于多核处理器来说是一个内核)都会执行一条线程中的指令.因此,为了线程切换之后,能恢复到正确的执行位置,每条线程都需要一个独立的程序计数器,各条线程之间的计数器互不影响,独立存储,我们称这类内存区域为&quot;线程私有&quot;的内存.
如果线程正在执行的是一个 Java 方法,这个计数器记录的是正在执行的虚拟机字节码指令的地址;如果执行的是 native 方法,这个计数器的值则为空.
程序计数器是唯一一个在 Java 虚拟机规范中没有规定任何 OOM 情况的区域.
2. Java 虚拟机栈 虚拟机栈描述的是 Java 方法执行的内存模型:每个方法在执行的同时都会创建一个栈帧,栈帧是用于存储 局部变量表,操作数栈,动态链接,方法出口等 信息.每个方法从调用直至执行完成的过程,就对应着一个栈帧在虚拟机栈中的入栈到出栈的过程.
局部变量表存放编译器可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double),对象引用(reference类型,它不等同于对象本身,可能是一个指向对象起始地址的引用指针,也可能是指向代表对象的句柄或者其他与次对象相关的位置) 和 returnAddress 类型(指向了一条字节码指令的地址).
局部变量表所需要的内存空间在编译期完成分配,当进入一个方法时,这个方法需要在帧中分配多大的局部变量空间是完全确定的,在方法运行期间不会改变局部变量的大小.
这个区域存在两种异常状况:如果线程的栈深度大于虚拟机允许的深度,讲抛出 StackOverflowError 异常;如果虚拟机栈是可以扩展的(当前大部分的 Java 虚拟机都可以动态扩展,只不过 Java 规范也允许固定长度的虚拟机栈),如果扩展时无法申请到足够的内存,就会抛出 OOM 异常.
3. 本地方法栈 本地方法栈的作用与虚拟机栈所发挥的作用是非常相似的,它们之间的区别不过是虚拟机栈为虚拟机执行 Java 方法(字节码) 服务,而本地方法栈则为虚拟机使用到 Native 方法服务.虚拟机规范中并未对本地方法栈中的使用的语言,使用方式与数据结果有强制规定,因此具体的虚拟机可以自由实现,甚至有的虚拟机直接将本地方法栈和虚拟机栈合二为一.
本地方法栈也会抛出和虚拟机栈一样的异常: StackOverflowError 和 OutOfMemoryError 异常.
4. Java 堆 Java 堆是 JVM 虚拟机管理的内存中最大的一块儿.]]></description>
</item>
<item>
    <title>Java 内存模型_1</title>
    <link>https://tinggengyan.github.io/2017/01/javamemorymodel1/</link>
    <pubDate>Sun, 15 Jan 2017 17:11:02 &#43;0000</pubDate>
    <author>Tinggeng</author>
    <guid>https://tinggengyan.github.io/2017/01/javamemorymodel1/</guid>
    <description><![CDATA[概述 本文记录 Java 中的内存模型的基础部分1。 本篇作为学习 Java 内存模型基础部分的笔记,加上些许自己的理解和解释.
为什么需要理解 Java 内存模型 结论:并发产生的内存可见性问题.
并发编程中的两个关键问题:
线程之间如何通行(以何种机制来交换信息) 线程之间如何同步 已有的通信机制:
共享内存: 线程之间共享程序的公共状态,线程之间通过读写内存中的公共状态来隐式进行通信. 消息传递: 在这种模型中,线程之间没有公共状态,线程之间必须通过发送消息显式地通信. 同步,指的是控制不同线程之间操作发生的相对顺序的机制:
在共享内存模型中,程序员必须显式的指定某个方法或者某段代码需要在线程之间互斥执行. 在消息传递的模型里,由于消息的发送必须在消息的接收之前,因此,同步是隐式进行的. java 采用的是共享内存模型,而 java 线程之间的通信总是隐式进行,整个通信过程对程序员完全是透明的. 对于 java 程序员而言,如果不了解 java 内存模型,在编写多线程程序的时候,就会遇到各种各样的内存可见性的问题.所以,对 java 的内存模型需要有一定的了解.
Java 采用的共享内存模型是什么样的 Java 采用的是共享内存模型作为线程间的通信机制.
共享内存: 堆内存,在 java 中,所有的 实例域,静态域和数组元素 存储在堆内存中,堆内存在线程之间共享. 局部变量,方法定义的参数和异常处理参数,不会在线程之间共享,它们不会有内存可见性问题,也不受内存模型的影响.
Java 线程之间的通信由 Java内存模型(JMM)控制,JMM 决定了一个线程对共享变量的写入何时对另个线程可见.从抽象的角度来看,JMM 定义了线程和主内存之间的抽象关系:线程之间的共享变量存储在主内存中,每个线程都有一个私有的本地内存,本地内存中存储了该线程以读写共享变量的副本.本地内存是 JMM 的一个抽象概念,并不真实存在.它涵盖了缓存,写缓冲区,寄存器以及其他的硬件和编译器优化.
分析: 线程 A 和线程 B 通信过程
线程 A 将本地内存 A 中更新过的共享变量刷新到主内存中去. 线程 B 去主内存中读取线程 A 更新过的共享变量. 本地内存 A 和本地内存 B 都有主内存中共享的变量 x 的副本.]]></description>
</item>
<item>
    <title>Annotation 使用备忘</title>
    <link>https://tinggengyan.github.io/2016/11/annotation/</link>
    <pubDate>Wed, 16 Nov 2016 23:16:43 &#43;0000</pubDate>
    <author>Tinggeng</author>
    <guid>https://tinggengyan.github.io/2016/11/annotation/</guid>
    <description><![CDATA[概述 本文记录注解 Annotation 的概念和使用.
Annotation 注解 Why 需要注解 在代码中常有些重复的代码，这些代码纯手工太耗时。可以通过一定的标记，然后处理即可。
What 是注解? Annotation 分类 标准 Annotation 包括 Override, Deprecated, SuppressWarnings，是 java 自带的几个注解，他们由编译器来识别，不会进行编译，不影响代码运行。 元 Annotation @Retention, @Target, @Inherited, @Documented，它们是用来定义 Annotation 的 Annotation。也就是当我们要自定义注解时，需要使用它们。 自定义 Annotation 自定义的 Annotation。 自定义的注解也分为三类，通过元Annotation - @Retention 定义： @Retention(RetentionPolicy.SOURCE) 源码时注解，一般用来作为编译器标记。如 Override, Deprecated, SuppressWarnings。 @Retention(RetentionPolicy.RUNTIME) 运行时注解，在运行时通过反射去识别的注解，这种注解最大的缺点就是反射消耗性能。 @Retention(RetentionPolicy.CLASS) 编译时注解，在编译时被识别并处理的注解，相当于自动生成代码，没有反射，和正常的手写代码无二。 Annotation 的工作原理 APT(Annotation Processing Tool) 根据不同类型的注解，采取不同的处理方式，对于 SOURCE 类型的注解，它只会存在代码中，当进行编译成 class 的时候，就会被抛弃了。 RUNTIME 类型的则一直存到 class 文件中，一直存在虚拟机的运行期。CLASS 类型的注解只存到编译期，会根据 处理器的要求进行处理，生成代码或者其他处理方式，处理完只会，就不会存在了，而如果生成了文件，则会一直存在，被打包。
术语解释 Element: 表示一个程序元素，比如包、类或者方法。每个元素都表示一个静态的语言级构造（不表示虚拟机的运行时构造）。 元素应该使用 equals(Object)方法进行比较。不保证总是使用相同的对象表示某个特定的元素。要实现基于 Element 对象类的操作，可以使用 visitor 或者使用 getKind() 方法的结果。使用 instanceof 确定此建模层次结构中某一对象的有效类未必可靠，因为一个实现可以选择让单个对象实现多个 Element 子接口。 在 JDK 1.]]></description>
</item>
</channel>
</rss>
