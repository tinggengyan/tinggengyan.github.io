<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一张思维导图看操作系统 【持续迭代】</title>
    <link href="/2022/07/17/os_summary/"/>
    <url>/2022/07/17/os_summary/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>总结自己的操作系统的知识，按照编码 -&gt; 运行，画了一张图，xmind 导出的图比较大，目前这部分的内容还比较少，后续持续更新，迭代这部分的内容。</p><p><img src="/img/os/os_summary.png" alt="java"></p><div class="note note-info">            <p>下面是一些常见的知识,将会慢慢补充进思维导图内</p>          </div><p style="text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;">下面是一些常见的知识,将会慢慢补充进思维导图内</p><h1 id="linux-整体结构图"><a href="#linux-整体结构图" class="headerlink" title="linux 整体结构图"></a>linux 整体结构图</h1><ul><li>makelinux：<a href="https://makelinux.github.io/kernel/map/">makelinux</a></li></ul><h1 id="解释器-amp-编译器-amp-JIT-amp-AOT"><a href="#解释器-amp-编译器-amp-JIT-amp-AOT" class="headerlink" title="解释器 &amp; 编译器 &amp; JIT &amp; AOT"></a>解释器 &amp; 编译器 &amp; JIT &amp; AOT</h1><ul><li><a href="http://47.100.139.123/blog/article/132">参考链接1</a></li><li><a href="https://github.com/chenzomi12/DeepLearningSystem/blob/main/Compiler/Tradition/01.introduction.pdf">参考链接2</a></li></ul><p>JIT(Just In Time)和 AOT(Ahead Of Time)是两种不同的编译方式:</p><p>JIT:</p><ul><li>编译时,将源代码编译成字节码(bytecode),运行时再将字节码编译成机器码。</li><li>优点是运行时可以进行更多优化,生成更高质量的机器码。 </li><li>缺点是编译时需要额外的编译步骤,会增加程序启动时间。</li><li>第一次运行时编译时间较长,后续运行时间短。运行时性能较AOT略差。</li></ul><p>AOT:</p><ul><li>编译时,将源代码直接编译成机器码。 </li><li>优点是编译只有一次,程序启动更快。 </li><li>编译器在程序运行前完成编译,生成机器代码。运行时直接执行机器代码。</li><li>编译时间较长,运行时性能好。 </li><li>改动源代码需要重新编译。 </li><li>缺点是编译时难以进行复杂的优化,生成的机器码质量可能较低。</li><li>典型的AOT编译语言有C、C++等。</li></ul><p>总结:</p><ul><li>JIT 的运行性能更高,但启动时间长。适合长时间运行的程序。</li><li>AOT 的启动时间短,但运行性能可能略低。适合启动频繁的程序。</li><li>在实际使用中,也可以二者结合,采用 AOT 先编译成机器码,再运行时由 JIT 进一步优化,以兼顾启动时间和运行性能。许多语言(如 Java、C#)的编译器都支持这两种模式。</li></ul><p>![[Pasted image 20230407143623.png]]</p><p>解释器：Java源程序编译成字节码，然后由运行环境对字节码解释执行，提供解释功能的 JVM 组件为解释器。它能执行 JVM 规范的字节码，执行方式是一遍翻译一遍执行，所以效率低，但是简单并易于实现。主要实现是在 Interpreter 模块。</p><p>![[Pasted image 20230407143647.png]]<br>即时编译器：能够将运行时的<strong>热点代码</strong>，编译成运行效率高的及时代码。<br>判断一段代码是不是热点代码，是不是需要触发JIT编译，这样的行为称为：热点探测（Hot Spot Detection），有几种主流的探测方式：</p><ol><li>基于计数器的热点探测（Counter Based Hot Spot Detection）：虚拟机会为每个方法（或每个代码块）建立计数器，统计执行次数，如果超过阀值那么就是热点代码。缺点是维护计数器开销。</li><li>基于采样的热点探测（Sample Based Hot Spot Detection）：虚拟机会周期性检查各个线程的栈顶，如果某个方法经常出现在栈顶，那么就是热点代码。缺点是不精确。</li><li>基于踪迹的热点探测（Trace Based Hot Spot Detection）：Dalvik中的JIT编译器使用这种方式</li></ol><ul><li>JIT 是可以回退到解释器执行的</li></ul><p><strong>inlining 内联(最关键的优化手段)</strong><br>inlining 指在编译时，识别 call site (持有 method handle 的对象) 的目标方法，将其方法体 加入当前方法的编译范围，并将其结果替换掉原 call site，比如 getter 和 setter 就会优化为一条访问内存的指令。</p><p>通过谨慎地使用 AOT 编译代码加快应用程序启动，因为虽然这种代码通常比 JIT 编译代码慢，但是却比解释代码快很多倍。此外，因为加载和绑定AOT 编译代码的时间通常比检测和动态编译一个重要方法的时间少，所以能够在程序执行的早期达到那样的性能。类似地，交互式应用程序可以很快地从本地代码中获益，无需使用引起较差响应能力的动态编译。</p><p><strong>AOT的核心原理</strong>是:编译时将源代码编译成机器代码,然后在运行时直接执行机器代码。具体来说,主要分为以下几个步骤:</p><ol><li>编译:这个过程通常较慢,开发者编写的源代码会被编译器编译成机器代码,并链接成完整的可执行文件。</li><li>运行:此时运行可执行文件,直接执行机器代码,不需要额外的编译步骤,所以运行速度很快。</li><li>优化:编译器可以充分利用编译期的时间来对机器代码进行优化,如删除冗余代码、循环展开等,这也是AOT性能好的原因之一。</li><li>缓存:由于机器代码是预先编译好的,所以编译的中间结果(如AST)可以被缓存下来重复使用,这也提高了性能。</li><li>静态分析:编译器可以在编译期对源代码进行静态分析,发现潜在的bug或安全隐患,这是AOT的另一大优势。</li></ol><p>所以AOT的关键就是将程序的编译过程前置到运行之前,生成机器代码,这样运行时只需要简单执行机器代码即可,省去编译的开销,这也是AOT能达到运行性能较高的原因。<br>但也因此,AOT语言在开发调试阶段的体验稍差,因为每次修改源代码都需要重新编译。<br>总体来说,AOT通过提前编译,牺牲部分编译的开销和开发体验,换取运行期的高性能表现。这也使其非常适合在生产环境部署。</p><p><strong>JIT的核心原理</strong>是:编译器在程序运行时对源代码进行编译,生成机器代码,然后直接执行。具体来说,主要分为以下几个步骤:</p><ol><li>解释:程序首次运行时,解释器逐行解释源代码,并执行。这一步编译开销较大,运行较慢。</li><li>profiling:解释器会检测程序的热点代码(频繁执行的代码),并选择优化它们。</li><li>编译:解释器会将热点代码编译成机器代码,然后缓存起来。</li><li>运行:第二次运行热点代码时,直接执行缓存的机器代码,省去解释的开销,运行速度明显提高。</li><li>优化:JIT编译器会对热点代码进行进一步的优化,如内联扩展、去虚拟化等,提高性能。</li><li>缓存分享:不同运行实例之间可以共享JIT缓存,减少编译工作,这也是JIT的优化手段之一。</li></ol><p>所以JIT的关键是将编译过程推迟到程序运行时,并只编译热点代码,其他代码继续由解释器解释。这使得JIT在第一次运行时有一定开销,但可以达到较好的运行性能,且编译结果可以在多次运行间重复使用。<br>JIT的优点是开发体验好,修改代码后无需重新编译,直接运行即可。但运行时会有一定的编译开销,性能也比AOT略差。<br>所以,JIT更适用于开发调试阶段,以及对运行性能要求不高的场景。<br>总之,JIT通过将编译过程推迟到程序运行时,在保证开发体验的同时,通过热点代码编译和优化,获得还可以的运行性能,这就是JIT的核心原理。</p><p><strong>Android 中使用的是 JIT 还是 AOT ？</strong></p><p><img src="https://source.android.com/docs/core/runtime/images/jit-workflow.png"></p><p>Android使用的启动方式是把JIT和AOT混合使用:</p><ol><li>JIT部分:<ul><li>Android程序通常使用Java语言编写,运行在Dalvik/ART虚拟机上。 </li><li>Dalvik/ART会在程序第一次运行时将Java字节码解释执行(解释器方式)。 </li><li>然后它会检测热点代码,并利用JIT编译器将热点代码编译成机器码缓存并执行。 </li><li>这部分属于典型的JIT方式。</li></ul></li></ol><ul><li><ol start="2"><li>AOT部分: </li></ol><ul><li>从Android 7.0 开始,Google 推出了一种新的 AOT 编译模式，一般称为 *profile-guided *。 </li><li>开发者可以让ART AOT编译器在安装应用时提前编译应用的Java字节码为机器码。 </li><li>然后在每次运行应用时,直接执行预编译好的机器码,而不是先解释Java字节码。 </li><li>这部分属于典型的AOT方式,可以减少运行时的性能开销,提高应用启动速度。</li></ul></li><li><ol start="3"><li>混合使用: </li></ol><ul><li>在Android的大部分时间里,仍然是采用JIT方式运行Java字节码和机器码的混合方式。 </li><li>JIT方式适合开发调试,AOT方式适合生产环境APP。 </li><li>从Android 7.0开始,开发者可以根据需要选择JIT,AOT或混合的方式来启动自己的应用。</li></ul></li></ul><p>所以,总体来说,虽然Android运行环境本质上是一种JIT虚拟机,但是从Android 7.0开始,Google为了追求更高的运行性能,允许开发者选择AOT方式启动APP。这使得Android可以很好的适用JIT和AOT各自的优势,是一种非常灵活的设计。<br>所以答案是:Android既使用JIT,也使用AOT,并可以根据需要选择两种方式或混合使用。</p><h1 id="动态链接、静态链接"><a href="#动态链接、静态链接" class="headerlink" title="动态链接、静态链接"></a>动态链接、静态链接</h1><p>动态链接和静态链接都是程序中调用库文件的方式,但有以下主要区别:</p><ol><li>链接时间:<ul><li>静态链接:在编译时将库文件链接到可执行文件中,产生完整的可执行文件。</li><li>动态链接:在运行时将库文件链接到可执行文件中。</li></ul></li><li>空间占用:<ul><li>静态链接:库文件代码被复制到每个可执行文件中,空间占用较大。 </li><li>动态链接:库文件只有一份,被多个可执行文件共享,空间占用较小。</li></ul></li><li>依赖性:<ul><li>静态链接:可执行文件不依赖于库文件,可以独立运行。 </li><li>动态链接:可执行文件依赖于库文件,需将库文件与可执行文件放在一起才能运行。</li></ul></li><li>版本问题:<ul><li>静态链接:可执行文件使用的是链接时库文件的代码,Even if库文件更新,可执行文件还是使用原来的代码。 </li><li>动态链接:可执行文件使用的都是最新的库文件代码,如果库文件更新,可执行文件自动使用最新代码。</li></ul></li></ol><p>总的来说,</p><ul><li>静态链接产生的可执行文件更独立和稳定,但空间占用更大;</li><li>动态链接产生的可执行文件更灵活和节省空间,但依赖性更强。<ul><li>动态链接还可以进一步细分为运行时链接和装载时链接,这是实现层面的细节差异。</li><li>本质上,它们都是动态链接,在程序运行期将库文件的代码装入进程地址空间。</li></ul></li><li>大部分情况下,我们选择动态链接来利用库文件。</li></ul><h1 id="Linux的软链接和硬链接吗？"><a href="#Linux的软链接和硬链接吗？" class="headerlink" title="Linux的软链接和硬链接吗？"></a>Linux的软链接和硬链接吗？</h1><p>Linux链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。</p><h5 id="硬连接"><a href="#硬连接" class="headerlink" title="硬连接"></a>硬连接</h5><p>硬连接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p><h5 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h5><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建软链接</span><br>ln -s file1 link1 <br><br><span class="hljs-comment"># 创建硬链接</span><br>ln file1 link2<br></code></pre></td></tr></table></figure><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><ul><li><a href="https://blog.csdn.net/hguisu/article/details/5713164">参考链接1</a></li></ul><p>Linux 的内存管理可以简述如下:</p><ol><li>Linux采用分页式内存管理,将内存分割成大小相等的块,称为页(page)。每个页的大小通常是4KB。</li><li>Linux内存管理有两种方式:交换区(swap)和直接存取(direct access)。<ul><li>当物理内存页不足时,操作系统会将暂时不使用的页交换出去,这种方式称为交换区管理。</li><li>如果物理内存足够,操作系统会将进程映射到物理内存,这种方式称为直接存取。</li></ul></li><li>Linux采用Demand Paging机制,只有当进程真正访问某个虚拟内存页时,才会将其映射到物理内存。如果此时物理内存不足,会选择一个未使用的页交换出去。</li><li>Linux内存管理还采用LRU算法来选择交换出的页。LRU算法按照页的最近使用情况来决定哪些页应该被交换出去。最近最少使用的页会被先选中交换出物理内存。</li><li>Fork系统调用可以 COPY ON WRITE技术来避免重复映射物理内存页。只有当父进程和子进程中有一个要修改某共享页时,才会真正复制一份。这可以节省物理内存的使用。</li><li>Linux提供匿名映射和文件映射两种内存映射方式。匿名映射不和文件关联,文件映射则和文件关联。</li><li>Linux还提供共享内存和匿名管道等IPC机制,以实现进程间的内存共享。</li></ol><p>Linux 提供两种内存映射方式:</p><ol><li>匿名映射(anonymous mapping): 不和任何文件关联,仅映射到虚拟内存地址空间。使用 mmap() 系统调用实现,指定映射长度和可读写权限,操作系统会返回一个虚拟内存起始地址。这块内存区域初始化为0。</li><li>文件映射(file mapping): 和打开的文件关联,文件中的数据会映射到虚拟内存地址空间。也使用 mmap() 系统调用实现,需要指定想要映射的文件描述符和长度等信息。文件的数据会直接映射到内存,读取内存就相当于读取文件。<br>这两种映射方式的主要区别是:</li></ol><ul><li>匿名映射初始化为0,文件映射初始化为文件的内容。</li><li>文件映射会与文件同步,对映射区的修改会写入文件,文件修改也会同步到映射区。匿名映射没有这种同步效果。</li><li>删除文件描述符不会对文件映射产生影响,它会一直到 munmap() 系统调用释放映射才解除映射。匿名映射关闭最后一个对其的引用时则会释放。</li><li>文件映射是共享的,父子进程可以共享同一映射。匿名映射默认是私有的,要启用 MAP_SHARED 标志来共享。</li></ul><p>这些内存映射方式提供了一种高效的 I/O 方式,用户空间应用可以像访问内存一样访问文件,这加快了文件访问速度。同时也带来方便的进程间通信方式。总之,内存映射是Linux下一个强大而高效的 IPC 机制。</p><h1 id="匿名映射-amp-命名映射"><a href="#匿名映射-amp-命名映射" class="headerlink" title="匿名映射 &amp; 命名映射"></a>匿名映射 &amp; 命名映射</h1><h1 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h1><ul><li><a href="https://www.cnblogs.com/huxiao-tee/p/4660352.html">参考链接1</a></li><li><a href="https://stackoverflow.com/questions/5902629/mmap-msync-and-linux-process-termination">参考链接2</a></li></ul><p><img src="https://static001.geekbang.org/resource/image/11/3e/116ada829f5017f3d40bf2f78d4f4c3e.png?wh=1288*670" alt="mmap架构"></p><p><strong>它可以带来的好处有：</strong></p><ol><li>减少系统调用。我们只需要一次 mmap() 系统调用，后续所有的调用像操作内存一样，而不会出现大量的 read/write 系统调用。</li><li>减少数据拷贝。普通的 read() 调用，数据需要经过两次拷贝；而 mmap 只需要从磁盘拷贝一次就可以了，并且由于做过内存映射，也不需要再拷贝回用户空间。</li><li>可靠性高。mmap 把数据写入页缓存后，跟缓存 I/O 的延迟写机制一样，可以依靠内核线程定期写回磁盘。但是需要提的是，mmap 在内核崩溃、突然断电的情况下也一样有可能引起内容丢失，当然我们也可以使用 msync 来强制同步写。</li></ol><p><strong>它也存在一些缺点：</strong></p><ol><li>虚拟内存增大。mmap 会导致虚拟内存增大，我们的 APK、Dex、so 都是通过 mmap 读取。而目前大部分的应用还没支持 64 位，除去内核使用的地址空间，一般我们可以使用的虚拟内存空间只有 3GB 左右。如果 mmap 一个 1GB 的文件，应用很容易会出现虚拟内存不足所导致的 OOM。</li><li>磁盘延迟。mmap 通过缺页中断向磁盘发起真正的磁盘 I/O，所以如果我们当前的问题是在于磁盘 I/O 的高延迟，那么用 mmap() 消除小小的系统调用开销是杯水车薪的。启动优化中讲到的类重排技术，就是将 Dex 中的类按照启动顺序重新排列，主要为了减少缺页中断造成的磁盘 I/O 延迟。</li></ol><p><strong>适用场景</strong><br>mmap 比较适合于对同一块区域频繁读写的情况，推荐也使用线程来操作。用户日志、数据上报都满足这种场景，另外需要跨进程同步的时候，mmap 也是一个不错的选择。Android 跨进程通信有自己独有的 Binder 机制，它内部也是使用 mmap 实现。</p><ul><li>对于大文件，大的 value ，是不合适的，如何解决大文件读写的问题，<a href="https://www.cnblogs.com/xiaolincoding/p/13719610.html">参考文章</a></li></ul><p><strong>在高并发的场景下，针对大文件的传输的方式，应该使用「异步 I/O 」来替代零拷贝技术</strong>。</p><ul><li>针对大文件的传输，不应该使用 PageCache，也就是说不应该使用零拷贝技术，因为可能<em>由于 PageCache 被大文件占据，而导致「热点」小文件无法利用到 PageCache</em>，这样在高并发的环境下，会带来严重的性能问题。</li></ul><p>我们要根据文件的大小来使用不同的方式：</p><ul><li>  传输大文件的时候，使用「异步 I/O + 直接 I/O」；</li><li>  传输小文件的时候，则使用「零拷贝技术」；</li></ul><h2 id="mmap-的应用-日志库"><a href="#mmap-的应用-日志库" class="headerlink" title="mmap 的应用 - 日志库"></a>mmap 的应用 - 日志库</h2><p>由于内存Cache的存在，在写入数据的过程中一旦发生意外（Crash、后台被系统杀死，等），都可能会发生数据丢失的情况。而如果将写操作设计成同步的，数据丢失的情况会有所改善，但写操作的耗时会大大提升。mmap 的引入恰到好处的在这两者之间找到了一个平衡。mmap 对文件的读取操作跨过了页缓存，减少了数据的拷贝次数，用内存读写取代I/O读写，提高了文件读取效率； 对 mmap 内存的写操作，会直接进入系统page-cache；msync调用负责把脏的page-cache持久化到硬盘。当然对发生系统级错误和设备异常导致系统挂掉的情况，mmap 也是保证不了数据完整性的。 </p><p>这里需要特别说明一下：MMKV 实现的本质上跟前面讨论的KV方案是没有区别的，其最大的改进是利用 mmap 来代替 File 和 Database 的操作，利用 mmap I/O 操作的优势对数据丢失问题进行改善。但由于“内存-文件”两级缓存的存在，MMKV 也是无法彻底解决数据丢失问题的。当然对于终端设备的场景来看，这种丢失在很大程度上是可以忽略的。</p><p>微信团队在封装 xlog 和 mmap 时采用了CPP代码来实现，主要是为了做到 Android 和 iOS 端的通用。实际上如果不考虑跨平台，则可以考虑使用 Java NIO 中的 <a href="https://developer.android.com/reference/java/nio/channels/FileChannel">FileChannel</a> 或者 Android 中的 <a href="https://developer.android.com/reference/android/os/MemoryFile">MemoryFile</a> 代替。 <a href="https://developer.android.com/reference/java/nio/channels/FileChannel">FileChannel</a> 底层其实通过 mmap 实现的。而 <a href="https://developer.android.com/reference/android/os/MemoryFile">MemoryFile</a> 则是 Android 中匿名共享内存在 Java 层的接口，至于 Android 匿名共享内存底层实现也利用了mmap。所以，<a href="https://developer.android.com/reference/java/nio/channels/FileChannel">FileChannel</a> 和 MemoryFile 本质上与直接调用 mmap 是一样的。利用这些接口也可以降低大部分 Android 程序员的开发和维护成本，毕竟大家对 Java 相对更为熟悉。<br>下面是在 KV 设计中另一种 Key 的设计方案：  </p><p><img src="https://upload-images.jianshu.io/upload_images/1202401-4b119cbb342b5251.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Key的设计"></p><p>我们在数据存储时，以32位的 Int 作为作为 Key ， 其中：  </p><ul><li>  低位 24 位来定义 Key 的长度；</li><li>  最高位，第 32 位表示 Key 是否有效：为 1 时表示 Key 无效，读取时跳过</li><li>  第 31 位 表示是否加密：为 1 时表示未加密，不需要解密处理；</li><li>  第 30 位表示是否需要编码：为 1 时表示保存明文，不进行转码处理；</li><li>  中间 25 - 29 位预留，以后扩展用</li></ul><p>这样设计Key的优点：</p><ul><li>在加载的时候只根据 Key 就可以判断数据是否有效，无效数据不需要加载到内存；MMKV 则是依靠 相同 Key 在 put 到 map 中时先后顺序的覆盖实现的，对于无效数据需要根据 Key 进一步得到 Value，判断 Value 的长度是否为 0 。</li><li>可以一定程度实现空间重用，当更新后的 Value 长度不超过旧值的长度时，可以直接复用原来的空间，在 Value 长度超过旧值时将 Key 的有效位置 1 ，然后再在尾部 append Key-Value即可。当然这里只是“一定程度”上改善，要想进一步做到空间重用，还可以考虑： <ul><li>对字符串等经常变长的 Value 在第一次 写入的时候就留有一定的空间冗余度； </li><li>通过一个内存的堆栈对无效空间进行管理，甚至你可以模仿内存的分配策略做的更加完善 </li></ul></li></ul><p>因此，这里如何做是一个“度”的问题，而这个“度”的把握则取决于对设备和产品的理解。对微信来说，他们的理解是 append 就够了，个人理解是可以做一定程度（“简单”）复用策略的，通过复用减缓到达空间上限的时间，因为每次加载时 Key 的去重以及回写都是有一定的性能开销的。<br>这样设计 Key 相对更加灵活，可以对数据加密、编码等根据需要搭配，做到不同形式数据的混存</p><h1 id="直接-IO-与-非直接-IO"><a href="#直接-IO-与-非直接-IO" class="headerlink" title="直接 IO 与 非直接 IO"></a>直接 IO 与 非直接 IO</h1><p>我们都知道磁盘 I/O 是非常慢的，所以 Linux 内核为了减少磁盘 I/O 次数，在系统调用后，会把用户数据拷贝到内核中缓存起来，这个内核缓存空间也就是「页缓存」，只有当缓存满足某些条件的时候，才发起磁盘 I/O 的请求。</p><p>那么，根据是「否利用操作系统的缓存」，可以把文件 I/O 分为直接 I/O 与非直接 I/O：</p><ul><li>直接 I/O，不会发生内核缓存和用户程序之间数据复制，而是直接经过文件系统访问磁盘。</li><li>非直接 I/O，读操作时，数据从内核缓存中拷贝给用户程序，写操作时，数据从用户程序拷贝给内核缓存，再由内核决定什么时候写入数据到磁盘。</li></ul><p>如果你在使用文件操作类的系统调用函数时，指定了 O_DIRECT 标志，则表示使用直接 I/O。如果没有设置过，默认使用的是非直接 I/O。</p><p><strong>如果用了非直接 I/O 进行写数据操作，内核什么情况下才会把缓存数据写入到磁盘</strong><br>以下几种场景会触发内核缓存的数据写入磁盘：</p><ul><li>  在调用 <code>write</code> 的最后，当发现内核缓存的数据太多的时候，内核会把数据写到磁盘上；</li><li>  用户主动调用 <code>sync</code>，内核缓存会刷到磁盘上；</li><li>  当内存十分紧张，无法再分配页面时，也会把内核缓存的数据刷到磁盘上；</li><li>  内核缓存的数据的缓存时间超过某个时间时，也会把数据刷到磁盘上；</li></ul><h1 id="阻塞与非阻塞-I-O-VS-同步与异步-I-O"><a href="#阻塞与非阻塞-I-O-VS-同步与异步-I-O" class="headerlink" title="阻塞与非阻塞 I/O VS 同步与异步 I/O"></a>阻塞与非阻塞 I/O VS 同步与异步 I/O</h1><p><strong>IO 整体分为两个过程</strong></p><ol><li>数据准备的过程；</li><li>数据从内核空间拷贝到用户进程缓冲区的过程；</li></ol><p>阻塞 I/O 会阻塞在「过程 1 」和「过程 2」，而非阻塞 I/O 和基于非阻塞 I/O 的多路复用只会阻塞在「过程 2」，所以这三个都可以认为是同步 I/O。</p><p>异步 I/O 则不同，「过程 1 」和「过程 2 」都不会阻塞。</p><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><h2 id="区别联系"><a href="#区别联系" class="headerlink" title="区别联系"></a>区别联系</h2><p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。</p><ul><li>进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，</li><li>而线程只是一个进程中的不同执行路径。</li><li>线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，</li><li>但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</li></ul><ol><li>简而言之,一个程序至少有一个进程,一个进程至少有一个线程。</li><li>线程的划分尺度小于进程，使得多线程程序的并发性高。</li><li>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</li><li>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</li><li>【重要】从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。</li></ol><h2 id="进程的调度算法"><a href="#进程的调度算法" class="headerlink" title="进程的调度算法"></a>进程的调度算法</h2><ul><li><a href="https://www.cnblogs.com/wawlian/archive/2012/02/17/2356398.html">参考链接1</a></li><li><a href="https://mp.weixin.qq.com/s/JWj6_BF9Xc84kQcyx6Nf_g">参考链接2</a></li></ul><p><strong>先来先服务调度算法，（First Come First Severd, FCFS）</strong><br>先来后到，每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。<br>FCFS 对长作业有利，适用于 CPU 繁忙型作业的系统，而不适用于 I/O 繁忙型作业的系统。</p><p><strong>最短作业优先（Shortest Job First, SJF）调度算法</strong><br>优先选择运行时间最短的进程来运行，这有助于提高系统的吞吐量。<br>这显然对长作业不利，很容易造成一种极端现象。长作业一直得不到执行。</p><p><strong>高响应比优先 （Highest Response Ratio Next, HRRN）调度算法</strong><br>主要是权衡了短作业和长作业。<br>每次进行进程调度时，先计算「响应比优先级」，然后把「响应比优先级」最高的进程投入运行，「响应比优先级」的计算公式：<br><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZenXmtfRBFTOmjAxShC4v2ZoNApBywj8b0beDyqGSmcLgo5JaFX9e0cFIRu7hy07surhTHGmlguWw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><p><strong>时间片轮转（Round Robin, RR）调度算法。</strong><br>每个进程被分配一个时间段，称为时间片（Quantum），即允许该进程在该时间段中运行。</p><ul><li>如果时间片用完，进程还在运行，那么将会把此进程从 CPU 释放出来，并把 CPU 分配另外一个进程；</li><li>如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换；</li></ul><p>时间片的长度就是一个很关键的点：</p><ul><li>如果时间片设得太短会导致过多的进程上下文切换，降低了 CPU 效率；</li><li>如果设得太长又可能引起对短作业进程的响应时间变长；</li></ul><p>通常时间片设为 20ms~50ms 通常是一个比较合理的折中值。</p><p><strong>最高优先级（Highest Priority First，HPF）调度算法。</strong></p><p>从就绪队列中选择最高优先级的进程进行运行。</p><p>进程的优先级可以分为，静态优先级或动态优先级：</p><ul><li>静态优先级：创建进程时候，就已经确定了优先级了，然后整个运行时间优先级都不会变化；</li><li>动态优先级：根据进程的动态变化调整优先级，比如如果进程运行时间增加，则降低其优先级，如果进程等待时间（就绪队列的等待时间）增加，则升高其优先级，也就是随着时间的推移增加等待进程的优先级。</li></ul><p>该算法也有两种处理优先级高的方法，非抢占式和抢占式：</p><ul><li>非抢占式：当就绪队列中出现优先级高的进程，运行完当前进程，再选择优先级高的进程。</li><li>抢占式：当就绪队列中出现优先级高的进程，当前进程挂起，调度优先级高的进程运行。</li></ul><p>但是依然有缺点，可能会导致低优先级的进程永远不会运行。</p><p><strong>多级反馈队列（Multilevel Feedback Queue）调度算法</strong></p><ul><li>「多级」表示有多个队列，每个队列都有一个优先级，队列按照优先级从高到低排列，同时优先级越高时间片越短。</li><li>「反馈」表示如果有新的进程加入优先级高的队列时，立刻停止当前正在运行的进程，转而去运行优先级高的队列；</li></ul><p>工作流程</p><ul><li>设置了多个队列，赋予每个队列不同的优先级，每个队列优先级从高到低，同时优先级越高时间片越短；</li><li>新的进程会被放入到第一级队列的末尾，按先来先服务的原则排队等待被调度，如果在第一级队列规定的时间片没运行完成，则将其转入到第二级队列的末尾，以此类推，直至完成；</li><li>当较高优先级的队列为空，才调度较低优先级的队列中的进程运行。如果进程运行时，有新进程进入较高优先级的队列，则停止当前运行的进程并将其移入到原队列末尾，接着让较高优先级的进程运行；</li></ul><p>可以发现，对于短作业可能可以在第一级队列很快被处理完。对于长作业，如果在第一级队列处理不完，可以移入下次队列等待被执行，虽然等待的时间变长了，但是运行时间也会更长了，所以该算法很好的兼顾了长短作业，同时有较好的响应时间。</p><h2 id="死锁和死锁避免"><a href="#死锁和死锁避免" class="headerlink" title="死锁和死锁避免"></a>死锁和死锁避免</h2><p><strong>死锁产生的原因</strong>有以下几个:</p><ol><li>互斥条件:一个资源一次只能被一个进程使用；</li><li>请求和保持条件:一个进程因为获得了一个资源而阻塞时,仍然保持对其他资源的请求；</li><li>不可剥夺条件:进程已经获得的资源,不能被其他进程强行剥夺,直到该进程使用完毕为止；</li><li>循环等待条件:若干进程之间形成一种头尾相接的等待资源关系,造成循环等待。</li></ol><p><strong>避免死锁</strong>,主要是破坏4个必备条件即可，可以采取以下措施:</p><ol><li>破坏互斥条件:不做</li><li>破坏请求和保持条件:进程在请求资源时,不保持对其他资源的请求。 Release所有资源后再请求其他资源。</li><li>破坏不可剥夺条件:允许进程在等待期间,被其他进程剥夺资源。 但这可能影响运行正确性,不太可取。</li><li>破坏循环等待条件:按某种顺序获取多个资源,避免循环等待。如按资源标号顺序获取资源。</li><li>使用资源继承线程:让每个资源都只有一个线程可以获取,其他线程必须等待。 此时多个线程竞争同一资源时不会发生死锁。</li><li>设置资源请求超时时间:如果在一定时间内不能获取资源,则放弃请求。避免一直等待下去。</li><li>减少对资源的请求数目:合理分配和调度资源,避免过多进程同时请求少量资源。</li></ol><h2 id="线程的状态以及转换"><a href="#线程的状态以及转换" class="headerlink" title="线程的状态以及转换"></a>线程的状态以及转换</h2><p>*<em>进程的状态图</em><br><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/10-%E8%BF%9B%E7%A8%8B%E4%B8%83%E4%B8%AD%E7%8A%B6%E6%80%81.jpg"></p><p><strong>线程状态图</strong></p><ul><li><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1682060660&ver=4481&signature=Flp5vsm4A43C845wUC2gQ0OlXmqEwCrlF7dh3ig8TGvAc1xxTHQeCtqN-*b0PrghBOyTANaahDRiPK1rqbeHPGpLDLUgt*ak1sGpnnfiwn*zRI*OlL*1YyjipCJGM-Z-&new=1">参考链接1</a></li></ul><p>线程调度的原则，考虑的就是速度快，需要考量的因素如下</p><ul><li><strong>CPU 利用率</strong>：调度程序应确保 CPU 是始终匆忙的状态，这可提高 CPU 的利用率；</li><li><strong>系统吞吐量</strong>：吞吐量表示的是单位时间内 CPU 完成进程的数量，长作业的进程会占用较长的 CPU 资源，因此会降低吞吐量，相反，短作业的进程会提升系统吞吐量；</li><li><strong>周转时间</strong>：周转时间是进程运行+阻塞时间+等待时间的总和，一个进程的周转时间越小越好；</li><li><strong>等待时间</strong>：这个等待时间不是阻塞状态的时间，而是进程处于就绪队列的时间，等待的时间越长，用户越不满意；</li><li><strong>响应时间</strong>：用户提交请求到系统第一次产生响应所花费的时间，在交互式系统中，响应时间是衡量调度算法好坏的主要标准。</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXSqL3y07MHMl6nJLwC8Y6fZWMicgQKplnWSevdkWhWdN8V6UPESvCEP3ge39k14FMicuejLXM2Y7aDg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>Java 线程的状态，有六种</p><ol><li>NEW</li><li>RUNNABLE</li><li>BLOCKED</li><li>WAITING</li><li>TIMED_WAITING</li><li>TERMINATED</li></ol><p>经典的线程五态模型，有五种状态</p><ol><li>创建</li><li>就绪</li><li>执行</li><li>阻塞</li><li>终止</li></ol><p>Java 将五态模型中的</p><ul><li><em>就绪和执行</em>，都统一成 <em>RUNNABLE</em>，</li><li>将<em>阻塞</em>（即不可能得到 CPU 运行机会的状态）细分为了 <em>BLOCKED、WAITING、TIMED_WAITING</em>，这里我们不去评价好坏。</li></ul><p><strong>调用 jdk 的 Lock 接口中的 lock，如果获取不到锁，线程将挂起，此时线程的状态是什么呢？</strong><br>有多少同学觉得应该和 synchronized 获取不到锁的效果一样，是变成 BLOCKED 状态？<br>不过如果你仔细看我上面的文章，有一句话提到了，jdk 中锁的实现，是基于 AQS 的，而 AQS 的底层，是用 park 和 unpark 来挂起和唤醒线程，所以应该是变为 WAITING 或 TIMED_WAITING 状态。</p><p><strong>调用阻塞 IO 方法，线程变成什么状态？</strong><br>比如 socket 编程时，调用如 accept()，read() 这种阻塞方法时，线程处于什么状态呢？<br>答案是处于 RUNNABLE 状态，但实际上这个线程是得不到运行权的，因为在操作系统层面处于阻塞态，需要等到 IO 就绪，才能变为就绪态。<br>但是在 Java 层面，JVM 认为等待 IO 与等待 CPU 执行权，都是一样的。</p><h2 id="重开线程"><a href="#重开线程" class="headerlink" title="重开线程"></a>重开线程</h2><p>Java 中的线程是不可以重开的；</p><h1 id="进程和线程内存地址空间的区别"><a href="#进程和线程内存地址空间的区别" class="headerlink" title="进程和线程内存地址空间的区别"></a>进程和线程内存地址空间的区别</h1><ul><li>进程的地址空间是私有的,互不共享。  </li><li>线程共享进程的地址空间,可以访问进程内所有变量和资源。  </li><li>不同进程的线程不能共享地址空间。</li></ul><h1 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h1><ol><li>锁(Lock)。锁是最基本的线程同步机制,它允许线程对共享资源的访问进行互斥,从而保证同一时间只有一个线程可以访问该资源。常见的锁有互斥锁、读写锁等。</li><li>条件变量(Condition Variable)。条件变量允许线程等待某个条件满足后再继续执行。它通常与锁一起使用,锁保证访问共享资源的互斥,条件变量允许等待某个条件。</li><li>信号量(Semaphore)。信号量是一个计数器,它允许多个线程访问一个资源,但是同一时间访问的线程数量不可以超过计数器的值。它主要用于控制对资源的访问数量。</li><li>事件(Event)。事件允许一个线程通知其他线程某个事件已经发生,当事件发生时,Those等待线程会被唤醒。它主要用于线程间的通信和同步。</li><li>屏障(Barrier)。屏障允许多个线程在某个点汇集,当某个数量的线程到达屏障点后,这些线程才会继续执行。它主要用于多个线程同步执行。</li><li>自旋锁(Spinlock)。自旋锁是一种忙等待的锁,获取锁的线程会循环检测锁的状态,而不是睡眠,这可以减少线程上下文切换的开销,但是会占用更多的CPU资源。它主要用于同步对共享资源的访问。</li></ol><p>所以总体来说,线程同步机制为我们提供了控制多个线程对共享资源访问的工具,保证数据的一致性和正确性。</p><p><strong>同步机制中的锁和信号量的区别是什么？</strong><br>锁和信号量都是用于线程同步的机制,但是它们之间有以下主要区别:</p><ol><li>锁是一种互斥机制,它允许同一时间只有一个线程访问共享资源。信号量是一种计数器,它允许多个线程访问共享资源,但是访问的线程数量不可以超过信号量的计数值。</li><li>锁通常只有两个状态:锁定和未锁定。信号量的计数器可以是任意非负整数。</li><li>想要访问共享资源的线程首先要获取锁,获取后该线程独占该资源,其他线程无法访问。想要访问共享资源的线程首先要获取信号量,获取将信号量的计数器减1,释放会让计数器加1,只要计数器的值大于0,线程就可以访问资源。</li><li>锁由调用 lock() 方法获取,调用 unlock() 方法释放。信号量由调用 acquire() 方法获取,调用 release() 方法释放。</li><li>锁可以用于同步任何类型的资源。信号量主要用于控制对资源的访问数量,通常用于实现资源池等。</li><li>锁的实现通常更轻量级,性能开销较小。信号量的实现相对复杂一些,性能开销较大。</li></ol><p>所以总体来说,虽然锁和信号量都是用于线程同步的机制,但是锁是一种互斥的同步方式,而信号量是一种控制访问数量的同步机制。根据不同的需求,可以选择使用锁或者信号量来实现线程同步。</p><h2 id="读写锁的原理"><a href="#读写锁的原理" class="headerlink" title="读写锁的原理"></a>读写锁的原理</h2><p>读写锁是操作系统中用于保护共享资源的一种锁机制。它允许多个读线程同时访问一个资源,但在写线程访问时会阻塞所有读线程和其他写线程。读写锁的主要原理是:</p><ol><li>维护一个读计数器和一个写标志。读计数器记录当前有多少个读线程正在访问资源,写标志表示是否有写线程正在访问资源。</li><li>当一个读线程请求访问资源时,如果写标志是False,则读计数器加1,并允许读线程访问资源。如果写标志是True,则读线程等待。</li><li>当一个写线程请求访问资源时,如果读计数器和写标志都是False,则将写标志设置为True,并允许写线程访问资源。如果读计数器不为0或写标志为True,则写线程等待。</li><li>当一个读线程退出时,将读计数器减1。当写线程退出时,将写标志设置为False。</li><li>只有当读计数器和写标志都是False时,才允许下一个待命的写线程访问资源。</li></ol><p>这样就可以实现多个读线程并发访问,而写线程互斥访问的效果。这样可以最大限度地提高资源的并发访问效率。这就是读写锁的基本原理。读写锁是相比互斥锁更细粒度的锁机制,在许多场景下可以实现更高的并发效率,所以在操作系统和许多程序中得到广泛应用。</p><p><strong>Java 中的读写锁</strong></p><p>JUC 中 有 <a href="https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock">ReentrantReadWriteLock</a> 和 <a href="https://developer.android.com/reference/java/util/concurrent/locks/StampedLock?hl=en">StampedLock</a> 这两个类，都是读写锁。<br>区别在于 StampedLock 是读乐观的锁。</p><h1 id="原子操作原理"><a href="#原子操作原理" class="headerlink" title="原子操作原理"></a>原子操作原理</h1><p><a href="https://zhuanlan.zhihu.com/p/33445834">https://zhuanlan.zhihu.com/p/33445834</a></p><ul><li>从用户角度，可以用原子操作来替换重量级的锁同步，从而提高程序性能。</li><li>底层实现角度，原子操作可以用于构建各种更重量级的同步操作，比如锁或屏障之类的。</li></ul><p>原子操作的原理是利用CPU的原子指令来确保操作的原子性。通常有两种方式:</p><ol><li>硬件支持的原子指令,如CMPXCHG指令。这些指令本身就是原子的,可以直接实现原子操作。</li><li>锁定总线,使其他CPU无法访问共享内存。这种方式会临时锁定系统总线,使当前CPU独占总线,其他CPU无法访问内存。从而确保操作的原子性。这通常是通过获取一个锁来实现的。但这个方式的性能较低,现代CPU一般不采用这种方式。</li></ol><p><strong>原子操作的四个要素</strong>:</p><ol><li>原子性:操作必须是不可中断的,要么全部完成,要么全部不完成,不会结束在中间某个状态。</li><li>可见性:当一个线程修改了共享数据的值,其他线程可以立即得知这个修改。</li><li>有序性:代码执行的顺序与程序顺序相同。</li><li>互斥性:在任意时刻,只能有一个线程修改共享数据。</li></ol><p>常见的实现方式：</p><ol><li>CAS(Compare And Swap)指令是最常用的实现原子操作的指令,它可以比较内存中一个位置的值,如果相等则更新为新值,否则不做任何操作。CAS是CPU提供的原子指令,可以直接实现原子操作。</li><li>许多CPU提供的原子指令,如xchg指令、xadd指令,这些都可以实现简单的原子操作。</li><li>锁是实现原子操作的一种重要方式。对某个锁对象上锁,执行一系列操作,然后释放锁,这整个过程是其他线程不可分割的,可以保证原子性。这需要使用互斥锁等同步原语。</li><li>有时候需要借助操作系统的帮助。例如,可以使用临界区(critical section)的方式,让操作系统在进入和退出临界区时禁止中断或者调度,从而实现原子操作。</li></ol><p><em>实现原子操作有软硬件多种手段,但本质上都是利用CPU的原子指令或锁总线的方式来确保一系列操作的原子性</em></p><p><strong>CAS 为什么可以保证原子性？</strong></p><ol><li>CAS是CPU的原子指令,不会被编译器优化或重排序。CPU会确保CAS整个操作过程不被中断,要么全部完成,要么全部不完成,不会中间被中断导致只完成一半。这就保证了操作的原子性。</li><li>CAS操作包含三个步骤:读取内存值A,比较A与预期值B,如果相等则写入新值C。这三个步骤是连续的,不会被其他线程的操作插入或重排序。所以从其他线程的视角来看,这三个步骤要么全部完成,要么都不完成,这也确保了原子性。</li><li>CAS操作在多处理器下需要锁总线,使当前CPU独占内存总线,其他CPU无法访问内存。这可以防止多个CPU同时执行CAS操作,导致某个CPU只完成了部分步骤就被中断,破坏原子性。锁总线可以确保任意时刻只有一个CPU可以执行CAS指令。</li><li>CAS保证了操作的互斥性,在任意时刻只能有一个CPU成功执行CAS指令,其他CPU会一直循环重试。这也是实现原子性的条件之一。</li><li>成功执行CAS指令的CPU可以确保其他CPU可以看到修改的值(可见性)。并且各个CPU看到的CAS操作的顺序跟代码中的顺序是一致的(有序性)。</li></ol><p>总之,CAS能够保证原子操作的原子性、可见性、有序性和互斥性这四个要素。这些特性共同确保了CAS的原子操作正确性,使其可以实现线程同步等功能。<br>所以,CAS之所以可以保证原子性,关键在于它是CPU提供的原子指令,内部可以锁总线并包含连续的三步原子操作,这些特征共同满足原子操作的四个要素,从而实现了原子性。</p><h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><p><strong>Unicode 和 ANSI 的区别</strong></p><p>Unicode 和 ANSI 是两种字符编码标准,主要区别如下:</p><ol><li>字符集范围不同:<ul><li>Unicode 表示的字符范围更广,包含了绝大多数世界上的文字,可以表示几乎所有的字符。Unicode 的最新版本支持超过 136,000 个字符。</li><li>ANSI 只支持 256 个字符,主要是西欧语言的字符。</li></ul></li><li>编码方式不同:<ul><li>Unicode 使用 2 个字节表示一个字符,所以每个字符有 65,536 个值可用。这种编码方式叫做 UTF-16。 </li><li>ANSI 使用 1 个字节表示一个字符,每个字符只有 256 个值可用。</li></ul></li><li>兼容性不同:<ul><li>Unicode 建立的初衷就是为了解决不同语言字符之间的兼容问题,所以具有很好的兼容性。可以同时支持多种语言。</li><li>ANSI 由于只支持 256 个字符,兼容性较差,不适合 Internationalization(国际化)应用。</li></ul></li><li>Processing 不同:<ul><li>Unicode 需要专门的文本处理方式,比如 Unicode 字符串比较、搜索等都需要专门的算法和函数来实现。 </li><li>ANSI 可以直接使用字符串的默认处理函数,更简单。</li></ul></li></ol><p>所以总体来说,Unicode 比 ANSI 更加强大和通用。现代应用越来越多采用 Unicode 标准来支持多语言。但 ANSI 由于简单易用,在一些场景下也还是有应用。</p><p><strong>字符编码和字符编码方式是什么关系？</strong></p><ol><li>字符编码:指为一组字符指定的数字值,它决定了每个字符被存储或传输时对应的二进制代码。常见的字符编码有 ASCII、ISO-8859-1、GBK、Unicode 等。</li><li>字符编码方式:是指对字符编码的具体实现方式。一种字符编码可以有多种编码方式。例如:<ul><li>Unicode 字符编码可以通过 UTF-8、UTF-16、UTF-32 等编码方式来实现。</li><li>GBK 字符编码就对应一种 GBK 编码方式。</li></ul></li></ol><p>两者的关系可以简单理解为:字符编码 = 字符集 + 编码方式</p><ul><li>字符集定义了包含哪些字符,比如 ASCII 的字符集 just 包含英文字符,Unicode 包含全球大多数的字符。</li><li>编码方式则定义了如何使用比特位来表示字符集中的每个字符,比如 UTF-8 使用 1-4 个字节,UTF-16 一般使用 2 个字节。</li></ul><p>所以,编码方式是实现字符编码的具体方法。一种字符编码可以有多种编码方式,但一种编码方式只对应一种字符编码。<br>编码方式的不同会导致在存储、传输和兼容性上产生影响:</p><ul><li>存储:不同编码方式的字符可能对应不同数量的字节,会影响文件大小或数据库存储空间。 </li><li>传输:字节数量的不同会影响传输的带宽要求。 </li><li>兼容性:只有使用相同的字符编码和编码方式的系统或软件之间才具有良好的兼容性。所以选择恰当的字符编码方式对实现字符编码非常重要。</li></ul><h1 id="虚拟内存-Virt-amp-常驻内存-Resident-amp-共享内存-Shared"><a href="#虚拟内存-Virt-amp-常驻内存-Resident-amp-共享内存-Shared" class="headerlink" title="虚拟内存(Virt) &amp; 常驻内存(Resident) &amp; 共享内存 (Shared)"></a>虚拟内存(Virt) &amp; 常驻内存(Resident) &amp; 共享内存 (Shared)</h1><ul><li>虚拟内存(Virt):进程地址空间的大小,包括实际使用的物理内存以及交换空间。虚拟内存的值通常比实际的物理内存和交换空间之和要大。</li><li>常驻内存(Resident):进程正在使用的物理内存大小。常驻内存是实际分配给进程的物理内存,用于存储进程当前正在使用的数据和指令。</li><li>共享内存(Shared):多个进程共享的内存大小。当几个进程共享同一块物理内存时,这个内存既属于其中一个进程的常驻内存,也属于其他进程的共享内存。</li></ul><p>所以,我们可以得出:</p><ul><li>虚拟内存(Virt) &gt;= 常驻内存(Resident) + 共享内存(Shared)</li><li>常驻内存(Resident) = 非共享的物理内存 + 共享内存(Shared)</li></ul><p>简而言之:</p><ul><li>虚拟内存是进程地址空间的大小,包含实际使用的内存和交换空间。  </li><li>常驻内存是进程实际正在使用的物理内存大小,包括共享内存和非共享内存。  </li><li>共享内存是被多个进程共享使用的内存部分。</li></ul><p>所以这三者之间存在包含关系和部分重叠的关系。</p><h1 id="Free-amp-Available"><a href="#Free-amp-Available" class="headerlink" title="Free &amp; Available"></a>Free &amp; Available</h1><ul><li><p>“Free”表示当前没有被分配使用的内存空间大小。也就是说，这是操作系统内存管理系统中未被分配给任何进程使用的内存。</p></li><li><p>“Available”则表示当前可用于分配给进程使用的内存空间大小，其中包括空闲的、未被分配的内存以及被分配但未被进程使用的内存。这意味着，”Available”并不只是指未被使用的内存，而是可以被操作系统分配给进程使用的内存空间。</p></li></ul><ol><li> 空闲内存：操作系统中未被分配给任何进程使用的内存空间。</li><li> 操作系统缓存：操作系统使用的缓存，用于加速系统性能。这些缓存通常包括文件系统缓存、页面缓存等。</li><li> 被回收内存：已经被进程占用但是已经释放的内存空间，这些内存可以被重新分配给其他进程使用。</li><li> 虚拟内存：系统中使用的虚拟内存，其中包括已经被分配但当前未被使用的虚拟内存空间。</li></ol><h1 id="Buffer-amp-Cached"><a href="#Buffer-amp-Cached" class="headerlink" title="Buffer &amp; Cached"></a>Buffer &amp; Cached</h1><ul><li><p>“Buffer”是指操作系统为了提高文件系统性能而使用的一种缓存机制，用于存储正在进行读写操作的数据。当应用程序读取数据时，数据会被缓存到Buffer中，当应用程序写入数据时，数据也会先被缓存到Buffer中，再由操作系统写入磁盘。这样可以减少磁盘IO操作，提高文件系统性能。</p></li><li><p>“Cached”是指操作系统为了提高系统性能而使用的一种缓存机制，用于存储经常被访问的数据和程序代码。当应用程序访问数据或执行程序时，操作系统会将这些数据和程序代码缓存到Cached中。如果下次应用程序再次访问这些数据或程序代码，操作系统可以直接从Cached中读取，而不需要再次访问磁盘或执行文件系统操作，从而提高系统性能。</p></li></ul><p>区别在于，Buffer主要用于文件系统的读写操作，而Cached则是为了提高系统性能而缓存常用数据和程序代码。另外，Buffer中的数据可能是尚未被写入磁盘的脏数据，而Cached中的数据则是已经被读取或执行的数据。</p><h1 id="Huge-Page-的作用和利弊"><a href="#Huge-Page-的作用和利弊" class="headerlink" title="Huge Page 的作用和利弊"></a>Huge Page 的作用和利弊</h1><p>Huge Page是一种增大操作系统页面大小的技术，它将操作系统页面的大小从默认的4KB增大到2MB或更大。它的作用主要是为了提高系统性能，但也存在一些利弊。</p><p><strong>作用：</strong></p><ol><li> 减少TLB（Translation Lookaside Buffer）misses：TLB是用于存储虚拟地址和物理地址之间映射关系的缓存，如果一个进程的工作集大于TLB大小，则会频繁发生TLB缓存失效。使用Huge Page可以减少页表项数量，从而减少TLB缓存失效，提高系统性能。</li><li> 减少页表大小：Huge Page可以减少页表项数量，从而减少操作系统内核对页表的访问次数，从而提高系统性能。</li><li> 减少内存碎片：使用Huge Page可以减少内存碎片，从而减少操作系统的内存管理开销。</li><li>省去二级页表。4096个连续的小页可以映射到一个Huge Page,所以不需要二级页表,节省内存。</li></ol><p><strong>利弊：</strong><br>利：<br><em>性能提高、内存节省等优点</em></p><ol><li> 提高系统性能：通过减少TLB缓存失效和页表访问次数，使用Huge Page可以提高系统性能。</li><li> 减少内存碎片：使用Huge Page可以减少内存碎片，从而提高系统性能。</li></ol><p>弊：</p><ol><li> 内存使用效率降低：使用Huge Page会使每个页面的大小变大，从而可能导致内存使用效率降低，尤其是在内存较少的系统中。</li><li>内存碎片。Huge Page需要连续的大块内存支持,如果内存已经被小页式样使用了,无法分配到足够大的连续内存块,会导致内存浪费(碎片)。</li><li> 可用内存减少：使用Huge Page会使每个页面的大小变大，从而可能导致可用内存减少，尤其是在内存较少的系统中。</li><li> 可移植性差：不是所有的操作系统和处理器架构都支持Huge Page，因此使用Huge Page可能导致应用程序在不同的系统上的可移植性降低。</li><li>不适合小内存设备。Huge Page适合大内存服务器等设备使用,对于内存受限的小设备,Huge Page可能造成过多内存浪费。</li></ol><h1 id="X86的虚拟地址，物理地址，逻辑地址"><a href="#X86的虚拟地址，物理地址，逻辑地址" class="headerlink" title="X86的虚拟地址，物理地址，逻辑地址"></a>X86的虚拟地址，物理地址，逻辑地址</h1><p>虚拟地址，物理地址和逻辑地址都是在计算机中用于寻址的概念，它们的区别和联系如下：</p><ol><li> 虚拟地址（Virtual Address）：虚拟地址也称为虚地址，它是由CPU生成的一个地址，用于表示进程中的内存地址。在使用虚拟内存的系统中，虚拟地址可以被映射到物理地址或者磁盘中的交换空间。应用程序通常只能访问虚拟地址，而不是物理地址或逻辑地址。</li><li> 物理地址（Physical Address）：物理地址是指内存中实际的地址，也称为实地址。操作系统使用内存管理单元（MMU）将虚拟地址转换为物理地址，以便CPU可以访问内存中的数据。物理地址是在系统启动时由操作系统分配给每个进程的。</li><li> 逻辑地址（Logical Address）：逻辑地址也称为相对地址，是相对于进程的起始地址的偏移量。逻辑地址不同于虚拟地址，它通常是由程序员定义的，并且只在程序内部使用，不涉及到系统内存管理。</li></ol><p>虚拟地址、物理地址和逻辑地址之间的联系是通过内存管理单元（MMU）实现的。MMU是一个硬件组件，用于在CPU和内存之间进行地址转换。当应用程序访问虚拟地址时，MMU会将虚拟地址转换为物理地址，并将物理地址发送给内存控制器，从而让CPU可以访问内存中的数据。</p><p>另外，虚拟地址和逻辑地址之间的联系是通过链接器和加载器实现的。链接器用于将不同的模块组合成一个可执行文件，而加载器用于将可执行文件加载到内存中并执行。在链接和加载的过程中，逻辑地址会被转换为虚拟地址，从而使应用程序可以访问内存中的数据。</p><p>针对 逻辑地址和虚拟地址容易被混淆这一点，注明一下</p><ol><li>对于一个单模块的应用而言，逻辑地址和虚拟地址是不需要区分的；</li><li>但是对于多模块的应用而言，每个模块可能存在相同的逻辑地址，但是当链接之后，他的虚拟地址就不一样了。</li></ol><h1 id="内存回收过程"><a href="#内存回收过程" class="headerlink" title="内存回收过程"></a>内存回收过程</h1><p>xxxxx</p><h1 id="虚拟地址和物理地址的翻译-MMU-amp-TLB"><a href="#虚拟地址和物理地址的翻译-MMU-amp-TLB" class="headerlink" title="虚拟地址和物理地址的翻译(MMU &amp; TLB)"></a>虚拟地址和物理地址的翻译(MMU &amp; TLB)</h1><ol><li>MMU 首先将虚拟地址分割成多个部分,通常分为<strong>页目录索引、页表索引和页内偏移</strong>等部分。</li><li>MMU 使用页目录索引查询页目录,获得对应页表的基地址。</li><li>使用页表索引查询页表,获得对应物理页的基地址。</li><li>将物理页基地址和页内偏移相加,获得最终的物理地址。</li><li>使用物理地址访问主存,完成地址翻译过程。</li></ol><p>举个32位地址的例子: 虚拟地址:32 bit </p><ul><li>页目录索引:10 bit (0-1023)  </li><li>页表索引:10 bit (0-1023)  </li><li>页内偏移:12 bit (0-4095)</li></ul><ol><li>用虚拟地址的高10位查询页目录,获得页表基地址</li><li>用虚拟地址的中间10位索引页表,获得物理页基地址</li><li>物理页基地址的低12位就是页内偏移,与虚拟地址的低12位相同</li><li>物理页基地址+页内偏移=物理地址</li></ol><p>所以,一个32位的虚拟地址会被翻译成一个32位的物理地址。在翻译过程中,MMU根据页目录和页表建立的映射关系,将虚拟地址的高20位映射为物理地址的高20位,低12位不变。</p><p>这个过程需要MMU访问2级页表,即页目录和页表,每个页表又需要一个物理内存页来存储,所以会占用一定的物理内存。但通过这种多级页表可以实现虚拟地址到物理地址的映射,使得每个进程有自己独立的虚拟地址空间。</p><p>所以,总结来说,虚拟地址到物理地址的翻译是MMU通过多级页表实现的地址映射过程。它将虚拟地址分割成多个部分,依次查询各级页表,获取最终的物理地址,使进程获得连续的虚拟地址空间,这是操作系统提供给进程虚拟化内存访问的基础。</p><p><strong>MMU</strong><br>MMU的主要功能包括:</p><ol><li>地址映射:将虚拟地址翻译为物理地址,使进程拥有独立的虚拟地址空间。</li><li>内存保护:控制进程的内存访问权限,保护进程不被其他进程非法访问。</li><li>地址转换支持:支持线性地址到物理地址的转换,也支持线性地址到线性地址的转换。</li><li>缓存管理:管理缓存的使用,提高内存访问性能。MMU可以选择将虚拟地址映射到物理内存还是映射到缓存。</li></ol><p>具体来说,MMU主要包括以下几个部件:</p><ul><li>页表基址寄存器(Page Table Base Register):存放页表的物理地址。</li><li>页目录基址寄存器(Page Directory Base Register):页表的物理地址寄存器,用于2级页表。</li><li>页表/页目录(Page Table/Directory):保存虚拟页到物理页映射关系的页表,由软件维护。</li><li>TLB(Translation Lookaside Buffer):快表,存储部分虚拟地址到物理地址的映射,加速地址转换。</li><li>比较器(Comparator):比较地址并控制是否触发缺页中断或异常。</li><li>管理器(Control Logic):控制MMU各部件的行为。</li></ul><p>当CPU对内存进行访问时,会首先检查TLB是否存在对应的地址映射,如果存在(TLB命中),直接获得物理地址;如果不存在(TLB缺失),会访问页表获得映射关系,并将其加载到TLB,然后获得物理地址。<br>所以,MMU是实现虚拟内存和内存保护的关键所在。它通过快表TLB和多级页表加速虚拟地址到物理地址的转换,使每个进程都拥有独立的虚拟地址空间,保护进程免受非法访问。MMU的工作机制是现代操作系统管理内存的基础。</p><p><strong>TLB</strong><br>TLB是 Translation Lookaside Buffer 的缩写,翻译为查找缓冲器。它是MMU中的一个高速缓存,用于存储最近使用的虚拟地址到物理地址的映射关系,加速地址转换。<br>当CPU需要访问内存时,会先检查TLB是否存在对应虚拟地址的映射关系,如果存在,直接使用物理地址访问内存,这个过程称为TLB命中。如果TLB中不存在对应关系,会触发TLB缺失,CPU需要访问页表获取映射关系,然后将其更新到TLB,再访问内存。<br>所以,TLB的主要作用是加速地址转换,避免每次地址转换都需要访问内存中的页表。由于TLB是MMU的一部分,访问TLB的速度很快,这大大提高了地址转换效率。但是,TLB空间有限,只能存放部分映射关系。当访问一个不在TLB中的虚拟地址时,需要通过页表进行地址转换,这个过程效率较低。所以,TLB的效率在很大程度上依赖于TLB命中率。</p><p>TLB一般有完全相联和组相联两种结构,主要区别是:</p><ul><li>完全相联:任意虚拟地址可以与TLB中任意一个槽相关联。查找过程需要遍历所有的TLB项,但可用性好,冲突概率低。</li><li>组相联:将TLB划分成多个组,每个虚拟地址只能映射到其中一个组。查找过程只需要在一个组内遍历,速度更快,但可用性和冲突性能差一些。</li></ul><p>TLB的管理包括:</p><ol><li>回收策略:当TLB空间不足时,需要将部分条目移除,常用策略为FIFO、LRU、随机替换等。</li><li>虚拟地址反向映射:在TLB中同时存放物理地址到虚拟地址的反向映射,用于快速检索虚拟地址。</li><li>TLB刷新:当页表内容更改时,需要刷新TLB中对应条目,保证映射关系的同步。</li></ol><p>TLB作为MMU的高速缓存,对提高地址转换效率非常关键。不同的TLB结构、管理策略在命中率和成本之间进行权衡,以达到最佳的性能。TLB技术的运用使得虚拟内存得以高效实现。</p><h1 id="Drop-Cache以后可用内存不增加的主要原因"><a href="#Drop-Cache以后可用内存不增加的主要原因" class="headerlink" title="Drop Cache以后可用内存不增加的主要原因"></a>Drop Cache以后可用内存不增加的主要原因</h1><p>pending</p><h1 id="Buddy-分配器-amp-Slab-分配器"><a href="#Buddy-分配器-amp-Slab-分配器" class="headerlink" title="Buddy 分配器 &amp; Slab 分配器"></a>Buddy 分配器 &amp; Slab 分配器</h1><p><strong>buddy</strong></p><p>![[Pasted image 20230424211438.png]]</p><p><strong>slab</strong></p><p><img src="https://www.dingmos.com/usr/uploads/2021/11/2076055272.jpg"></p><h1 id="内存碎片-amp-内存整理"><a href="#内存碎片-amp-内存整理" class="headerlink" title="内存碎片 &amp; 内存整理"></a>内存碎片 &amp; 内存整理</h1><ul><li><a href="https://jacktang816.github.io/post/memoryfragmentation/#%E5%88%86%E9%A1%B5%E5%92%8C%E5%88%86%E6%AE%B5%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB">参考链接 1</a></li><li><a href="https://www.cnblogs.com/tolimit/p/5286663.html">参考链接 2</a></li></ul><p><strong>内部碎片</strong><br><img src="https://jacktang816.github.io/img/unix/memoryFragmentation/internalFragmentation.gif"><br>内部碎片是由于系统分配给进程的空间大于其所申请的大小，处于（操作系统分配的用于装载某一进程的内存）区域内部或页面内部的存储块，占有这些区域或页面的进程并不使用这个存储块。而在进程占有这块存储块时，系统无法利用它。直到进程释放它，或进程结束时，系统才有可能利用这个存储块。</p><ul><li>原因<br>因为所有的内存分配必须起始于可被 4、8 或 16 整除（视处理器体系结构而定）的地址或者因为MMU的分页机制的限制，决定内存分配算法仅能把预定大小的内存块分配给客户。假设当某个客户请求一个 43 字节的内存块时，因为没有适合大小的内存，所以它可能会获得 44字节、48字节等稍大一点的字节，因此由所需大小四舍五入而产生的多余空间就叫内部碎片。</li></ul><p><strong>外部碎片</strong><br><img src="https://jacktang816.github.io/img/unix/memoryFragmentation/externalFragmentation.gif"><br>外部碎片指的是还没有被分配出去（不属于任何进程），但由于太小了无法分配给申请内存空间的新进程的内存空闲区域，即处于任何两个已分配区域或页面之间的空闲存储块。这些存储块的总和可以满足当前申请的长度要求，但是由于它们的地址不连续或其他原因，使得系统无法满足当前申请。</p><ul><li>原因<br>频繁的分配与回收物理页面会导致大量的、连续且小的页面块夹杂在已分配的页面中间，就会产生外部碎片。假设有一块一共有100个单位的连续空闲内存空间，范围是0-99。如果你从中申请一块内存，如10个单位，那么申请出来的内存块就为0-9区间。这时候你继续申请一块内存，比如说5个单位大，第二块得到的内存块就应该为10-14区间。如果你把第一块内存块释放，然后再申请一块大于10个单位的内存块，比如说20个单位。因为刚被释放的内存块不能满足新的请求，所以只能从15开始分配出20个单位的内存块。现在整个内存空间的状态是0-9空闲，10-14被占用，15-24被占用，25-99空闲。其中0-9就是一个内存碎片了。如果10-14一直被占用，而以后申请的空间都大于10个单位，那么0-9就永远用不上了，变成外部碎片。</li></ul><p><strong>内存整理</strong></p><ul><li><strong>异步模式：</strong>内存碎片整理最常用的模式，在此模式中不会进行阻塞(但是时间片到了可以进行主动调度)，也就是此种模式不会对文件页进行处理，文件页用于映射文件数据使用，这种模式也是对整体系统压力较小的模式。</li><li>轻同步模式：**当异步模式整理不了更多内存时，有两种情况下会使用轻同步模式再次整理内存：1.明确表示分配的不是透明大页的情况下；2.当前进程是内核线程的情况下。这个模式中允许大多数操作进行阻塞(比如隔离了太多页，需要阻塞等待一段时间)。这种模式会处理匿名页和文件页，但是不会对脏文件页执行回写操作，而当处理的页正在回写时，也不会等待其回写结束。</li><li><strong>同步模式：</strong>所有操作都可以进行阻塞，并且会等待处理的页回写结束，并会对文件页、匿名页进行回写到磁盘，所以导致最耗费系统资源，对系统造成的压力最大。它会在三种情况下发生：<ol><li>从cma中分配内存时；</li><li>调用alloc_contig_range()尝试分配一段指定了开始页框号和结束页框号的连续页框时；</li><li>通过写入1到sysfs中的/vm/compact_memory文件手动实现同步内存碎片整理。</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一张思维导图看网络【持续迭代】</title>
    <link href="/2022/05/17/net-process/"/>
    <url>/2022/05/17/net-process/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>受到《计算机网络-自顶向下方法》 的启发，按照网络请求的过程，总结自己的网络知识，按照时间线，画了一张图，xmind 导出的图比较大，后续持续更新，迭代这部分的内容。</p><p><img src="/img/net/net_proceed_process.png" alt="网络请求过程"></p><div class="note note-info">            <p>下面是一些常见的知识,将会慢慢补充进思维导图内</p>          </div><p style="text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;">下面是一些常见的知识,将会慢慢补充进思维导图内</p><h1 id="输入-url-到页面展示，经历的过程"><a href="#输入-url-到页面展示，经历的过程" class="headerlink" title="输入 url 到页面展示，经历的过程"></a>输入 url 到页面展示，经历的过程</h1><ul><li><a href="https://xiaolincoding.com/network/3_tcp/tcp_interview.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B-%E4%B8%8D%E6%98%AF%E4%B8%A4%E6%AC%A1%E3%80%81%E5%9B%9B%E6%AC%A1">参考链接1</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&mid=2247483989&idx=1&sn=7e2ed852770743d3955ef9d5561fcef3&scene=21#wechat_redirect">参考链接2</a></li></ul><ol><li>url 解析，提取 host；</li><li>DNS 解析<ol><li>匹配浏览器的 DNS 的缓存；</li><li>匹配 Host 文件；</li><li>匹配系统的 DNS 缓存；</li><li>系统向本地 DNS 服务器发送请求；<ol><li>联网时候，系统会自动发送 <code>DHCP Request</code>，路由器收到这个广播后，会向电脑分配一个地址，这个地址就是 DNS 服务器的地址；<ol><li>可以通过抓包看；</li><li>通过设置中心；</li><li>通过生成的临时文件查看；</li></ol></li><li>DNS 通过 <em>DNS 迭代查询</em> 查询域名的 ip 地址；</li><li>DNS 服务器返回多个地址组合，浏览器根据 <em>DNS 轮转策略</em> 选择一个 IP 地址进行请求；</li></ol></li><li>这个过程在各个 socket 库中都有系统实现；</li></ol></li><li>委托系统网络协议栈发送请求数据<ol><li>创建 socket 套接字；<ol><li>套接字是内存中的一块内存，其中保存了通信的控制信息；</li><li>一个套接字对应了一个端口，用以区分不同的 socket 套接字；</li></ol></li><li>将 socket 连接到 server；三次握手</li><li>发送数据；<ol><li>协议栈不关心应用程序传来的数据内容。在它看来，要发送的数据就是一段二进制字节序列而已。</li><li>协议栈并不会在收到数据后马上发出，而是需要判断几个要素后决定是否发出：</li><li>当协议栈缓冲区中存在的数据长度超过或接近 MSS 时会将包发出。</li><li>在收到一段数据后缓冲区会开启一个计时器，经过一定时间后仍未有新数据包产生则将缓冲区内容发出。</li><li>如果应用程序指定了“立刻发出”，那么协议栈就会按照要求直接发送数据。（一般像浏览器这种会话型的应用程序在向服务器发送数据时，等待填满缓冲区会导致延迟影响用户体验，因此一般会要求协议栈直接发出）</li><li>MTU：一个网络包的最大长度，以太网中一般为1500字节。</li><li>MSS：除去头部之后，一个网络包所能容纳的TCP数据的最大长度。</li></ol></li><li>接收数据<ol><li>首先，协议栈尝试从接收缓冲区中取出数据并传递给应用程序，但这个时候请求消息刚刚发送出去，响应消息可能还没返回。响应消息的返回还需要等待一段时间，因此这时接收缓冲区中并没有数据，那么接收数据的操作也就无法继续。这时，协议栈会将应用程序的委托，也就是从接收缓冲区中取出数据并传递给应用程序的工作暂时挂起，等服务器返回的响应消息到达之后再继续执行接收操作。</li><li>协议栈接收到数据会会检查收到的数据块和 TCP 头部的内容，判断包是否合法可用，如果没问题则返回 ACK 确认号。然后将数据块暂存到缓冲区中，并拼接数据还原原始数据。</li><li>数据包恢复原样后将会将数据复制到应用程序指定内存地址后将控制流程转交回应用程序。然后再寻找合适时机进行窗口更新。</li></ol></li><li>断开连接；四次挥手</li><li>删除套接字</li></ol></li></ol><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>域名解析，将网址中的域名解析成协议栈的 IP 地址。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>DNS 域名解析的过程蛮有意思的，整个过程就和我们日常生活中找人问路的过程类似，<strong>只指路不带路</strong>。</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/IP/33.jpg" alt="DNS解析过程"></p><p>浏览器首先看一下自己的缓存里有没有，如果没有就向操作系统的缓存要，还没有就检查本机域名解析文件 <code>hosts</code>，如果还是没有，就会 DNS 服务器进行查询，查询的过程如下：</p><ol><li>客户端首先会发出一个 DNS 请求，问<a href="http://www.server.com/">www.server.com</a> 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。</li><li>本地域名服务器收到客户端的请求后，如果缓存里的表格能找到<a href="http://www.server.com,则它直接返回/">www.server.com，则它直接返回</a> IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我<a href="http://www.server.com/">www.server.com</a> 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。</li><li>根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“<a href="http://www.server.com/">www.server.com</a> 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”</li><li>本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我<a href="http://www.server.com的/">www.server.com的</a> IP 地址吗？”</li><li>顶级域名服务器说：“我给你负责<a href="http://www.server.com区域的权威/">www.server.com区域的权威</a> DNS 服务器的地址，你去问它应该能问到”。</li><li>本地 DNS 于是转向问权威 DNS 服务器：“老三，<a href="http://www.server.com对应的IP是啥呀？”">www.server.com对应的IP是啥呀？”</a> server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。</li><li>权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。</li><li>本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。</li></ol><h1 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdCwxNydn5YuT0s7aLuqWCvCl3iaCJeUV6Oa8zESpNKPDicgibjwANs465zibfWwwUQlMZsjciaNicO1Vwg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="http"></p><ul><li><strong>HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。</strong></li><li>HTTP 的名字「超文本传输协议」，它可以拆成三个部分：<ul><li>  超文本</li><li>  传输</li><li>  协议</li></ul></li><li><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/6-%E4%BA%94%E5%A4%A7%E7%B1%BBHTTP%E7%8A%B6%E6%80%81%E7%A0%81.png" alt="常见的状态码"></li></ul><h2 id="HTTP-常见的-header"><a href="#HTTP-常见的-header" class="headerlink" title="HTTP 常见的 header"></a>HTTP 常见的 header</h2><p>在 HTTP 中，header 是用于描述请求或响应的元数据，提供了有关请求或响应的信息。以下是一些常见的 HTTP 请求和响应头:</p><p>通用 Headers (适用于请求和响应):</p><ol><li> Cache-Control: 指示缓存策略，如 max-age、no-cache、no-store 等。</li><li> Connection: 控制是否保持网络连接，值可以为 keep-alive 或 close。</li><li> Content-Encoding: 表示已对实体内容使用的编码方法(例如 gzip)。</li><li> Content-Length: 描述实体内容的数据大小（单位：字节）。</li><li> Content-Type: 描述实体内容的 MIME 类型(如：application/json、text/html)。</li><li> Date: 表示消息创建的时间。</li><li> Pragma: 提供向后兼容性的缓存控制。</li><li> Transfer-Encoding: 描述应用于消息主体的传输编码方式，如 chunked。</li></ol><p>请求 Headers:</p><ol><li> Accept: 指示客户端可以处理的 MIME 类型。</li><li> Accept-Charset: 指示客户端可以接受的字符集。</li><li> Accept-Encoding: 指示客户端可以处理的内容编码。</li><li> Accept-Language: 列出客户端可以理解的自然语言。</li><li> Authorization: 提供了用于身份验证的凭据。</li><li> Host: 指定请求的目标服务器和端口号。</li><li> If-Modified-Since: 请求的资源在指定日期之后更新时才返回。</li><li> If-None-Match: 指定资源的 ETag 与目标资源的 ETag 匹配时才返回。</li><li> User-Agent: 描述客户端的软件信息。</li></ol><p>响应 Headers:</p><ol><li> Allow: 指示支持的 HTTP 方法，如 GET、POST 等。</li><li> Content-Disposition: 附加说明信息，如对下载文件的文件名进行描述。</li><li> Content-Language: 实体内容使用的自然语言。</li><li> ETag: 资源的版本标识，用于缓存验证。</li><li> Expires: 指定资源过期的时间。</li><li> Last-Modified: 指示资源最后一次被修改的时间。</li><li> Location: 用于重定向，指向新的 URL。</li><li> Server: 描述服务器软件信息。</li><li> Set-Cookie: 设置 Cookie。</li><li>WWW-Authenticate: 要求客户端进行身份验证。</li></ol><p>这只是 HTTP header 的一部分，实际上有更多的 header 用于定制和控制 HTTP 请求和响应。每个应用程序和服务器可能会使用不同的 header。</p><h3 id="keep-alive-的原理"><a href="#keep-alive-的原理" class="headerlink" title="keep-alive 的原理"></a>keep-alive 的原理</h3><p><strong>keep-alive</strong> 机制：若开启后，在一次 http 请求中，服务器进行响应后，不再直接断开 TCP 连接，而是将 TCP 连接维持一段时间。在这段时间内，如果同一客户端再次向服务端发起 http 请求，便可以复用此 TCP 连接，向服务端发起请求，并重置 timeout 时间计数器，在接下来一段时间内还可以继续复用。这样无疑省略了反复创建和销毁 TCP 连接的损耗。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>GET 和 POST 有什么区别？</strong></p><ul><li>根据 RFC 规范，<em>GET 的语义是从服务器获取指定的资源</em>，这个资源可以是静态的文本、页面、图片视频等。GET 请求的参数位置一般是写在 URL 中，URL 规定只能支持 ASCII，所以 GET 请求的参数只允许 ASCII 字符 ，而且浏览器会对 URL 的长度有限制（HTTP协议本身对 URL长度并没有做任何规定）。</li><li>根据 RFC 规范，<em>POST 的语义是根据请求负荷（报文body）对指定的资源做出处理</em>，具体的处理方式视资源类型而不同。POST 请求携带数据的位置一般是写在报文 body 中，body 中的数据可以是任意格式的数据，只要客户端与服务端协商好即可，而且浏览器不会对 body 大小做限制。</li></ul><p><strong>GET 和 POST 方法都是安全和幂等的吗？</strong><br>安全和幂等的概念：</p><ul><li>在 HTTP 协议里，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。</li><li>所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。</li></ul><p>结论</p><ol><li>GET 方法就是安全且幂等的，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。</li><li>POST 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据就会创建多个资源，所以不是幂等的。</li></ol><p>但是，实际应用过程中，不一定按照 RFC 的规范实现。</p><p><strong>Get 请求可以带 body 吗？</strong><br>RFC 并没有规定 Get 请求不可以带 body，看具体的网络库的实现。</p><p><strong>HTTP的缓存实现方式</strong></p><ul><li><p><em>强制缓存</em>：只要缓存没过期，浏览器就适用缓存中的数据；<br>强缓存是利用下面这两个 HTTP 响应头部（Response Header）字段实现的，它们都用来表示资源在客户端缓存的有效期：</p><ol><li>Cache-Control， 是一个相对时间；</li><li>Expires，是一个绝对时间；</li></ol></li><li><p><em>协商缓存</em>： 协商缓存就是与服务端协商之后，通过协商结果来判断是否使用本地缓存。</p></li></ul><p><em>强制缓存</em>是基于时间实现的，<em>协商缓存</em>是基于一个唯一标识实现的，相对来说后者可以更加准确地判断文件内容是否被修改，避免由于时间篡改导致的不可靠问题。</p><h1 id="H1-和-H2-的区别联系"><a href="#H1-和-H2-的区别联系" class="headerlink" title="H1 和 H2 的区别联系"></a>H1 和 H2 的区别联系</h1><h2 id="H1-的优缺点"><a href="#H1-的优缺点" class="headerlink" title="H1 的优缺点"></a>H1 的优缺点</h2><p><strong>优点</strong></p><ol><li>简单。header + body，header 还是 kv 形式；</li><li>灵活易扩展。https 就是 http + tls；http3 就是将 tcp 改成了 UDP 方案；</li><li>应用广泛。</li></ol><p><strong>缺点</strong></p><ol><li>无状态。无状态可以减轻资源消耗，但是关联操作时，会非常麻烦。针对这个问题，提出了 cookie 技术。</li><li>明文传输、不安全。可以方便阅读，为调试提供了便利性。但是，带来了信息泄露的风险。</li><li>【性能】通信开销大。http1.0 每个连接都需要进行三次握手，消耗很大。http1.1 提出了长连接通信。</li><li>【性能】队头阻塞。虽然可以采用管道的方式进行 HTTP 的请求，但是服务器还是需要按照请求的顺序对管道中的请求进行响应的。所以，如果不采用管道，那么请求和响应都有队头阻塞的问题，如果采用管道，那么可以解决请求的队头阻塞，但是响应的队头阻塞没办法解决。而且，管道默认是关闭的。（造成了队列是顺序请求的，前面的请求 block，就会影响后面的请求。</li><li>【效率】请求 / 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 Body 的部分；</li><li>【效率】发送冗长的首部。每次互相发送相同的首部造成的浪费较多；</li><li>服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞；</li><li>没有请求优先级控制；</li><li>请求只能从客户端开始，服务器只能被动响应。</li></ol><h2 id="H2-优化点"><a href="#H2-优化点" class="headerlink" title="H2 优化点"></a>H2 优化点</h2><h3 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h3><ul><li>H1 是明文的，多个请求发送的 header 可能存在大量的重复，header 越多，越大，浪费越严重；</li><li>H2 通信的双方共同维护索引表，传输的 header 只需要发送索引表中的索引即可；</li></ul><p>HTTP/2 会压缩头（Header）如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你消除重复的部分。<br>这就是所谓的 HPACK 算法：在客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了。</p><ul><li>双方维护一张头信息表；</li><li>各自只发送信息表中的索引号；</li></ul><h3 id="二进制格式"><a href="#二进制格式" class="headerlink" title="二进制格式"></a>二进制格式</h3><ul><li>H1 是明文传输，传输的报文更大，增加了传输成本。</li><li>H2 改成了二进制格式，传输的报文更小，降低了传输的成本。</li></ul><p>HTTP/2 不再像 HTTP/1.1 里的纯文本形式的报文，而是全面采用了<strong>二进制格式</strong>，头信息和数据体都是二进制，并且统称为帧（frame）：<strong>头信息帧（Headers Frame）和数据帧（Data Frame）</strong>。</p><p>这样虽然对人不友好，但是对计算机非常友好，因为计算机只懂二进制，那么收到报文后，无需再将明文的报文转成二进制，而是直接解析二进制报文，这增加了数据传输的效率。</p><blockquote><p>比如状态码 200 ，在 HTTP/1.1 是用 ‘2’’0’’0’ 三个字符来表示（二进制：00110010 00110000 00110000），共用了 3 个字节。<br>在 HTTP/2 对于状态码 200 的二进制编码是 10001000，只用了 1 字节就能表示，相比于 HTTP/1.1 节省了 2 个字节。</p></blockquote><h3 id="并发传输"><a href="#并发传输" class="headerlink" title="并发传输"></a>并发传输</h3><p>我们都知道 HTTP/1.1 的实现是基于请求-响应模型的。同一个连接中，HTTP 完成一个事务（请求与响应），才能处理下一个事务，也就是说在发出请求等待响应的过程中，是没办法做其他事情的，如果响应迟迟不来，那么后续的请求是无法发送的，也造成了队头阻塞的问题。</p><p>HTTP/2 就很牛逼了，引出了 Stream 概念，多个 Stream 复用在一条 TCP 连接。1 个 TCP 连接包含多个 Stream，Stream 里可以包含 1 个或多个 Message，Message 对应 HTTP/1 中的请求或响应，由 HTTP 头部和包体构成。Message 里包含一条或者多个 Frame，Frame 是 HTTP/2 最小单位，以二进制压缩格式存放 HTTP/1 中的内容（头部和包体）。</p><p>针对不同的 HTTP 请求用独一无二的 Stream ID 来区分，接收端可以通过 Stream ID 有序组装成 HTTP 消息，不同 Stream 的帧是可以乱序发送的，因此可以并发不同的 Stream ，也就是 HTTP/2 可以并行交错地发送请求和响应。<br>服务端并行交错地发送了两个响应： Stream 1 和 Stream 3，这两个 Stream 都是跑在一个 TCP 连接上，客户端收到后，会根据相同的 Stream ID 有序组装成 HTTP 消息。</p><h3 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h3><p>HTTP/2 还在一定程度上改善了传统的「请求 - 应答」工作模式，服务端不再是被动地响应，可以主动向客户端发送消息。<br>客户端和服务器双方都可以建立 Stream， Stream ID 也是有区别的，客户端建立的 Stream 必须是奇数号，而服务器建立的 Stream 必须是偶数号。</p><h2 id="H2-的缺点"><a href="#H2-的缺点" class="headerlink" title="H2 的缺点"></a>H2 的缺点</h2><ul><li>H2 解决了 H1 的 HTTP 层面的队头阻塞；</li><li>但是依旧面临 TCP 的队头阻塞；<br>HTTP/2 是基于 TCP 协议来传输数据的，TCP 是字节流协议，TCP 层必须保证收到的字节数据是完整且连续的，这样内核才会将缓冲区里的数据返回给 HTTP 应用，那么当「前 1 个字节数据」没有到达时，后收到的字节数据只能存放在内核缓冲区里，只有等到这 1 个字节数据到达时，HTTP/2 应用层才能从内核中拿到数据，这就是 HTTP/2 队头阻塞问题。</li></ul><p>一旦发生了丢包现象，就会触发 TCP 的重传机制，这样在一个 TCP 连接中的所有的 HTTP 请求都必须等待这个丢了的包被重传回来。</p><h1 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h1><p>HTTP/3 的核心原理是基于 UDP 而不是 TCP,它采用 QUIC 协议。QUIC 是 Google 开发的一种传输层网络协议,用于优化网络延迟,提高网络连接利用率。QUIC 协议相比 TCP 主要有以下几点改进:</p><ol><li>基于 UDP。QUIC 协议基于 UDP 而不是 TCP,可以避开 TCP 的拥塞控制和流量管理机制,获得更低的延迟和更高的吞吐量。</li><li>连接迅速建立。QUIC 协议的连接可以在 1 个 RTT(往返时延)内完成,比 TCP 快很多。这可以加速 HTTP/3 的连接建立和资源请求。</li><li>多路复用。QUIC 支持在一个连接上并行传输多条数据流,并且每个数据流都有自己的流量控制,相互不影响。这进一步提高了连接的利用率。</li><li>无头部压缩。QUIC 协议本身不定义头部压缩机制,直接使用 HPACK 算法对 HTTP/3 的头部信息进行压缩。</li><li>重传机制。QUIC 协议定义了自己的重传和流量控制机制来最小化网络拥塞和包丢失的影响。</li><li>零延迟 resumed 的连接。QUIC 允许连接处于静默状态一段时间后快速恢复,而不需要像 TCP 那样重新完成三次握手。这可以进一步减少延迟。<br>总之,HTTP/3 基于 UDP 和 QUIC 协议,在减少延迟,提高网络利用率和连接迅速建立等方面有很大提高,这使得基于 HTTP/3 的应用可以获得很好的性能提升和用户体验。<h2 id="quic"><a href="#quic" class="headerlink" title="quic"></a>quic</h2><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfrcYJokkKzRXdVXXK5PLNIaz06bQsqRN2ibNxIic9dg6EXabSIec2YcEc1u7lmw9cAgsTtedg2Kheg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="quic 握手过程"></li></ol><p><strong>QUIC 有以下 3 个特点。</strong></p><ul><li>无队头阻塞；</li><li>更快的连接建立；</li><li>连接迁移；</li></ul><p>QUIC 有自己的一套机制可以保证传输的可靠性的。当某个流发生丢包时，只会阻塞这个流，其他流不会受到影响，因此不存在队头阻塞问题。这与 HTTP/2 不同，HTTP/2 只要某个流中的数据包丢失了，其他流也会因此受影响。</p><p>QUIC 协议没有用四元组的方式来“绑定”连接，而是通过连接 ID 来标记通信的两个端点，客户端和服务器可以各自选择一组 ID 来标记自己，因此即使移动设备的网络变化后，导致 IP 地址变化了，只要仍保有上下文信息（比如连接 ID、TLS 密钥等），就可以“无缝”地复用原连接，消除重连的成本，没有丝毫卡顿感，达到了连接迁移的功能。</p><p>QUIC 是新协议，对于很多网络设备，根本不知道什么是 QUIC，只会当做 UDP，这样会出现新的问题，因为有的网络设备是会丢掉 UDP 包的，而 QUIC 是基于 UDP 实现的，那么如果网络设备无法识别这个是 QUIC 包，那么就会当作 UDP包，然后被丢弃。</p><p>HTTP/3 现在普及的进度非常的缓慢，不知道未来 UDP 是否能够逆袭 TCP。</p><h1 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h1><p><strong>区别</strong></p><ol><li>HTTP 是明文传输，HTTPS 是密文传输。</li><li>HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。</li><li>二者端口不一样，80 和 443 端口；</li><li>https 还需要向 CA 申请证书；</li></ol><p><strong>解决的问题</strong></p><ol><li>窃听风险；</li><li>篡改风险；</li><li>冒充风险；</li></ol><p>通过</p><ol><li>信息加密；</li><li>校验机制；</li><li>身份证书；</li></ol><p><strong>安全保证</strong></p><ol><li>混合加密，防止被窃听；</li><li>摘要算法，防止被篡改；</li><li>数字证书，防止被伪造；</li></ol><p><em>混合加密</em></p><ul><li>在通信建立前采用非对称加密的方式交换<em>会话秘钥</em>，后续就不再使用非对称加密。</li><li>在通信过程中全部使用对称加密的<em>会话秘钥</em>的方式加密明文数据。</li></ul><p><em>采用「混合加密」的方式的原因</em>：<br>    - 对称加密只使用一个密钥，运算速度快，密钥必须保密，无法做到安全的密钥交换。<br>    - 非对称加密使用两个密钥：公钥和私钥，公钥可以任意分发而私钥保密，解决了密钥交换问题但速度慢。</p><p><em>摘要算法+数字签名</em></p><ul><li>用摘要算法（哈希函数）来计算出内容的哈希值，也就是内容的「指纹」，这个哈希值是唯一的，且无法通过哈希值推导出内容，指纹和内容一起发送给接收方。</li><li>对方收到后，先是对内容也计算出一个「指纹」，然后跟发送方发送的「指纹」做一个比较，如果「指纹」相同，说明内容没有被篡改，否则就可以判断出内容被篡改了。</li></ul><blockquote><p>通过哈希算法可以确保内容不会被篡改，但是并不能保证「内容 + 哈希值」不会被中间人替换，因为这里缺少对客户端收到的消息是否来源于服务端的证明。</p></blockquote><p>那为了避免这种情况，计算机里会用非对称加密算法来解决，共有两个密钥：</p><ul><li>一个是公钥，这个是可以公开给所有人的；</li><li>一个是私钥，这个必须由本人管理，不可泄露。<br>这两个密钥可以双向加解密的，比如可以用公钥加密内容，然后用私钥解密，也可以用私钥加密内容，公钥解密内容。流程的不同，意味着目的也不相同：</li><li>公钥加密，私钥解密。这个目的是为了<em>保证内容传输的安全</em>，因为被公钥加密的内容，其他人是无法解密的，只有持有私钥的人，才能解密出实际的内容；</li><li>私钥加密，公钥解密。这个目的是为了<em>保证消息不会被冒充</em>，因为私钥是不可泄露的，如果公钥能正常解密出私钥加密的内容，就能证明这个消息是来源于持有私钥身份的人发送的。</li></ul><p>所以非对称加密的用途主要在于通过「私钥加密，公钥解密」的方式，来<em>确认消息的身份</em>，我们常说的<em>数字签名算法</em>，就是用的是这种方式，不过私钥加密内容不是内容本身，而是对内容的哈希值加密。</p><p><em>数字证书</em><br>由 CA 签发的证书，通信的时候，不仅会发送签名、公钥，还会发送证书。接收方会去 CA 校验证书的合法性。</p><h2 id="https-连接建立过程"><a href="#https-连接建立过程" class="headerlink" title="https 连接建立过程"></a>https 连接建立过程</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfrcYJokkKzRXdVXXK5PLNIVphk23zaVhxunUt5LfjuBuDvBOJptYVzsyKZWZQR2EU6x9I3jn4xSg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1"></p><p><em>SSL/TLS 协议基本流程：</em></p><ol><li>客户端向服务器索要并验证服务器的公钥。</li><li>双方协商生产「会话秘钥」。</li><li>双方采用「会话秘钥」进行加密通信。</li></ol><p>前两步也就是 SSL/TLS 的建立过程，也就是 TLS 握手阶段。</p><p>TLS 协议建立的详细流程：</p><p><em>1. ClientHello</em></p><p>首先，由客户端向服务器发起加密通信请求，也就是 <code>ClientHello</code> 请求。</p><p>在这一步，客户端主要向服务器发送以下信息：</p><p>（1）客户端支持的 TLS 协议版本，如 TLS 1.2 版本。</p><p>（2）客户端生产的随机数（<code>Client Random</code>），后面用于生成「会话秘钥」条件之一。</p><p>（3）客户端支持的密码套件列表，如 RSA 加密算法。</p><p><em>2. SeverHello</em></p><p>服务器收到客户端请求后，向客户端发出响应，也就是 <code>SeverHello</code>。服务器回应的内容有如下内容：</p><p>（1）确认 TLS 协议版本，如果浏览器不支持，则关闭加密通信。</p><p>（2）服务器生产的随机数（<code>Server Random</code>），也是后面用于生产「会话秘钥」条件之一。</p><p>（3）确认的密码套件列表，如 RSA 加密算法。</p><p>（4）服务器的数字证书。</p><p><em>3.客户端回应</em></p><p>客户端收到服务器的回应之后，首先通过浏览器或者操作系统中的 CA 公钥，确认服务器的数字证书的真实性。</p><p>如果证书没有问题，客户端会<strong>从数字证书中取出服务器的公钥</strong>，然后使用它加密报文，向服务器发送如下信息：</p><p>（1）一个随机数（<code>pre-master key</code>）。该随机数会被服务器公钥加密。</p><p>（2）加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信。</p><p>（3）客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供服务端校验。</p><p>上面第一项的随机数是整个握手阶段的第三个随机数，会发给服务端，所以这个随机数客户端和服务端都是一样的。</p><p><strong>服务器和客户端有了这三个随机数（Client Random、Server Random、pre-master key），接着就用双方协商的加密算法，各自生成本次通信的「会话秘钥」</strong>。</p><p><em>4. 服务器的最后回应</em></p><p>服务器收到客户端的第三个随机数（<code>pre-master key</code>）之后，通过协商的加密算法，计算出本次通信的「会话秘钥」。</p><p>然后，向客户端发送最后的信息：</p><p>（1）加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信。</p><p>（2）服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供客户端校验。</p><p>至此，整个 TLS 的握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的 HTTP 协议，只不过用「会话秘钥」加密内容。</p><p>总结下</p><ol><li>TLS 三次握手；</li><li>身份验证 + 预生成密钥；</li><li>确认会话密钥；</li><li>用 HTTP 协议传输加密的数据；</li></ol><p>TLS 的目的就在于获取那个<strong>会话密钥</strong>。</p><h2 id="证书校验"><a href="#证书校验" class="headerlink" title="证书校验"></a>证书校验</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfrcYJokkKzRXdVXXK5PLNINE4QmP73SeJ88QotjoF6LqVsXFANSNU3qZBUzlibCMXS4hzM4w02UzA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"><br>CA 签发证书的过程，如上图左边部分：</p><ul><li>  首先 CA 会把持有者的公钥、用途、颁发者、有效时间等信息打成一个包，然后对这些信息进行 Hash 计算，得到一个 Hash 值；</li><li>  然后 CA 会使用自己的私钥将该 Hash 值加密，生成 Certificate Signature，也就是 CA 对证书做了签名；</li><li>  最后将 Certificate Signature 添加在文件证书上，形成数字证书；</li></ul><p>客户端校验服务端的数字证书的过程，如上图右边部分：</p><ul><li>  首先客户端会使用同样的 Hash 算法获取该证书的 Hash 值 H1；</li><li>  通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使用 CA 的公钥解密 Certificate Signature 内容，得到一个 Hash 值 H2 ；</li><li>  最后比较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信。</li></ul><p><strong>多级证书</strong><br>向上溯源到最后的根证书，现校验根证书，再向下一级一级校验。</p><p><strong>为何不全由根证书签名</strong><br>应该是为了分摊风险。</p><h2 id="HTTPS-如何保证数据的完整性"><a href="#HTTPS-如何保证数据的完整性" class="headerlink" title="HTTPS 如何保证数据的完整性"></a>HTTPS 如何保证数据的完整性</h2><p>TLS 在实现上分为<strong>握手协议</strong>和<strong>记录协议</strong>两层：</p><ul><li>TLS 握手协议就是我们前面说的 TLS 四次握手的过程，负责协商加密算法和生成对称密钥，后续用此密钥来保护应用程序数据（即 HTTP 数据）；</li><li>TLS 记录协议负责保护应用程序数据并验证其完整性和来源，所以对 HTTP 数据加密是使用记录协议；</li></ul><p>TLS 记录协议主要负责消息（HTTP 数据）的<strong>压缩，加密及数据的认证</strong>。<br><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfrcYJokkKzRXdVXXK5PLNIw1Ifnx7W3grVsJubEfMiaj4gpqhPuwTghUiak8lxJY9omu1pYsSVGLUQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>具体过程如下：</p><ul><li>  首先，消息被分割成多个较短的片段,然后分别对每个片段进行压缩。</li><li>  接下来，经过压缩的片段会被<strong>加上消息认证码（MAC 值，这个是通过哈希算法生成的），这是为了保证完整性，并进行数据的认证</strong>。通过附加消息认证码的 MAC 值，可以识别出篡改。与此同时，为了防止重放攻击，在计算消息认证码时，还加上了片段的编码。</li><li>  再接下来，经过压缩的片段再加上消息认证码会一起通过对称密码进行加密。</li><li>  最后，上述经过加密的数据再加上由数据类型、版本号、压缩后的长度组成的报头就是最终的报文数据。</li></ul><p>记录协议完成后，最终的报文数据将传递到传输控制协议 (TCP) 层进行传输。</p><h2 id="HTTPS-安全吗？"><a href="#HTTPS-安全吗？" class="headerlink" title="HTTPS 安全吗？"></a>HTTPS 安全吗？</h2><p>目前 https 是安全的，除非是用户 client 端，自己接受了中间人的证书。协议自身是安全的。<br><strong>为何抓包工具可以</strong><br>很多抓包工具 之所以可以明文看到 HTTPS 数据，工作原理与中间人一致的。</p><p>对于 HTTPS 连接来说，中间人要满足以下两点，才能实现真正的明文代理:</p><ol><li> 中间人，作为客户端与真实服务端建立连接这一步不会有问题，因为服务端不会校验客户端的身份；</li><li> 中间人，作为服务端与真实客户端建立连接，这里会有客户端信任服务端的问题，也就是服务端必须有对应域名的私钥；<br>中间人要拿到私钥只能通过如下方式：</li><li> 去网站服务端拿到私钥；</li><li> 去CA处拿域名签发私钥；</li><li> 自己签发证书，切要被浏览器信任；</li></ol><p>不用解释，抓包工具只能使用第三种方式取得中间人的身份。<br>使用抓包工具进行 HTTPS 抓包的时候，需要在客户端安装 Fiddler 的根证书，这里实际上起认证中心（CA）的作用。<br>抓包工具能够抓包的关键是客户端会往系统受信任的根证书列表中导入抓包工具生成的证书，而这个证书会被浏览器信任，也就是抓包工具给自己创建了一个认证中心 CA，客户端拿着中间人签发的证书去中间人自己的 CA 去认证，当然认为这个证书是有效的。</p><h1 id="可靠连接"><a href="#可靠连接" class="headerlink" title="可靠连接"></a>可靠连接</h1><ol><li>数据不会损坏；</li><li>数据按照顺序传输交付；<blockquote><p>TCP 可靠性由三个机制保证：1. 序号（TCP 报文的序号）2. 确认（ACK 机制）3. 重传（超时或者冗余的 ACK）</p></blockquote><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1>![[Pasted image 20230517204640.png]]</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdCwxNydn5YuT0s7aLuqWCvWT9m8xicZXKk6ayV6nKAiaUAhdpdicfibLGEYhHx9OBo7EocXKx8wgIgww/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="tpc格式"></p><blockquote><p>滑动窗口、慢启动</p></blockquote><p>TCP 是面向连接的、可靠的、基于字节流的传输层通信协议。</p><ul><li>面向连接：一定是「一对一」才能连接，不能像 UDP 协议可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；</li><li>可靠的：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；</li><li>字节流：用户消息通过 TCP 协议传输时，消息可能会被操作系统「分组」成多个的 TCP 报文，如果接收方的程序如果不知道「消息的边界」，是无法读出一个有效的用户消息的。并且 TCP 报文是「有序的」，当「前一个」TCP 报文没有收到的时候，即使它先收到了后面的 TCP 报文，那么也不能扔给应用层去处理，同时对「重复」的 TCP 报文会自动丢弃。</li></ul><h2 id="TCP-和-UDP-的区别联系"><a href="#TCP-和-UDP-的区别联系" class="headerlink" title="TCP 和 UDP 的区别联系"></a>TCP 和 UDP 的区别联系</h2><ol><li>连接</li></ol><ul><li>TCP 是面向连接的传输层协议，传输数据前先要建立连接。</li><li>UDP 是不需要连接，即刻传输数据。</li></ul><ol start="2"><li>服务对象</li></ol><ul><li>TCP 是一对一的两点服务，即一条连接只有两个端点。</li><li>UDP 支持一对一、一对多、多对多的交互通信</li></ul><ol start="3"><li>可靠性</li></ol><ul><li>TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按序到达。</li><li>UDP 是尽最大努力交付，不保证可靠交付数据。但是我们可以基于 UDP 传输协议实现一个可靠的传输协议，比如 QUIC 协议。</li></ul><p>TCP 可靠性由三个机制保证：1. 序号（TCP 报文的序号）2. 确认（ACK 机制）3. 重传（超时或者冗余的 ACK）</p><ol start="4"><li>拥塞控制、流量控制</li></ol><ul><li>TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。</li><li>UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。</li></ul><ol start="5"><li>首部开销</li></ol><ul><li>TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」字段则会变长的。</li><li>UDP 首部只有 8 个字节，并且是固定不变的，开销较小。<br><img src="https://skminhaj.files.wordpress.com/2016/02/92926-tcp_udp_headers.jpg" alt="tcpvsudp"></li></ul><ol start="6"><li>传输方式</li></ol><ul><li>TCP 是流式传输，没有边界，但保证顺序和可靠。</li><li>UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。</li></ul><ol start="7"><li>分片不同</li></ol><ul><li>TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。</li><li>UDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再传给传输层。<blockquote><p><a href="https://mp.weixin.qq.com/s/ZMV2izeYkBIqjPhsv_-wdw">https://mp.weixin.qq.com/s/ZMV2izeYkBIqjPhsv_-wdw</a><br>MTU 最大传输单元（Maximum Transmission Unit，MTU）用来通知对方所能接受数据服务单元的最大尺寸，说明发送方能够接受的有效载荷大小。是包或帧的最大长度，一般以字节记。如果MTU过大，在碰到路由器时会被拒绝转发，因为它不能处理过大的包。MSS的英文全称叫Max Segment Size，是TCP最大段大小。在建立TCP连接的同时，也可以确定发送数据包的单位，我们称为MSS，这个MSS正好是IP中不会被分片处理的最大数据长度。</p></blockquote></li></ul><p>总结：</p><pre><code class="hljs">TCP 是面向连接的、可靠的、有序的、速度慢的协议；UDP 是无连接的、不可靠的、无序的、速度快的协议。TCP 开销比 UDP 大，TCP 头部需要 20 字节，UDP 头部只要 8 个字节。TCP 无界有拥塞控制，UDP 有界无拥塞控制。</code></pre><p><strong>应用场景的区别</strong><br>由于 TCP 是面向连接，能保证数据的可靠性交付，因此经常用于：</p><ul><li>FTP 文件传输；</li><li>HTTP / HTTPS；</li></ul><p>由于 UDP 面向无连接，它可以随时发送数据，再加上 UDP 本身的处理既简单又高效，因此经常用于：</p><ul><li>包总量较少的通信，如 DNS 、SNMP 等；</li><li>视频、音频等多媒体通信；</li><li>广播通信；</li></ul><p><strong>为什么 UDP 头部没有「首部长度」字段，而 TCP 头部有「首部长度」字段呢？</strong><br>原因是 TCP 有可变长的「选项」字段，而 UDP 头部长度则是不会变化的，无需多一个字段去记录 UDP 的首部长度。</p><p><strong>为什么 UDP 头部有「包长度」字段，而 TCP 头部则没有「包长度」字段呢？</strong></p><ul><li><a href="https://www.zhihu.com/question/25399270">参考链接1</a></li></ul><p>TCP Data的长度= IP总长度 - IP Header长度 - TCP Header长度。<br>UDP Data的长度= IP总长度 - IP Header长度 - UDP Header长度。</p><p>所以 UDP 的长度是多余的。有可能是UDP和IP协议并行发展的结果。或者说，UDP并不是等IP完全占领主导地位之后才开发的协议。</p><p><strong>TCP 和 UDP 可以使用同一个端口吗？</strong><br>可以的。<br>在数据链路层中，通过 MAC 地址来寻找局域网中的主机。在网际层中，通过 IP 地址来寻找网络中互连的主机或路由器。在传输层中，需要通过端口进行寻址，来识别同一计算机中同时通信的不同应用程序。<br>所以，传输层的「端口号」的作用，是为了区分同一个主机上不同应用程序的数据包。<br>传输层有两个传输协议分别是 TCP 和 UDP，在内核中是两个完全独立的软件模块。<br>当主机收到数据包后，可以在 IP 包头的「协议号」字段知道该数据包是 TCP/UDP，所以可以根据这个信息确定送给哪个模块（TCP/UDP）处理，送给 TCP/UDP 模块的报文根据「端口号」确定送给哪个应用程序处理。<br><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/network/port/tcp%E5%92%8Cudp%E6%A8%A1%E5%9D%97.jpeg" alt="网络数据的处理流程"></p><h2 id="建连"><a href="#建连" class="headerlink" title="建连"></a>建连</h2><p>简单来说就是，用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括 Socket、序列号和窗口大小称为<strong>连接</strong>。</p><p>TCP 四元组可以唯一的确定一个连接，四元组包括如下：</p><ul><li>源地址</li><li>源端口</li><li>目的地址</li><li>目的端口</li></ul><p><strong>一个服务端在监听一个端口，那它能持有的连接数量？</strong><br>因为连接是个四元组，server 的 ip 和端口号已经固定，但是客户端的 ip 以及 端口号是可以变的， 那么数量的公式为 ： 客户端的 ip 数量 *  端口数量；<br>对 IPv4，客户端的 IP 数最多为 2 的 32 次方，客户端的端口数最多为 2 的 16 次方，也就是服务端单机最大 TCP 连接数，约为 2 的 48 次方。</p><p>当然，服务端最大并发 TCP 连接数远不能达到理论上限，会受以下因素影响：</p><ul><li>文件描述符限制，每个 TCP 连接都是一个文件，如果文件描述符被占满了，会发生 Too many open files。Linux 对可打开的文件描述符的数量分别作了三个方面的限制：<ul><li>系统级：当前系统可打开的最大数量，通过 cat /proc/sys/fs/file-max 查看；</li><li>用户级：指定用户可打开的最大数量，通过 cat /etc/security/limits.conf 查看；</li><li>进程级：单个进程可打开的最大数量，通过 cat /proc/sys/fs/nr_open 查看；</li></ul></li><li>内存限制，每个 TCP 连接都要占用一定内存，操作系统的内存是有限的，如果内存资源被占满后，会发生 OOM。</li></ul><p><strong>建连的过程，以及对应的状态</strong><br>这个所谓的「连接」，只是双方计算机里维护一个状态机，在连接建立的过程中，双方的状态变化时序图就像这样。<br><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4/%E7%BD%91%E7%BB%9C/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.drawio.png" alt="建联"></p><p>从上图可以看出，前两次握手是不可以携带数据的，第三次是可以携带数据的。第三次握手可以包含数据，通过 TCP 快速打开（TFO）技术。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。</p><p><strong>握手是三次的原因</strong><br>三次握手的目的：同步 Sequence 序列号；交换 TCP 通讯参数，比如 MSS、窗口比例因子、选择性确认、指定校验和算法等。</p><ul><li>「两次握手」：无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号；</li><li>「四次握手」：三次握手就已经理论上最少可靠连接建立，所以不需要使用更多的通信次数。</li></ul><p>三次握手才能保证双方具有接收和发送的能力。体现在以下几个方面。</p><ol><li>【最重要的原因】防止历史连接触发初始化造成混乱；<ol><li>我们考虑一个场景，客户端先发送了 SYN（seq = 90）报文，然后客户端宕机了，而且这个 SYN 报文还被网络阻塞了，服务端并没有收到，接着客户端重启后，又重新向服务端建立连接，发送了 SYN（seq = 100）报文（注意！不是重传 SYN，重传的 SYN 的序列号是一样的）。</li><li>在两次握手的情况下，服务端没有中间状态给客户端来阻止历史连接，导致服务端可能建立一个历史连接，造成资源浪费。</li><li>三次握手为何可以解决这个问题？客户端连续发送多次 SYN（都是同一个四元组）建立连接的报文，在网络拥堵情况下：<ol><li>一个「旧 SYN 报文」比「最新的 SYN」 报文早到达了服务端，那么此时服务端就会回一个 SYN + ACK 报文给客户端，此报文中的确认号是 91（90+1）。</li><li>客户端收到后，发现自己期望收到的确认号应该是 100 + 1，而不是 90 + 1，于是就会回 RST 报文。</li><li>服务端收到 RST 报文后，就会释放连接。</li><li>后续最新的 SYN 抵达了服务端后，客户端与服务端就可以正常的完成三次握手了。</li></ol></li></ol></li><li>同步双方初始序列号<ol><li>TCP 协议的通信双方， 都必须维护一个「序列号」， 序列号是可靠传输的一个关键因素，它的作用：<ol><li>接收方可以去除重复的数据；</li><li>接收方可以根据数据包的序列号按序接收；</li><li>可以标识发送出去的数据包中， 哪些是已经被对方收到的（通过 ACK 报文中的序列号知道）；</li></ol></li><li>可见，序列号在 TCP 连接中占据着非常重要的作用，所以当客户端发送携带「初始序列号」的 SYN 报文的时候，需要服务端回一个 ACK 应答报文，表示客户端的 SYN 报文已被服务端成功接收，那当服务端发送「初始序列号」给客户端的时候，依然也要得到客户端的应答回应，这样一来一回，才能确保双方的初始序列号能被可靠的同步。</li></ol></li><li>避免资源浪费<ol><li>如果只有「两次握手」，当客户端发生的 SYN 报文在网络中阻塞，客户端没有接收到 ACK 报文，就会重新发送 SYN ，由于没有第三次握手，服务端不清楚客户端是否收到了自己回复的 ACK 报文，所以服务端每收到一个 SYN 就只能先主动建立一个连接，这会造成什么情况呢？如果客户端发送的 SYN 报文在网络中阻塞了，重复发送多次 SYN 报文，那么服务端在收到请求后就会建立多个冗余的无效链接，造成不必要的资源浪费。</li></ol></li></ol><p><strong>为何要求初始化的序列号都不一样</strong></p><p>起始 ISN 是基于时钟的，每 4 微秒 + 1，转一圈要 4.55 个小时。<br>RFC793 提到初始化序列号 ISN 随机生成算法：ISN = M + F(localhost, localport, remotehost, remoteport)。</p><ul><li>M 是一个计时器，这个计时器每隔 4 微秒加 1。</li><li>F 是一个 Hash 算法，根据源 IP、目的 IP、源端口、目的端口生成一个随机数值。要保证 Hash 算法不能被外部轻易推算得出，用 MD5 算法是一个比较好的选择。</li></ul><p>可以看到，随机数是会基于时钟计时器递增的，基本不可能会随机成一样的初始化序列号。</p><ul><li>【主要原因】为了防止历史报文被下一个相同四元组的连接接收；<ul><li>客户端和服务端建立一个 TCP 连接，在客户端发送数据包被网络阻塞了，然后超时重传了这个数据包，而此时服务端设备断电重启了，之前与客户端建立的连接就消失了，于是在收到客户端的数据包的时候就会发送 RST 报文。</li><li>紧接着，客户端又与服务端建立了与上一个连接相同四元组的连接；</li><li>在新连接建立完成后，上一个连接中被网络阻塞的数据包正好抵达了服务端，刚好该数据包的<strong>序列号</strong>正好是在服务端的接收窗口内，所以该数据包会被服务端正常接收，就会造成数据错乱。</li><li><strong>如果每次建立连接客户端和服务端的初始化序列号都「不一样」，就有大概率因为历史报文的序列号「不在」对方接收窗口，从而很大程度上避免了历史报文。</strong></li><li>所以，每次初始化序列号不一样很大程度上能够避免历史报文被下一个相同四元组的连接接收，注意是很大程度上，并不是完全避免了（因为序列号会有回绕的问题，所以需要用时间戳的机制来判断历史报文）</li></ul></li><li>为了安全性，防止黑客伪造的相同序列号的 TCP 报文被对方接收；</li></ul><p><strong>既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？</strong></p><ul><li>MTU：一个网络包的最大长度，以太网中一般为 1500 字节；</li><li>MSS：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度；</li></ul><ol><li>如果没有 MSS，则交由 ip 层进行分片处理，则效率很低丢包后，重传都是以 IP 包（MTU）为维度进行重传；<ol><li>当 IP 层有一个超过 MTU 大小的数据（TCP 头部 + TCP 数据）要发送，那么 IP 层就要进行分片，把数据分片成若干片，保证每一个分片都小于 MTU。把一份 IP 数据报进行分片以后，由目标主机的 IP 层来进行重新组装后，再交给上一层 TCP 传输层。那么当如果一个 IP 分片丢失，整个 IP 报文的所有分片都得重传。</li></ol></li><li>反之，丢包后，重传的维度是以 TCP 包，MSS  大小为维度的；<ol><li>经过 TCP 层分片后，如果一个 TCP 分片丢失后，进行重发时也是以 MSS 为单位，而不用重传所有的分片，大大增加了重传的效率。</li></ol></li></ol><p><strong>第一次握手丢失了，会发生什么？</strong><br>在 Linux 里，客户端的 SYN 报文最大重传次数由 tcp_syn_retries内核参数控制，这个参数是可以自定义的，默认值一般是 5。<br>当第五次超时重传后，会继续等待 32 秒，如果服务端仍然没有回应 ACK，客户端就不再发送 SYN 包，然后断开 TCP 连接。</p><p><strong>第二次握手丢失了，会发生什么？</strong><br>第二次握手的 <code>SYN-ACK</code> 报文其实有两个目的 ：</p><ul><li>  第二次握手里的 ACK， 是对第一次握手的确认报文；</li><li>  第二次握手里的 SYN，是服务端发起建立 TCP 连接的报文；<br>当第二次握手丢失了，客户端和服务端都会重传：</li><li>  客户端会重传 SYN 报文，也就是第一次握手，最大重传次数由 <code>tcp_syn_retries</code>内核参数决定；</li><li>  服务端会重传 SYN-ACK 报文，也就是第二次握手，最大重传次数由 <code>tcp_synack_retries</code> 内核参数决定。</li></ul><p>具体过程：</p><ul><li>  当客户端超时重传 1 次 SYN 报文后，由于 tcp_syn_retries 为 1，已达到最大重传次数，于是再等待一段时间（时间为上一次超时时间的 2 倍），如果还是没能收到服务端的第二次握手（SYN-ACK 报文），那么客户端就会断开连接。</li><li>  当服务端超时重传 2 次 SYN-ACK 报文后，由于 tcp_synack_retries 为 2，已达到最大重传次数，于是再等待一段时间（时间为上一次超时时间的 2 倍），如果还是没能收到客户端的第三次握手（ACK 报文），那么服务端就会断开连接。</li></ul><p><strong>第三次握手丢失了，会发生什么？</strong><br>客户端收到服务端的 SYN-ACK 报文后，就会给服务端回一个 ACK 报文，也就是第三次握手，此时客户端状态进入到 <code>ESTABLISH</code> 状态。</p><p>注意，<em>ACK 报文是不会有重传的，当 ACK 丢失了，就由对方重传对应的报文</em>。</p><p>具体过程：<br><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/network/tcp/%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%A2%E5%A4%B1.drawio.png" alt="第三次丢失"></p><ul><li>  当服务端超时重传 2 次 SYN-ACK 报文后，由于 tcp_synack_retries 为 2，已达到最大重传次数，于是再等待一段时间（时间为上一次超时时间的 2 倍），如果还是没能收到客户端的第三次握手（ACK 报文），那么服务端就会断开连接。</li></ul><p><strong>什么是 SYN 攻击？如何避免 SYN 攻击？</strong><br>在 TCP 三次握手的时候，Linux 内核会维护两个队列，分别是：</p><ul><li><p>  半连接队列，也称 SYN 队列；</p></li><li><p>  全连接队列，也称 accept 队列；<br><img src="https://cdn.xiaolincoding.com//mysql/other/format,png-20230309230622886.png" alt="正常流程"><br>正常流程：</p></li><li><p>  当服务端接收到客户端的 SYN 报文时，会创建一个半连接的对象，然后将其加入到内核的「 SYN 队列」；</p></li><li><p>  接着发送 SYN + ACK 给客户端，等待客户端回应 ACK 报文；</p></li><li><p>  服务端接收到 ACK 报文后，从「 SYN 队列」取出一个半连接对象，然后创建一个新的连接对象放入到「 Accept 队列」；</p></li><li><p>  应用通过调用 <code>accpet()</code> socket 接口，从「 Accept 队列」取出连接对象。</p></li></ul><p>避免 SYN 攻击方式，可以有以下四种方法：</p><ul><li>  调大 netdev_max_backlog；</li><li>  增大 TCP 半连接队列；</li><li>  开启 tcp_syncookies；</li><li>  减少 SYN+ACK 重传次数</li></ul><h2 id="断连"><a href="#断连" class="headerlink" title="断连"></a>断连</h2><p><img src="https://cdn.xiaolincoding.com//mysql/other/format,png-20230309230614791.png" alt="四次挥手的过程示意图"></p><ul><li>  客户端打算关闭连接，此时会发送一个 TCP 首部 <code>FIN</code> 标志位被置为 <code>1</code> 的报文，也即 <code>FIN</code> 报文，之后客户端进入 <code>FIN_WAIT_1</code> 状态。</li><li>  服务端收到该报文后，就向客户端发送 <code>ACK</code> 应答报文，接着服务端进入 <code>CLOSE_WAIT</code> 状态。</li><li>  客户端收到服务端的 <code>ACK</code> 应答报文后，之后进入 <code>FIN_WAIT_2</code> 状态。</li><li>  等待服务端处理完数据后，也向客户端发送 <code>FIN</code> 报文，之后服务端进入 <code>LAST_ACK</code> 状态。</li><li>  客户端收到服务端的 <code>FIN</code> 报文后，回一个 <code>ACK</code> 应答报文，之后进入 <code>TIME_WAIT</code> 状态</li><li>  服务端收到了 <code>ACK</code> 应答报文后，就进入了 <code>CLOSE</code> 状态，至此服务端已经完成连接的关闭。</li><li>  客户端在经过 <code>2MSL</code> 一段时间后，自动进入 <code>CLOSE</code> 状态，至此客户端也完成连接的关闭。</li></ul><p>你可以看到，每个方向都需要<strong>一个 FIN 和一个 ACK</strong>，因此通常被称为<strong>四次挥手</strong>。</p><p>这里一点需要注意是：<strong>主动关闭连接的，才有 TIME_WAIT 状态。</strong></p><p><strong>为什么需要四次</strong><br>因为 TCP 是全双工的，两个方向的关闭是独立确认的；</p><p>再来回顾下四次挥手双方发 FIN 包的过程，就能理解为什么需要四次了。</p><ul><li>关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据。</li><li>服务端收到客户端的 FIN 报文时，先回一个 ACK 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 FIN 报文给客户端来表示同意现在关闭连接。<br>从上面过程可知，服务端通常需要等待完成数据的发送和处理，所以服务端的 ACK 和 FIN 一般都会分开发送，因此是需要四次挥手。</li></ul><p><strong>第一次挥手丢失了，会发生什么</strong><br><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/network/tcp/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8C%A5%E6%89%8B%E4%B8%A2%E5%A4%B1.png" alt="丢失第一次的fin的状态变化"></p><p>当客户端（主动关闭方）调用 close 函数后，就会向服务端发送 FIN 报文，试图与服务端断开连接，此时客户端的连接进入到 <code>FIN_WAIT_1</code> 状态。</p><p>正常情况下，如果能及时收到服务端（被动关闭方）的 ACK，则会很快变为 <code>FIN_WAIT2</code>状态。</p><p>如果第一次挥手丢失了，那么客户端迟迟收不到被动方的 ACK 的话，也就会触发超时重传机制，重传 FIN 报文，重发次数由 <code>tcp_orphan_retries</code> 参数控制。</p><p>当客户端重传 FIN 报文的次数超过 <code>tcp_orphan_retries</code> 后，就不再发送 FIN 报文，则会在等待一段时间（时间为上一次超时时间的 2 倍），如果还是没能收到第二次挥手，那么直接进入到 <code>close</code> 状态。</p><p><strong>第二次挥手丢失了，会发生什么？</strong><br><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/network/tcp/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8C%A5%E6%89%8B%E4%B8%A2%E5%A4%B1.png"></p><ul><li>ACK 报文是不会重传的，所以如果服务端的第二次挥手丢失了，客户端就会触发超时重传机制，重传 FIN 报文，直到收到服务端的第二次挥手，或者达到最大的重传次数。</li><li>当客户端超时重传 2 次 FIN 报文后，由于 tcp_orphan_retries 为 2，已达到最大重传次数，于是再等待一段时间（时间为上一次超时时间的 2 倍），如果还是没能收到服务端的第二次挥手（ACK 报文），那么客户端就会断开连接。</li></ul><p>这个过程和丢失一次的挥手的效果基本类似。</p><p><strong>第三次挥手丢失了，会发生什么？</strong><br><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/network/tcp/%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B%E4%B8%A2%E5%A4%B1.drawio.png" alt="第三次挥手丢失"></p><p>具体过程：</p><ul><li>当服务端重传第三次挥手报文的次数达到了 3 次后，由于 tcp_orphan_retries 为 3，达到了重传最大次数，于是再等待一段时间（时间为上一次超时时间的 2 倍），如果还是没能收到客户端的第四次挥手（ACK报文），那么服务端就会断开连接。</li><li>客户端因为是通过 close 函数关闭连接的，处于 FIN_WAIT_2 状态是有时长限制的，如果 tcp_fin_timeout 时间内还是没能收到服务端的第三次挥手（FIN 报文），那么客户端就会断开连接。</li></ul><p><strong>第四次挥手丢失，会发生什么？</strong><br>重点在于，time-wait 的计时器会被重置，time wait 的时间会被延长。</p><p>当客户端收到服务端的第三次挥手的 FIN 报文后，就会回 ACK 报文，也就是第四次挥手，此时客户端连接进入 TIME_WAIT 状态。<br>在 Linux 系统，TIME_WAIT 状态会持续 2MSL 后才会进入关闭状态。<br>如果第四次挥手的 ACK 报文没有到达服务端，服务端就会重发 FIN 报文，重发次数仍然由前面介绍过的 tcp_orphan_retries 参数控制。</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/network/tcp/%E7%AC%AC%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E4%B8%A2%E5%A4%B1drawio.drawio.png" alt="都是第四次挥手的过程图"><br>具体过程：</p><ul><li>当服务端重传第三次挥手报文达到 2 时，由于 tcp_orphan_retries 为 2， 达到了最大重传次数，于是再等待一段时间（时间为上一次超时时间的 2 倍），如果还是没能收到客户端的第四次挥手（ACK 报文），那么服务端就会断开连接。</li><li>客户端在收到第三次挥手后，就会进入 TIME_WAIT 状态，开启时长为 2MSL 的定时器，如果途中再次收到第三次挥手（FIN 报文）后，就会重置定时器，当等待 2MSL 时长后，客户端就会断开连接。</li></ul><p><strong>为什么需要 time-wait 状态</strong><br>存在TIME_WAIT状态有两个理由:</p><ul><li><p>实现终止TCP全双工连接的可靠性；<br>假设最终的ACK丢丢失,服务器将重发最终的FIN,因此客户必须维护状态信息以允许它重发最终的ACK。如果不维护状态信息,它将响应以 RST(另外一个类型的TCP分节),而服务器则把该分节解释成一个错误。如果TCP打算执行所有必要的工作以彻底终止某个连接上两个方向的数据流(即全双工关闭),那么它必须正确处理连接终止序列四个分节中任何一个分节的丢失情况。本例子也说明执行主动关闭的一端为何进入TIME_WAIT状态.因为它可能不得不重发最终的ACK。</p></li><li><p>允许老的重复分节在网络中消逝；<br>要理解存在TIME_WAIT状态的第二个理由,我们假设206.62.226.33端口1500和 198.69.10.2端口21之间有一个TCP连接。我们关闭这个连接后,在以后某个时候又重新建立起相同的IP地址和端口之间的TCP连接。后一个连接称为前一个连接的化身(incar-nation),因为它们的IP地址和端口号都相同。TCP必须防止来自某个连接的老重复分组在连接终止后再现,从而被误解成属于同一连接的化身。要实现这种功能,TCP不能给处于TIME_WAIT状态的连接启动新的化身。既然TIME_WAIT状态的持续时间是2MLS,这就足够让某个方向上的分组最多存活MSL秒即被丢弃,另一个方向上的应答最多存活MSL秒也被丢弃。通过实施这个规则,我们就能保证当成功建立一个TCP连接时,来自该连接先前化身的老重复分组都已在网络中消逝。</p></li></ul><p><strong>过多 time-wait 的危害</strong></p><ol><li>第一是占用系统资源，比如文件描述符、内存资源、CPU 资源、线程资源等；</li><li>第二是占用端口资源，端口资源也是有限的，一般可以开启的端口为 32768～61000，也可以通过 net.ipv4.ip_local_port_range参数指定范围。</li></ol><p><strong>大量 TIME_WAIT 状态的原因有哪些？</strong></p><ol><li>第一个场景：HTTP 没有使用长连接；</li><li>第二个场景：HTTP 长连接超时；</li><li>第三个场景：HTTP 长连接的请求数量达到上限；</li></ol><p><strong>为什么 time_wait  状态为何是 2msl</strong></p><ul><li><a href="https://www.zhihu.com/question/67013338/answer/1032098712">参考链接1</a></li></ul><p>等待 2MSL 的真正目的是为了避免前后两个使用相同四元组的连接中的前一个连接的报文干扰后一个连接，换句话说，就是为了让此次 TCP 连接中的所有报文在网络中消失。<br>假如现在 A 发送 ACK 后，最坏情况下，这个 ACK 在 1MSL 时到达 B；此时 B 在收到这个 ACK 的前一刹那，一直在重传 FIN，这个 FIN 最坏会在 1MSL 时间内消失。因此从 A 发送 ACK 的那一刹那开始，等待 2MSL 可以保证 A 发送的最后一个 ACK，和 B 发送的最后一个 FIN 都在网络中消失</p><p>这样可以保证 fin 不会造成对后续的新的四元组的数据伤害。</p><p><strong>服务器出现大量 CLOSE_WAIT 状态的原因有哪些？</strong><br>我们先来分析一个普通的 TCP 服务端的流程：</p><ol><li>创建服务端 socket，bind 绑定端口、listen 监听端口</li><li>将服务端 socket 注册到 epoll</li><li>epoll_wait 等待连接到来，连接到来时，调用 accpet 获取已连接的 socket</li><li>将已连接的 socket 注册到 epoll</li><li>epoll_wait 等待事件发生</li><li>对方连接关闭时，我方调用 close</li></ol><ul><li>第一个原因：第 2 步没有做，没有将服务端 socket 注册到 epoll，这样有新连接到来时，服务端没办法感知这个事件，也就无法获取到已连接的 socket，那服务端自然就没机会对 socket 调用 close 函数了。</li><li>第二个原因：第 3 步没有做，有新连接到来时没有调用 accpet 获取该连接的 socket，导致当有大量的客户端主动断开了连接，而服务端没机会对这些 socket 调用 close 函数，从而导致服务端出现大量 CLOSE_WAIT 状态的连接。</li><li>第三个原因：第 4 步没有做，通过 accpet 获取已连接的 socket 后，没有将其注册到 epoll，导致后续收到 FIN 报文的时候，服务端没办法感知这个事件，那服务端就没机会调用 close 函数了。</li><li>第四个原因：第 6 步没有做，当发现客户端关闭连接后，服务端没有执行 close 函数，可能是因为代码漏处理，或者是在执行 close 函数之前，代码卡在某一个逻辑，比如发生死锁等等。</li></ul><h2 id="TCP-保活机制"><a href="#TCP-保活机制" class="headerlink" title="TCP 保活机制"></a>TCP 保活机制</h2><p><strong>如果已经建立了连接，但是客户端突然出现故障了怎么办？</strong><br>客户端出现故障指的是客户端的主机发生了宕机，或者断电的场景。发生这种情况的时候，如果服务端一直不会发送数据给客户端，那么服务端是永远无法感知到客户端宕机这个事件的，也就是服务端的 TCP 连接将一直处于 ESTABLISH 状态，占用着系统资源。<br>为了避免这种情况，TCP 搞了个保活机制。这个机制的原理是这样的：<br>定义一个时间段，在这个时间段内，如果没有任何连接相关的活动，TCP 保活机制会开始作用，每隔一个时间间隔，发送一个探测报文，该探测报文包含的数据非常少，如果连续几个探测报文都没有得到响应，则认为当前的 TCP 连接已经死亡，系统内核将错误信息通知给上层应用程序。<br>在 Linux 内核可以有对应的参数可以设置保活时间、保活探测的次数、保活探测的时间间隔，以下都为默认值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">net.ipv4.tcp_keepalive_time=7200<br>net.ipv4.tcp_keepalive_intvl=75  <br>net.ipv4.tcp_keepalive_probes=9<br></code></pre></td></tr></table></figure><ul><li>tcp_keepalive_time=7200：表示保活时间是 7200 秒（2小时），也就 2 小时内如果没有任何连接相关的活动，则会启动保活机制</li><li>tcp_keepalive_intvl=75：表示每次检测间隔 75 秒；</li><li>tcp_keepalive_probes=9：表示检测 9 次无响应，认为对方是不可达的，从而中断本次的连接。</li></ul><p>也就是说在 Linux 系统中，最少需要经过 2 小时 11 分 15 秒才可以发现一个「死亡」连接。</p><p><strong>如果已经建立了连接，但是服务端的进程崩溃会发生什么？</strong><br>TCP 的连接信息是由内核维护的，所以当服务端的进程崩溃后，内核需要回收该进程的所有 TCP 连接资源，于是内核会发送第一次挥手 FIN 报文，后续的挥手过程也都是在内核完成，并不需要进程的参与，所以即使服务端的进程退出了，还是能与客户端完成 TCP 四次挥手的过程。</p><h2 id="重传机制"><a href="#重传机制" class="headerlink" title="重传机制"></a>重传机制</h2><p>常见的重传机制：</p><ul><li>超时重传</li><li>快速重传</li><li>SACK</li><li>D-SACK</li></ul><h3 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h3><p>需要超时重传的情况</p><ul><li>数据包丢失；</li><li>确认的应答丢失；</li></ul><p><strong>几个专业术语</strong></p><ul><li><strong>RTT</strong> 发送信号所花费的时间加上确认已接收该信号所花费的时间，也就是包的往返时间。</li><li><strong>RTO  - Retransmission TimeOut</strong>  称为重传的超时时间。</li></ul><p><strong>RTO 的选择</strong></p><ul><li>RTO 较大时，重发变慢，效率低，性能差；</li><li>RTO 较小时，重发很快，频率很高，网络拥塞，浪费带宽，效率低；</li></ul><p>理想的 RTO：比 RTT 略大；但是 RTT 是经常波动的，是一个动态变化的值；</p><ul><li>如果产生超时重传，TCP 会将 RTO 加倍。</li></ul><p><strong>存在的问题</strong><br>和时间相关，超时的周期可能相对较长。</p><h3 id="快速重传：摆脱时间因素"><a href="#快速重传：摆脱时间因素" class="headerlink" title="快速重传：摆脱时间因素"></a>快速重传：摆脱时间因素</h3><p>快速重传（Fast Retransmit）机制，它不以时间为驱动，而是以数据驱动重传。</p><p>快速重传的工作方式是当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。</p><p><strong>存在的问题</strong><br>快速重传机制只解决了一个问题，就是超时时间的问题，但是它依然面临着另外一个问题。就是重传的时候，是重传之前的一个，还是重传所有的问题。</p><h3 id="SACK：selective-acknowledge"><a href="#SACK：selective-acknowledge" class="headerlink" title="SACK：selective acknowledge"></a>SACK：selective acknowledge</h3><p>这种方式需要在 TCP 头部「选项」字段里加一个 SACK 的东西，它可以将缓存的地图发送给发送方，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以只重传丢失的数据。<br>如果要支持 SACK，必须双方都要支持。在 Linux 下，可以通过 net.ipv4.tcp_sack 参数打开这个功能（Linux 2.4 后默认打开）。<br><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeuicRMlA8rKvl5AVLibhibDhg3RbEZItSOQY1TadJpUTuibIDziaibALaEmk7JO0Ill7iaeiaGI94Wyia0NXA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><h3 id="DSACK"><a href="#DSACK" class="headerlink" title="DSACK"></a>DSACK</h3><p>Duplicate SACK 又称 <code>D-SACK</code>，其主要<strong>使用了 SACK 来告诉「发送方」有哪些数据被重复接收了。</strong></p><p>两个很像</p><ul><li>ack 大于 sack：有重复的包被发送；</li><li>ack 小于 sack：有丢失的包；</li></ul><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p><strong>为什么引入</strong><br>如果以数据包为维度进行发送和确认应答，那么效率会很低，RTT 越长，效率越低。<br>故而 TCP 引入了窗口的概念。</p><p>窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。</p><p><strong>如何生效</strong>：累计确认<br><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeuicRMlA8rKvl5AVLibhibDhgz9LqxXsGESpzbick5b29No4rkqEubmVxexM2pM5DASr53mk65Qx5icZA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>图中的 ACK 600 确认应答报文丢失，也没关系，因为可以通话下一个确认应答进行确认，只要发送方收到了 ACK 700 确认应答，就意味着 700 之前的所有数据「接收方」都收到了。这个模式就叫累计确认或者累计应答。</p><p><strong>窗口大小</strong><br>那么有了窗口，就可以指定窗口大小，窗口大小就是指无需等待确认应答，而可以继续发送数据的最大值。所以，<em>通常窗口的大小是由接收方的决定的</em>。</p><p>TCP 头里有一个字段叫 <em>Window</em>，也就是窗口大小。这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。发送方发送的数据大小不能超过接收方的窗口大小，否则接收方就无法正常接收到数据。</p><p><strong>发送方的滑动窗口</strong><br><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeuicRMlA8rKvl5AVLibhibDhgesUOXicVCTx6j4WPOa8heRQc3aPPwWDAIMnUJocXjmABL8JSjnkyenw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>当收到 32-45 中的 ack，则滑动窗口向右移动对应大小的窗口距离。</p><p><strong>发送方程序中的窗口</strong><br><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeuicRMlA8rKvl5AVLibhibDhge0ujfyrkBBMicd4U4qiaubDemmA9BhjDalRicd1cxrAkBQqlBQSL1oGzg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><ul><li>  <code>SND.WND</code>：表示发送窗口的大小（大小是由接收方指定的）；</li><li>  <code>SND.UNA</code>：是一个绝对指针，它指向的是已发送但未收到确认的第一个字节的序列号，也就是 #2 的第一个字节。</li><li>  <code>SND.NXT</code>：也是一个绝对指针，它指向未发送但可发送范围的第一个字节的序列号，也就是 #3 的第一个字节。</li><li>  指向 #4 的第一个字节是个相对指针，它需要 <code>SND.UNA</code> 指针加上 <code>SND.WND</code> 大小的偏移量，就可以指向 #4 的第一个字节了。</li></ul><p>那么可用窗口大小的计算就可以是：<em>可用窗口大 = SND.WND -（SND.NXT - SND.UNA）</em></p><p><strong>接收方的滑动窗口</strong><br>这部分的内容存疑，涉及累计确认信息。个人认为这里合理的说法应该是累计确认的窗口。<br>![[Pasted image 20230412193237.png]]<br><strong>关于窗口滑动的几个术语</strong></p><ol><li>称窗口左边沿向右边沿靠近为窗口合拢。这种现象发生在数据被发送和确认时。</li><li>当窗口右边沿向右移动时将允许发送更多的数据，我们称之为窗口张开。这种现象发 生在另一端的接收进程读取已经确认的数据并释放了 T C P 的接收缓存时。</li><li>当右边沿向左移动时，我们称之为窗口收缩。 Host Requirements RFC强烈建议不要使 用这种方式。但 T C P 必须能够在某一端产生这种情况时进行处理。第 2 2 . 3 节 给 出 了 这 样 的 一 个 例子，一端希望向左移动右边沿来收缩窗口，但没能够这样做。</li></ol><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><ul><li><a href="https://mp.weixin.qq.com/s/Tc09ovdNacOtnMOMeRc_uA">参考连接1</a><br>TCP 还会做拥塞控制，对于真正的通路堵车不堵车，它无能为力，唯一能做的就是控制自己，也即控制发送的速度。不能改变世界，就改变自己嘛。</li></ul><p><strong>为什么需要</strong><br>在网络出现拥堵时，如果继续发送大量数据包，可能会导致数据包时延、丢失等，这时 TCP 就会重传数据，但是一重传就会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，这个情况就会进入恶性循环被不断地放大….</p><p>前面的流量控制是避免「发送方」的数据填满「接收方」的缓存，但是并不知道网络的中发生了什么。流量控制是控制的量，拥塞控制，是控制的速度。</p><p>所以，TCP 不能忽略网络上发生的事，它被设计成一个无私的协议，当网络发送拥塞时，TCP 会自我牺牲，降低发送的数据量。</p><p>控制的目的就是避免「发送方」的数据填满整个网络。</p><p><strong>拥塞窗口？</strong><br>拥塞窗口 cwnd 是发送方维护的一个的状态变量，它会根据网络的拥塞程度动态变化的，用以调节发送方要发送的量。</p><p><strong>拥塞窗口与发送窗口的关系</strong><br>由于入了拥塞窗口的概念后，此时发送窗口的值是swnd = min(cwnd, rwnd)，也就是拥塞窗口和接收窗口中的最小值。</p><p>拥塞窗口 cwnd 变化的规则：</p><ul><li>只要网络中没有出现拥塞，cwnd 就会增大；</li><li>但网络中出现了拥塞，cwnd 就减少</li></ul><p><strong>如何识别拥塞</strong><br>其实只要「发送方」没有在规定时间内接收到 ACK 应答报文，也就是<em>发生了超时重传</em>，就会认为网络出现了用拥塞。</p><h3 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h3><p>TCP 在刚建立连接完成后，首先是有个慢启动的过程，这个慢启动的意思就是一点一点的提高发送数据包的数量，如果一上来就发大量的数据，这不是给网络添堵吗？</p><p>慢启动的算法记住一个规则就行：当发送方每收到一个 ACK，就拥塞窗口 cwnd 的大小就会加 1。</p><p>虽然叫慢启动，但是发包的个数是指数性地增长。</p><p><strong>慢启动门限 ssthresh</strong></p><ul><li>当 cwnd &lt; ssthresh 时，使用慢启动算法。</li><li>当 cwnd &gt;= ssthresh 时，就会使用「拥塞避免算法」</li></ul><p>一般来说 ssthresh 的大小是 65535 字节。</p><h3 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h3><p>那么进入拥塞避免算法后，它的规则是：每当收到一个 ACK 时，cwnd 增加 1/cwnd。<br>拥塞避免算法就是将原本慢启动算法的指数增长变成了<strong>线性增长</strong>，还是增长阶段，但是增长速度缓慢了一些。</p><h3 id="发生拥塞如何是好"><a href="#发生拥塞如何是好" class="headerlink" title="发生拥塞如何是好?"></a>发生拥塞如何是好?</h3><p>拥塞窗口一直增长的话，下个阶段就可能触发拥塞，出现丢包现象，这时候就会进行数据包的重传。<br>重传的机制有两个</p><ol><li>超时重传；</li><li>快速重传；</li></ol><h4 id="拥塞发生算法-超时重传对应的算法"><a href="#拥塞发生算法-超时重传对应的算法" class="headerlink" title="拥塞发生算法 - 超时重传对应的算法"></a>拥塞发生算法 - 超时重传对应的算法</h4><p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeuicRMlA8rKvl5AVLibhibDhgDicBugvroe9EtiaFU38hk4JuVfDciauVPfecBNp8TPI1zkoqbibePA4dlg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>sshresh 和 cwnd 的值会发生变化：</p><ul><li>ssthresh 设为 cwnd/2 ；</li><li>cwnd 重置为 1 ；<br>接着，就重新开始慢启动，慢启动是会突然减少数据流的。这真是一旦「超时重传」，<em>马上回到解放前</em>。但是这种方式太激进了，反应也很强烈，会造成网络卡顿。</li></ul><h4 id="快速恢复算法-快速重传对应的算法"><a href="#快速恢复算法-快速重传对应的算法" class="headerlink" title="快速恢复算法 - 快速重传对应的算法"></a>快速恢复算法 - 快速重传对应的算法</h4><p>TCP 认为你还能收到 3 个重复 ACK 说明网络也不那么糟糕，这种情况不严重，因为大部分没丢，只丢了一小部分，所以没有必要像 RTO 超时那么强烈，则 ssthresh 和 cwnd 变化如下：</p><ul><li>cwnd = cwnd/2 ，也就是设置为原来的一半;</li><li>ssthresh = cwnd;</li></ul><p>快速重传和快速恢复算法一般同时使用。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeuicRMlA8rKvl5AVLibhibDhgR3w50EdpWF95ZM6QPpELCF3P1niazia8nBrSQUvX7e7F7LXMiaXR3iayUA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><ul><li>也就是没有像「超时重传」一夜回到解放前，而是还在比较高的值，后续呈线性增长。</li><li>从当前的一半位置开始线性增长尝试，但是最高不超过当前拥塞的状态。</li></ul><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>TCP 要做流量控制，通信双方各声明一个窗口（缓存大小），标识自己当前能够的处理能力，别发送的太快，撑死我，也别发的太慢，饿死我。<br>如果无脑发送数据，接收方处理不及时，就会触发重传机制，浪费带宽，降低效率，同时性能也降低。</p><p>TCP 提供一种机制可以让「发送方」根据「接收方」的实际接收能力控制发送的数据量，这就是所谓的<strong>流量控制</strong>。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeuicRMlA8rKvl5AVLibhibDhgrEtDiblwiaNET0Dx9BMfqyVXY6Kc00ib4BD6l1yyPEZrb2ptxV31VSmFw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="流量控制的流程示意图"></p><p><strong>系统缓冲区和滑动窗口的关系</strong><br>两个例子</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeuicRMlA8rKvl5AVLibhibDhgEnFtyFXUGUib92pibiacHuqQDAhbnC4AcVuMiaLs50TjjW0nbyrSnLs9Rg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="例子1"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeuicRMlA8rKvl5AVLibhibDhgoTmpebyoD5Qa0cbibkicaGibzdicpo4jibwkLR0L77fyrXyelL5nkZ40ibBA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="例子2"></p><ul><li>系统的缓存大小决定了发送和接收窗口的大小；</li><li>为了防止减少缓存和收缩窗口同时进行造成的丢包问题，TCP 规定是不允许同时减少缓存又收缩窗口的，而是采用先收缩窗口，过段时间在减少缓存，这样就可以避免了丢包情况。</li></ul><p><strong>窗口关闭</strong><br>如果窗口大小为 0 时，就会阻止发送方给接收方传递数据，直到窗口变为非 0 为止，这就是窗口关闭。<br>接收方向发送方通告窗口大小时，是通过 ACK 报文来通告的。<br>当窗口关闭后，接收方一直不发送 ack，更新滑动窗口，将出现死锁现象。</p><p>为了解决这个问题，TCP 为每个连接设有一个持续定时器，只要 TCP 连接一方收到对方的零窗口通知，就启动持续计时器。如果持续计时器超时，就会发送窗口探测 ( Window probe ) 报文，而对方在确认这个探测报文时，给出自己现在的接收窗口大小。</p><p>窗口探查探测的次数一般为 3 此次，每次次大约 30-60 秒（不同的实现可能会不一样）。如果 3 次过后接收窗口还是 0 的话，有的 TCP 实现就会发 RST 报文来中断连接。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZeuicRMlA8rKvl5AVLibhibDhgcJTR8cgbbGy6iaWedts5nVE5bk1X0SsY8FibxpPyCgwvfcxyEX4la1Yw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><p><strong>糊涂窗口综合症</strong><br>如果接收方太忙了，来不及取走接收窗口里的数据，那么就会导致发送方的发送窗口越来越小。<br>当发送程序缓慢地生产数据，接收程序缓慢地消耗数据，或者两者同时存在时，滑动窗口运作会出现严重问题。<br>处理每个数据包都存在一定量的开销，数据包数增加会增加网络通信的开销，可能使数据处理量进一步减少。最终的结果就是抖动。</p><p>要解决糊涂窗口综合症</p><ul><li><p>让接收方不通告小窗口给发送方；</p></li><li><p>让发送方避免发送小数据；</p></li><li><p>怎么让接收方不通告小窗口呢？<br>当「窗口大小」小于 min( MSS，缓存空间/2 ) ，也就是小于 MSS 与 1/2 缓存大小中的最小值时，就会向发送方通告窗口为 0，也就阻止了发送方再发数据过来。</p></li><li><p>怎么让发送方避免发送小数据呢？<br>使用 Nagle 算法，该算法的思路是延时处理，它满足以下两个条件中的一条才可以发送数据：</p></li></ul><ol><li>要等到窗口大小 &gt;= MSS 或是 数据大小 &gt;= MSS；</li><li>收到之前发送数据的 ack 回包<br>只要没满足上面条件中的一条，发送方一直在囤积数据，直到满足上面的发送条件。</li></ol><p>另外，Nagle 算法默认是打开的，如果对于一些需要小数据包交互的场景的程序，比如，telnet 或 ssh 这样的交互性比较强的程序，则需要关闭 Nagle 算法。<br>可以在 Socket 设置 TCP_NODELAY 选项来关闭这个算法（关闭 Nagle 算法没有全局参数，需要根据每个应用自己的特点来关闭）</p><h2 id="TCP-socket-编程"><a href="#TCP-socket-编程" class="headerlink" title="TCP socket 编程"></a>TCP socket 编程</h2><p><img src="https://cdn.xiaolincoding.com//mysql/other/format,png-20230309230545997.png" alt="socket编程和状态变迁"></p><ul><li>服务端和客户端初始化 socket，得到文件描述符；</li><li>服务端调用 bind，将 socket 绑定在指定的 IP 地址和端口;</li><li>服务端调用 listen，进行监听；</li><li>服务端调用 accept，等待客户端连接；</li><li>客户端调用 connect，向服务端的地址和端口发起连接请求；</li><li>服务端 accept 返回用于传输的 socket 的文件描述符；</li><li>客户端调用 write 写入数据；服务端调用 read 读取数据；</li><li>客户端断开连接时，会调用 close，那么服务端 read 读取数据的时候，就会读取到了 EOF，待处理完数据后，服务端调用 close，表示连接关闭。</li></ul><p>这里需要注意的是，服务端调用 accept 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。<br>所以，监听的 socket 和真正用来传送数据的 socket，是「两个」 socket，一个叫作监听 socket，一个叫作已完成连接 socket。</p><p>成功连接建立之后，双方开始通过 read 和 write 函数来读写数据，就像往一个文件流里面写东西一样。</p><p><strong>listen 时候参数 backlog 的意义？</strong></p><p><img src="https://cdn.xiaolincoding.com//mysql/other/format,png-20230309230542373.png" alt="内核中的两个队列"></p><p>Linux内核中会维护两个队列：</p><ul><li>  半连接队列（SYN 队列）：接收到一个 SYN 建立连接请求，处于 SYN_RCVD 状态；</li><li>  全连接队列（Accpet 队列）：已完成 TCP 三次握手过程，处于 ESTABLISHED 状态；</li></ul><p><strong>accept 发生在三次握手的哪一步？</strong><br><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4/%E7%BD%91%E7%BB%9C/socket%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.drawio.png"></p><p>客户端 connect 成功返回是在第二次握手，服务端 accept 成功返回是在三次握手成功之后。</p><p><strong>客户端调用 close 了，连接是断开的流程是什么？</strong></p><ul><li>客户端调用 <code>close</code>，表明客户端没有数据需要发送了，则此时会向服务端发送 FIN 报文，进入 FIN_WAIT_1 状态；</li><li> 服务端接收到了 FIN 报文，TCP 协议栈会为 FIN 包插入一个文件结束符 <code>EOF</code> 到接收缓冲区中，应用程序可以通过 <code>read</code> 调用来感知这个 FIN 包。这个 <code>EOF</code> 会被<strong>放在已排队等候的其他已接收的数据之后</strong>，这就意味着服务端需要处理这种异常情况，因为 EOF 表示在该连接上再无额外数据到达。此时，服务端进入 CLOSE_WAIT 状态；</li><li>  接着，当处理完数据后，自然就会读到 <code>EOF</code>，于是也调用 <code>close</code> 关闭它的套接字，这会使得服务端发出一个 FIN 包，之后处于 LAST_ACK 状态；</li><li>  客户端接收到服务端的 FIN 包，并发送 ACK 确认包给服务端，此时客户端将进入 TIME_WAIT 状态；</li><li>  服务端收到 ACK 确认包后，就进入了最后的 CLOSE 状态；</li><li>  客户端经过 <code>2MSL</code> 时间之后，也进入 CLOSE 状态；</li></ul><h2 id="Google-BBR"><a href="#Google-BBR" class="headerlink" title="Google BBR"></a>Google BBR</h2><blockquote><p> 这一节的内容是来自于 chatGPT 和 new bing 的问答；</p></blockquote><p>BBR算法的核心原理是根据网络的带宽、RTT（Round Trip Time，往返延迟时间）等特性，不断地调整发送数据包的速率和数量，以达到最佳的网络性能。具体来说，BBR算法的实现包括以下<strong>几个关键步骤</strong>：</p><ol><li>测量网络带宽：BBR算法通过发送一系列数据包，并测量其发送时间和到达时间，计算出当前网络的带宽情况。</li><li>测量网络延迟：BBR算法通过测量数据包往返的时间，计算出当前网络的RTT。</li><li>确定发送速率：根据当前的带宽和延迟情况，BBR算法会自动调整数据包的发送速率和数量，以达到最佳的网络性能。</li><li>动态调整拥塞窗口：BBR算法通过动态调整拥塞窗口大小，以确保网络的带宽和延迟在最佳状态下。</li></ol><p>Google BBR（Bottleneck Bandwidth and Round-trip propagation time）是一种新型的拥塞控制算法，与传统的拥塞控制和流量控制有以下改进的点：</p><ol><li>更精确的拥塞控制：传统的拥塞控制算法主要依赖于丢包来判断网络拥塞情况，而BBR则通过估算网络带宽和RTT来动态调整发送窗口大小，从而更准确地控制网络拥塞。</li><li>更高的网络利用率：传统的拥塞控制算法通常会导致网络利用率不足，而BBR则通过更准确的拥塞控制，能够更有效地利用网络带宽，从而提高网络吞吐量和响应速度。</li><li>更好的抗拥塞能力：BBR通过对网络拥塞的精确控制，能够在网络拥塞时自适应地减小发送速率，从而避免网络拥塞恶化。</li><li>更低的延迟和抖动：BBR通过准确地测量RTT和带宽，能够更精确地控制数据包的发送时间，从而减少网络延迟和抖动。<br>总之，BBR相较于传统的拥塞控制和流量控制，能够更准确地控制网络拥塞，更高效地利用网络带宽，具有更好的抗拥塞能力和更低的网络延迟和抖动。</li></ol><p><strong>缺点</strong></p><ol><li>对于某些网络环境不适用：BBR算法主要适用于高速长距离网络，对于较短距离、低速网络，BBR算法可能不如其他算法表现优秀。</li><li>对于UDP流量不友好：BBR算法主要针对TCP流量进行优化，对于UDP流量，BBR算法可能会表现不如其他算法。</li><li>可能引起其他TCP流量拥塞：在某些情况下，BBR算法可能会过于占用网络带宽，导致其他TCP流量拥塞，从而影响整个网络的性能。</li><li>需要更高的CPU计算能力：BBR算法的实现需要更高的CPU计算能力，因此在某些设备上可能会导致性能下降或延迟增加。</li></ol><p><strong>适用场景</strong><br>Google BBR算法主要适用于高速、长距离网络环境，例如数据中心、云计算、视频直播等网络场景。在这些场景中，网络拥塞控制是一个非常关键的问题，因为网络拥塞会导致丢包、延迟增加、吞吐量下降等问题，从而影响网络的性能和用户体验。</p><p>BBR算法具有以下几个适用场景：</p><ol><li>高速数据中心网络：BBR算法可以有效地处理高速数据中心网络中的流量拥塞，提高网络的吞吐量和用户体验。</li><li>云计算环境：BBR算法可以应用于云计算环境中的虚拟机、容器等网络通信中，提高网络性能和稳定性。</li><li>视频直播场景：BBR算法可以应用于视频直播场景中，通过提高视频传输的速率和降低延迟，提高观看体验。</li><li>远程办公场景：在远程办公场景中，BBR算法可以优化视频会议、文件传输等网络通信，提高网络性能和稳定性，从而提高工作效率。</li></ol><p>总体来说，Google BBR算法适用于高速、长距离网络环境，特别是在对网络性能和用户体验有较高要求的场景中，可以发挥出其优秀的拥塞控制和带宽利用效果。</p><h1 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h1><blockquote><p>子网掩码是一个32位的2进制数， 其对应网络地址的所有位都置为1，对应于主机地址的所有位置都为0。子网掩码告知路由器，地址的哪一部分是网络地址，哪一部分是主机地址，使路由器正确判断任意IP地址是否是本网段的，从而正确地进行路由。子网掩码由1和0组成，且1和0分别连续。</p></blockquote><ul><li>将子网掩码和 IP 地址按位计算 AND，就可得到网络号。如果网络地址相同，表明接受方在本网络上，那么可以把数据包直接发送到目标主机。路由器寻址工作中，也就是通过这样的方式来找到对应的网络号的，进而把数据包转发给对应的网络内。</li><li>划分子网，数量是 2 的子网位数 减去 2，这 2 指的是，全 1 的广播地址和全 0 的网络地址；</li></ul><h1 id="广播地址"><a href="#广播地址" class="headerlink" title="广播地址"></a>广播地址</h1><p>广播是一种同时向网络上的所有设备发送消息的方法。 广播地址是一个特殊地址，用于向给定网段上的所有设备发送消息。</p><p><strong>适用的场景</strong></p><ul><li>发现：当新设备加入网络时，它可以发送广播消息来宣布它的存在。 然后网络上的所有其他设备都可以收到此消息并采取适当的措施。</li><li>配置：在某些情况下，可能需要使用特定设置或参数配置网络上的所有设备。 通过发送广播消息，可以快速轻松地将此配置分发到网络上的所有设备。</li><li>故障排除：当网络出现问题时，向所有设备发送广播消息以确定问题的根本原因可能很有用。</li></ul><p><strong>给定 ip 和 子网掩码，如何确定广播地址</strong></p><ol><li>确认几类地址，比如 C 类地址，前24 位是网路号，后 8 位是主机号；</li><li>然后将 ip 地址与子网掩码进行与操作，可以获知主机号中挪用几位作为子网号；</li><li>子网号进行组合，每个组合中主机号全部位 1 的就是广播地址；</li></ol><h1 id="IPV6"><a href="#IPV6" class="headerlink" title="IPV6"></a>IPV6</h1><p>IPv4 的地址是 32 位的，大约可以提供 42 亿个地址，但是早在 2011 年 IPv4 地址就已经被分配完了。<br>但是 IPv6 的地址是 <code>128</code> 位的，这可分配的地址数量是大的惊人，说个段子 <strong>IPv6 可以保证地球上的每粒沙子都能被分配到一个 IP 地址。</strong></p><p>但 IPv6 除了有更多的地址之外，还有更好的安全性和扩展性，说简单点就是 IPv6 相比于 IPv4 能带来更好的网络体验。</p><p>但是因为 IPv4 和 IPv6 不能相互兼容，所以不但要我们电脑、手机之类的设备支持，还需要网络运营商对现有的设备进行升级，所以这可能是 IPv6 普及率比较慢的一个原因。</p><p>Pv6 相比 IPv4 的首部改进：</p><ul><li>  <strong>取消了首部校验和字段。</strong> 因为在数据链路层和传输层都会校验，因此 IPv6 直接取消了 IP 的校验。</li><li>  <strong>取消了分片/重新组装相关字段。</strong> 分片与重组是耗时的过程，IPv6 不允许在中间路由器进行分片与重组，这种操作只能在源与目标主机，这将大大提高了路由器转发的速度。</li><li>  <strong>取消选项字段。</strong> 选项字段不再是标准 IP 首部的一部分了，但它并没有消失，而是可能出现在 IPv6 首部中的「下一个首部」指出的位置上。删除该选项字段使的 IPv6 的首部成为固定长度的 <code>40</code> 字节。</li></ul><h1 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h1><p>ICMP 全称是 <strong>Internet Control Message Protocol</strong>，也就是<strong>互联网控制报文协议</strong>。</p><p><code>ICMP</code> 主要的功能包括：<strong>确认 IP 包是否成功送达目标地址、报告发送过程中 IP 包被废弃的原因和改善网络设置等。</strong></p><p>在 <code>IP</code> 通信中如果某个 <code>IP</code> 包因为某种原因未能达到目标地址，那么这个具体的原因将<strong>由 ICMP 负责通知</strong>。</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/IP/40.jpg"></p><h1 id="BGP"><a href="#BGP" class="headerlink" title="BGP"></a>BGP</h1><p><strong>BGP</strong></p><ul><li>BGP协议的核心就是通过BGP对等关系不断地交换路由信息,选择和传播最佳路径,从而实现网络之间的互联互通。这是Internet能够稳定运行的基石。 </li></ul><p><strong>BGP 的过程</strong></p><ol><li>BGP 路由器之间建立BGP对等关系(BGP Peering),用于交换路由信息。</li><li>每个BGP路由器都有一个独立的自治系统号(AS Number),用于标识自己所在的网络。</li><li>BGP路由器会定期向对等路由器发送自己的路由表信息,这些信息包含了该路由器可以到达的网络和子网。</li><li>BGP路由器在接收到对等路由器发送的路由信息后,会根据路由选择算法选择一条最佳路径,并把这条路径信息记录到自己的路由表中。</li><li>BGP会定期检查路由表,如果最佳路径发生变化,就会立即传播更新信息给所有的对等路由器。</li><li>BGP可以支持不同AS之间进行路由传播,所以BGP可以实现Internet这样庞大复杂网络的互联互通。</li><li>BGP还支持各种路由策略,如设置本地优先级、过滤某个对等方的路由等,这使得网络管理员可以很灵活地控制路由选择和路由传播。</li></ol><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><p><strong>summary</strong></p><ul><li>浏览器为了保护数据安全而采用的一种称为“同源策略”的机制，当跨域进行网络请时，浏览器将会进行拦截；</li><li>解决方法，分为客户端和服务端两种，一种server全部放行；二是客户端请求，服务端根据 header 中设置的 domain 进行个性化处理；</li></ul><p><strong>定义，什么是跨域问题</strong></p><ul><li>跨域问题产生的原因是浏览器的<em>同源策略</em>。所谓”同源”指的是”协议+域名+端口”三者相同。</li><li>同源策略的目的是为了保证用户信息的安全,防止恶意的网站获取该信息。同源策略规定,A 网站中的 JavaScript 脚本,只能获得同域名的 Cookie、DOM 和 AJAX 信息。</li><li>当从一个源加载的文档或脚本试图与另一个源交互时,就会产生跨域问题。例如,当从源 A 的网页试图使用 XMLHttpRequest 向源 B 的服务器发送请求,该请求会被 browsers 拒绝。</li></ul><p><strong>解决方案</strong></p><ol><li>CORS(跨域资源共享)。这是最简单的方式,只需要在服务端设置 <em>Access-Control-Allow-Origin</em> 就可以了。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Header set Access-Control-Allow-Origin &quot;*&quot;<br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li>JSONP。通过&lt;script&gt;\ 标签 src 属性请求一个 JSONP 接口,此接口会返回一个函数调用,并传入数据作为参数。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://example.com/api?callback=func&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>func(&#123; name: &quot;John&quot; &#125;);<br><br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>代理。在同源服务器上设置一个代理,转发跨域请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> proxy = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>);<br><br>app.use(<span class="hljs-string">&#x27;/api&#x27;</span>, proxy(&#123; <br>  <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;[http://example.com](http://example.com)&#x27;</span>, <br>  <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span> <br>&#125;));<br></code></pre></td></tr></table></figure></li><li><p>跨域资源共享(CORS)手动设置。在请求头中手动设置 Origin。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;[http://example.com/api](http://example.com/api)&#x27;</span>);<br>xhr.setRequestHeader(<span class="hljs-string">&#x27;Origin&#x27;</span>, <span class="hljs-string">&#x27;[http://mydomain.com](http://mydomain.com)&#x27;</span>); <br>xhr.send();<br></code></pre></td></tr></table></figure></li></ol><p>服务端根据 Origin 头决定是否同意请求。</p><h1 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h1><p><strong>what</strong><br>断点续传是一种文件下载技术。它允许你在下载中断的情况下,从中断的地方继续下载,而不是重新下载整个文件。这个技术的工作原理是:</p><ol><li>在下载文件时,捕获下载进度并记录下已下载的数据块信息,如块的起始位置和结束位置。</li><li>如果下载中断,再次下载时,可以通过已记录的块信息直接请求服务器下载未完成的块,而不需要重新下载整个文件。</li><li>服务器也需要支持断点续传,能够根据客户端提供的块信息直接返回未完成的块数据。</li></ol><p><strong>why</strong><br>断点续传的主要优势是:</p><ol><li>避免重新下载整个文件,节省时间和流量。</li><li><ol start="2"><li>适用于大文件下载和网络条件不稳定的情况。即使下载中断多次,也可以随时继续下载未完成的部分,直到整个文件下载完成。</li></ol></li><li><ol start="3"><li>支持多线程并发下载同一个文件,加快下载速度。不同线程可以请求下载文件不同的块,并最终合并成完整文件。</li></ol></li></ol><p><strong>how</strong><br>客户端:</p><ol><li>记录下载文件的信息,如URL、文件大小、已下载大小等。这通常存放在一个下载任务对象中。</li><li>下载时记录每个数据块的起始和结束位置。可以使用数组来表示各块,数组中的每个元素记录一块的位置信息。</li><li>如果下载中断,能够根据上一步记录的块信息构造一个新的下载请求,请求服务器返回未完成块的数据。</li><li>收到服务器返回的数据后,按块位置信息将数据写入文件,实现续传。</li></ol><p>服务器:</p><ol><li>支持接收客户端上传的块位置信息,并能解析这些信息。</li><li>能够根据客户端提供的块信息直接读出对应文件区域的数据返回,而不需要返回整个文件。</li><li>应能处理多个客户端同时对一个文件进行断点续传的情况。可以为每个客户端维护一个独立的文件指针来记录各自的下载进度。</li></ol><p>总体步骤如下:</p><ol><li>客户端发起 GET 请求,包含必要的头信息如 Host、Range(表示数据块位置)等。</li><li>服务器接收到请求,解析Range头信息,获得客户端需要的块位置。</li><li>服务器从文件中读取对应区域的数据,构造206 Partial Content响应返回给客户端。</li><li>客户端接收到响应,将数据写入文件,并更新下载任务的相关信息,如已下载大小等。</li><li>客户端可以随时因为各种原因中断下载,并在需要时发起新的请求继续下载,直到整个文件下载完成。</li></ol><h1 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h1><ul><li><a href="https://colobu.com/2019/10/03/protobuf-ultimate-tutorial-in-go/">参考链接1</a></li><li><a href="https://zhuanlan.zhihu.com/p/348831252">参考链接2</a></li><li><a href="https://www.tizi365.com/archives/367.html">参考链接3</a></li></ul><p><strong>summary</strong></p><ol><li>高效：二进制存储、不保存字段名、默认值不存储、方便嵌套等等；</li><li>跨平台；</li><li>开源；</li><li>质量稳定；</li></ol><p>Protobuf 相比普通 Java 对象具有更高的性能和更小的体积,非常适合做数据存储和网络传输。</p><p>优点:</p><ol><li>高效。Protobuf 对数据进行了二进制序列化,体积更小,序列化和反序列化性能更高。与 XML 或 JSON 相比,Protobuf 的体积可以小1/3到1/10。</li><li>简单。Protobuf 的数据结构定义简单清晰,只需要定义消息和字段,而无需手动设置各种格式和协议。</li><li>跨平台。Protobuf 生成的代码和二进制数据可以在不同平台(Windows、Linux、Mac)之间交换使用。</li><li>与语言无关。 .proto 文件中的数据结构定义与具体使用的语言无关,可以通过 Protobuf 编译器生成任意支持的语言(C++、Java、Python 等)代码。</li><li>可扩展。新的字段可以随时新增,旧的应用也可以无缝读取,兼顾向前兼容性。移除字段也比较容易管理。</li><li> 静态类型。通过 .proto 文件,Protobuf 使用静态的数据类型定义,能在编译时发现类型错误。</li><li>开源。Protobuf 由 Google 开发并开源,社区资源丰富,已有大量成功应用案例。</li><li>简单协议。Protobuf 及其生成的代码可以简单地在不依赖 Protobuf 的系统间传输,容易实现一个简单协议。</li><li> 高质量实现。Google 在 GRPC 和 Protocol Buffers 两个项目中广泛使用 Protobuf ,质量非常高。</li></ol><p>总之,Protobuf 是一个简单但强大的工具,用于构建高效的序列化结构数据,适用于数据存储、 rpc 数据交换等,有着广泛的应用。它的主要优点是体积小、序列化快、静态类型、可扩展、跨语言等特征。</p><p>缺点:</p><ol><li>只支持结构化数据,不支持泛型和继承等面向对象的特性。Protobuf 主要用于传输和存储数据,而不是作为完整的对象系统。</li><li>需要 .proto 文件和编译步骤。在构建项目时需要运行Protobuf编译器protoc来生成代码,这增加了一定的复杂度。</li><li> 繁琐的修改过程。当 .proto 文件定义修改后,需要重新运行 protoc 重新生成代码,会对现有的序列化后的数据造成不兼容。需要慎重设计数据结构。</li><li>性能开销。Protobuf 的序列化和反序列化需要额外的CPU和内存消耗,虽然比其他格式高效,但相比直接使用字节数组或普通对象来说还是有一定开销的。</li><li> 缺少架构支持。Protobuf 本身不提供如服务注册、服务发现、负载均衡等服务架构需要的功能,需要配合其他解决方案使用。</li><li>有限的类型系统。Protobuf 支持的类型比较有限,没有对decimal、uuid、时间等类型的 native 支持。这些类型如果要使用 Protobuf 需要自定义实现。</li><li>迭代难度大。一旦 .proto 文件发布,其定义的消息就会被广泛使用,很难再进行不兼容的更改。设计 .proto 结构需要慎重考虑未来可能的变化。</li></ol><p>所以总体来说,Protobuf 非常适合做高效的数据存储和传输,但不足以成为完整的对象或 RPC 系统。实际项目中,Protobuf 常与其他技术结合使用,来弥补其缺点。</p><p>Protobuf 高效的原因有以下几个:</p><ol><li>采用二进制格式。Protobuf 使用二进制格式对数据进行序列化和反序列化,比如 JSON 这种文本格式要高效得多。</li><li>预定义消息格式。在 .proto 文件中预定义消息格式,所有数据都必须符合这个格式。这样在序列化和反序列化的时候就不需要额外的元数据来描述数据结构,节省空间。</li><li>使用varint编码整数。Protobuf 使用varint对整数进行紧凑编码。不同于常规的可变长编码,varint编码会使用1-5个字节来编码数字,这使得编码后的整数平均只占用1-2个字节,比常规编码方式高效。</li><li>不包含字段名。序列化后的Protobuf 数据不包含字段名,只包含字段值,这也节省了空间。</li><li>默认值省略。如果某个字段的值等于它的默认值,那么这些字段在序列化后的数据中会被省略,不会被编码进去。这也可以减少编码后数据的大小。</li><li>嵌套对象支撑。Protobuf 支持嵌套的消息(message)和枚举(enum),这使得它能够高效的序列化复杂的结构化数据。嵌套的消息和枚举也使用相同的空间节约技术,所以效率不会降低。</li></ol><h1 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfrcYJokkKzRXdVXXK5PLNIO4PavaS9pZHriabZMapD23yYKBYyicZoTa7mW5m5wHvpqj9NkDCquicow/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"><br>具体过程如下：</p><ul><li>  客户端向服务端发起 HTTPS 建立连接请求时，然后被「假基站」转发到了一个「中间人服务器」，接着中间人向服务端发起 HTTPS 建立连接请求，此时客户端与中间人进行 TLS 握手，中间人与服务端进行 TLS 握手；</li><li>  在客户端与中间人进行 TLS 握手过程中，中间人会发送自己的公钥证书给客户端，<strong>客户端验证证书的真伪</strong>，然后从证书拿到公钥，并生成一个随机数，用公钥加密随机数发送给中间人，中间人使用私钥解密，得到随机数，此时双方都有随机数，然后通过算法生成对称加密密钥（A），后续客户端与中间人通信就用这个对称加密密钥来加密数据了。</li><li>  在中间人与服务端进行 TLS 握手过程中，服务端会发送从 CA 机构签发的公钥证书给中间人，从证书拿到公钥，并生成一个随机数，用公钥加密随机数发送给服务端，服务端使用私钥解密，得到随机数，此时双方都有随机数，然后通过算法生成对称加密密钥（B），后续中间人与服务端通信就用这个对称加密密钥来加密数据了。</li><li>  后续的通信过程中，中间人用对称加密密钥（A）解密客户端的 HTTPS 请求的数据，然后用对称加密密钥（B）加密 HTTPS 请求后，转发给服务端，接着服务端发送 HTTPS 响应数据给中间人，中间人用对称加密密钥（B）解密 HTTPS 响应数据，然后再用对称加密密钥（A）加密后，转发给客户端。</li></ul><p>从客户端的角度看，其实并不知道网络中存在中间人服务器这个角色。那么中间人就可以解开浏览器发起的 HTTPS 请求里的数据，也可以解开服务端响应给浏览器的 HTTPS 响应数据。相当于，中间人能够 “偷看” 浏览器与服务端之间的 HTTPS 请求和响应的数据。</p><p>但是要发生这种场景是有前提的，前提是用户点击接受了中间人服务器的证书。</p><p>中间人服务器与客户端在 TLS 握手过程中，实际上发送了自己伪造的证书给浏览器，而这个伪造的证书是能被浏览器（客户端）识别出是非法的，于是就会提醒用户该证书存在问题。</p><h1 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h1><p>在传输一个 IP 数据报的时候，确定了源 IP 地址和目标 IP 地址后，就会通过主机「路由表」确定 IP 数据包下一跳。然而，网络层的下一层是数据链路层，所以我们还要知道「下一跳」的 MAC 地址。</p><p>由于主机的路由表中可以找到下一跳的 IP 地址，所以可以通过 ARP 协议，求得下一跳的 MAC 地址。</p><p><strong>过程</strong></p><ul><li>  主机会通过<strong>广播发送 ARP 请求</strong>，这个包中包含了想要知道的 MAC 地址的主机 IP 地址。</li><li>  当同个链路中的所有设备收到 ARP 请求时，会去拆开 ARP 请求包里的内容，如果 ARP 请求包中的目标 IP 地址与自己的 IP 地址一致，那么这个设备就将自己的 MAC 地址塞入 <strong>ARP 响应包</strong>返回给主机。</li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>通用知识：<ul><li>基础<ul><li>  7层网络协议的基本概念，常用网络协议属于第几层？</li><li>  常见设备工作在那一层？(路由器、交换机、网桥)</li><li>  json 格式描述</li></ul></li><li>进阶<ul><li>  protobuf 协议了解</li><li>  整个网络过程串联(一个请求整个网络的处理过程)</li></ul></li></ul></li><li>网络层：<ul><li>入门<ul><li>  IPv4地址样例。</li><li>  子网掩码的作用。</li><li>  给定 ip 和 子网掩码，广播地址是什么？</li></ul></li><li>基础<ul><li>  列举IP报文头部(源地址、目标地址、TTL)</li></ul></li><li>进阶<ul><li>  IPv6 的基本概念</li><li>  为什么引入 IPV6。</li><li>  BGP、OSPF协议原理</li></ul></li></ul></li><li>传输层：<ul><li>入门<ul><li>  TCP 和 UDP 各自的特点和区别；</li><li>  TCP 和 UDP 各自适合的使用场景</li></ul></li><li>基础<ul><li>  TCP 建立连接和断开连接的过程</li><li>  TCP和UDP的头部列举</li></ul></li><li>进阶<ul><li>  什么是SYN 攻击？</li><li>  TCP为什么三次握手 而需要 四次挥手？</li><li>  滑动窗口概念</li><li>  慢启动</li><li>  拥塞控制</li></ul></li></ul></li><li>DNS ：<ul><li>入门<ul><li>  DNS用途</li></ul></li><li>基础<ul><li>  描述 DNS 过程</li></ul></li><li>进阶<ul><li>  列举典型的DNS记录格式</li><li>  DNS 劫持概念，如何防止 DNS 劫持？</li><li>  主流的公有云的DNS服务端架构</li></ul></li></ul></li><li>应用层 ：<a href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html">https://hit-alibaba.github.io/interview/basic/network/HTTP.html</a><ul><li>入门<ul><li>  http协议的用途，列举一些使用场景</li><li>  举例常见应用层协议</li><li>  http和https区别</li></ul></li><li>基础<ul><li>  header 中：Content-Type / Content-Length / Content-Encoding：用途</li><li>  header，cookie，返回码，UA，HOST，域 等基本概念；</li><li>  POST/GET 区别；</li><li>  常见返回码含义；</li></ul></li><li>进阶<ul><li>  http2.0 和 http1.1 的主要区别？</li><li>  GET 的幂等的含义；</li><li>  keep-alive 含义；</li><li>  为什么需要 url 编码？</li><li>  实现断点续传的原理；</li><li>  https协商过程</li><li>  CSRF（Cross-site request forgery，跨站请求伪造）：原理和防范</li><li>  XSS（Cross Site Scripting，跨站脚本攻击）：原理和防范</li><li>  中间人攻击概念与防止。</li><li>  QUIC、Http2特点</li></ul></li></ul></li></ul><h1 id="Socket-编程"><a href="#Socket-编程" class="headerlink" title="Socket 编程"></a>Socket 编程</h1><p><a href="https://www.cnblogs.com/skynet/archive/2010/12/12/1903949.html">https://www.cnblogs.com/skynet/archive/2010/12/12/1903949.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Http</tag>
      
      <tag>TCP</tag>
      
      <tag>Net</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一张思维导图看 Android【持续迭代】</title>
    <link href="/2022/04/03/android_summary/"/>
    <url>/2022/04/03/android_summary/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>总结自己的 Android 知识，按照编码 -&gt; 运行，画了一张图，xmind 导出的图比较大，后续持续更新，迭代这部分的内容。</p><p><img src="/img/android/Android_summary.png" alt="Android"></p><div class="note note-info">            <p>下面是一些常见的知识,将会慢慢补充进思维导图内</p>          </div><p style="text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;">下面是一些常见的知识,将会慢慢补充进思维导图内</p><h1 id="Handler-与-Binder"><a href="#Handler-与-Binder" class="headerlink" title="Handler 与 Binder"></a>Handler 与 Binder</h1><p>handler 处理的是 App 进程内的通信；<br>binder 处理的是，App 进程间、application 和 framework 之间的通信；</p><h1 id="任务启动管理-启动框架"><a href="#任务启动管理-启动框架" class="headerlink" title="任务启动管理 -  启动框架"></a>任务启动管理 -  启动框架</h1><ul><li>抽象任务 task；<ul><li>优先级 ；</li><li>countdownlatch 数值为依赖 task 的数量；</li><li>运行的 executor ；</li><li>被依赖的 task 列表；</li><li>toWait 方法；</li><li>notify 方法，countdownlatch 减一；</li></ul></li><li>构造 task 的有向无环图；</li><li>TaskManager：<ul><li>管理所有的 task，及其拓扑关系；</li><li>管理需要执行的 task；</li><li>countdownlatch 值为 </li></ul></li></ul><h1 id="Activity-跳转的生命周期"><a href="#Activity-跳转的生命周期" class="headerlink" title="Activity 跳转的生命周期"></a>Activity 跳转的生命周期</h1><ul><li><p>ActivityA跳转到ActivityB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Activity A：onPause<br>Activity B：onCreate<br>Activity B：onStart<br>Activity B：onResume<br>Activity A：onStop<br></code></pre></td></tr></table></figure></li><li><p>ActivityB返回ActivityA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Activity B：onPause<br>Activity A：onRestart<br>Activity A：onStart<br>Activity A：onResume<br>Activity B：onStop<br>Activity B：onDestroy<br></code></pre></td></tr></table></figure></li></ul><h2 id="旋转屏幕"><a href="#旋转屏幕" class="headerlink" title="旋转屏幕"></a>旋转屏幕</h2><ul><li>不改配置，默认配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">onPause--&gt;<br>onStop--&gt;<br>onDestroy--&gt;<br>onCreate--&gt;<br>onStart--&gt;<br>onRestoreInstanceState--&gt;<br>onResume--&gt;<br><br></code></pre></td></tr></table></figure></li></ul><ul><li>修改配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">onConfigChanged--&gt;<br></code></pre></td></tr></table></figure></li></ul><h1 id="Activity-的启动模式"><a href="#Activity-的启动模式" class="headerlink" title="Activity 的启动模式"></a>Activity 的启动模式</h1><p><a href="https://www.jianshu.com/p/b3a95747ee91">参考链接1</a></p><p><strong>仅仅适用于Activity启动Activity，并且采用的都是默认Intent，没有额外添加任何Flag</strong></p><ul><li>  standard：标准启动模式（默认启动模式），每次都会启动一个新的activity实例。</li><li>  singleTop：单独使用使用这种模式时，如果<strong>Activity实例位于当前任务栈顶</strong>，就重用栈顶实例，而不新建，并回调该实例onNewIntent()方法，否则走新建流程。</li><li>  singleTask：这种模式启动的Activity<strong>只会存在相应的Activity的taskAffinit任务栈中</strong>，同一时刻系统中只会存在一个实例，已存在的实例被再次启动时，会重新唤起该实例，并清理当前Task任务栈该实例之上的所有Activity，同时回调onNewIntent()方法。</li><li>  singleInstance：这种模式启动的Activity独自占用一个Task任务栈，同一时刻系统中只会存在一个实例，已存在的实例被再次启动时，只会唤起原实例，并回调onNewIntent()方法。</li></ul><h2 id="Intent-FLAG-ACTIVITY-NEW-TASK分析"><a href="#Intent-FLAG-ACTIVITY-NEW-TASK分析" class="headerlink" title="Intent.FLAG_ACTIVITY_NEW_TASK分析"></a>Intent.FLAG_ACTIVITY_NEW_TASK分析</h2><p>当我们用ApplicationContext去启动standard模式的Activity会报错，这是因为standard模式的Activity默认会进入启动它的Activity所属的任务栈中，但是由于非Activity类型的Context(如ApplicationContext)并没有所谓的任务栈，这就是问题所在。解决这个问题的方法是为待启动Activity指定FLAG_ACTIVITY_NEW_TASK标记位，这样启动的时候就会为它创建一个新的任务栈，如果设置待启动的Activity的taskAffinity时，这个时候待启动Activity实际上是以singleTask模式启动的。</p><h2 id="FLAG-ACTIVITY-SINGLE-TOP"><a href="#FLAG-ACTIVITY-SINGLE-TOP" class="headerlink" title="FLAG_ACTIVITY_SINGLE_TOP"></a>FLAG_ACTIVITY_SINGLE_TOP</h2><p>为Activity指定singleTop启动模式，效果和在xml中指定该模式相同。</p><h2 id="FLAG-ACTIVITY-CLEAR-TOP"><a href="#FLAG-ACTIVITY-CLEAR-TOP" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TOP"></a>FLAG_ACTIVITY_CLEAR_TOP</h2><p>具有此标记的Activity，当它启动时，在同一个任务栈中所有位于它上面的Activity都要出栈。</p><h2 id="FLAG-ACTIVITY-CLEAR-TASK"><a href="#FLAG-ACTIVITY-CLEAR-TASK" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TASK"></a>FLAG_ACTIVITY_CLEAR_TASK</h2><p>FLAG_ACTIVITY_CLEAR_TASK只能和FLAG_ACTIVITY_NEW_TASK配合使用哦</p><h2 id="FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS"><a href="#FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS" class="headerlink" title="FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS"></a>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</h2><p>具有这个标记的Activity不会出现在历史Activity的列表中，在某些情况下我们不希望用户通过历史列表回到我们的Activity的时候这个标记比较有用。它等同于在xml中指定Activity的属性<code>android``:excludeFromRecents=&quot;true&quot;</code></p><h1 id="Activity-的启动流程"><a href="#Activity-的启动流程" class="headerlink" title="Activity 的启动流程"></a>Activity 的启动流程</h1><ul><li><a href="https://linguanghua.github.io/Programming-Tech-Books/advanced/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.html">参考链接1</a></li></ul><p><img src="https://raw.githubusercontent.com/sucese/android-open-source-project-analysis/master/art/app/component/activity_start_flow.png" alt="启动流程图"></p><p>点击应用图标后会去启动应用的Launcher Activity，如果Launcer Activity所在的进程没有创建，还会创建新进程，整体的流程就是一个Activity的启动流程。</p><ul><li>  Instrumentation: 监控应用与系统相关的交互行为。</li><li>  AMS：组件管理调度中心，什么都不干，但是什么都管。</li><li>ActivityStarter：Activity启动的控制器，处理Intent与Flag对Activity启动的影响，具体说来有：<ul><li>1 寻找符合启动条件的Activity，如果有多个，让用户选择；</li><li>2 校验启动参数的合法性；</li><li>3 返回int参数，代表Activity是否启动成功。</li></ul></li><li>  ActivityStackSupervisior：这个类的作用你从它的名字就可以看出来，它用来管理任务栈。</li><li>  ActivityStack：用来管理任务栈里的Activity。</li><li>  ActivityThread：最终干活的人，Activity、Service、BroadcastReceiver的启动、切换、调度等各种操作都在这个类里完成。</li></ul><p>注：这里单独提一下ActivityStackSupervisior，这是高版本才有的类，它用来管理多个ActivityStack，早期的版本只有一个ActivityStack对应着手机屏幕，后来高版本支持多屏以后，就有了多个ActivityStack，于是就引入了ActivityStackSupervisior用来管理多个ActivityStack。</p><p>有了以上的理解，整个流程可以概括如下：</p><ul><li>1、点击桌面应用图标，Launcher 进程将启动 Activity（MainActivity）的请求以 Binder 的方式发送给了 AMS。</li><li>2、AMS 接收到启动请求后，交付 ActivityStarter 处理 Intent 和 Flag 等信息，然后再交给 ActivityStackSupervisior/ActivityStack 处理 Activity 进栈相关流程。同时以 Socket 方式请求 Zygote 进程 fork 新进程。</li><li>3、Zygote 接收到新进程创建请求后 fork 出新进程。</li><li>4、在新进程里创建 ActivityThread 对象，新创建的进程就是应用的主线程，在主线程里开启 Looper 消息循环，开始处理创建 Activity。</li><li>5、ActivityThread 利用 ClassLoader 去加载 Activity、创建 Activity 实例，并回调 Activity 的 onCreate() 方法，这样便完成了Activity 的启动。</li></ul><p><img src="https://camo.githubusercontent.com/11c57b4fbb9ff82426792bac32fe8de173949dccc19a4f0c0278ef62bf67203f/687474703a2f2f696d672e6d702e6974632e636e2f75706c6f61642f32303137303332392f63613935363763653362663034633461626462346431323463656266656537365f74682e6a706567" alt="详细的交互图"></p><ul><li>从开发层面来看，启动另一个 activity 通常会使用 context.startActivity()，最终去到Instrumentation 的 execStartActivitiesAsUser 方法中。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> result = ActivityManagerNative.getDefault()<br>    .startActivities(whoThread, who.getBasePackageName(), intents, resolvedTypes,token, options, userId);<br></code></pre></td></tr></table></figure></li><li>ActivityManagerNative 获取 AMS 进程代理，进而告知 AMS 将要启动另一个 activity。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> IActivityManager <span class="hljs-title">getDefault</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> gDefault.get();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class="hljs-keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> IActivityManager <span class="hljs-title">create</span><span class="hljs-params">()</span> </span>&#123;<br>        IBinder b = ServiceManager.getService(<span class="hljs-string">&quot;activity&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">false</span>) &#123;<br>            Log.v(<span class="hljs-string">&quot;ActivityManager&quot;</span>, <span class="hljs-string">&quot;default service binder = &quot;</span> + b);<br>        &#125;<br>        IActivityManager am = asInterface(b);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">false</span>) &#123;<br>            Log.v(<span class="hljs-string">&quot;ActivityManager&quot;</span>, <span class="hljs-string">&quot;default service = &quot;</span> + am);<br>        &#125;<br>        <span class="hljs-keyword">return</span> am;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>启动如此，Activity 的生命周期又是如何被 AMS 进程管理的呢？在 ActivityThread 的 attach 方法中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();<br><span class="hljs-keyword">try</span> &#123;<br>    mgr.attachApplication(mAppThread);<br>&#125; <span class="hljs-keyword">catch</span> (RemoteException ex) &#123;<br>    <span class="hljs-keyword">throw</span> ex.rethrowFromSystemServer();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>ActivityManagerNative 把 ApplicationThread 的代理写给了AMS进程<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attachApplication</span><span class="hljs-params">(IApplicationThread app)</span> <span class="hljs-keyword">throws</span> RemoteException</span><br><span class="hljs-function"></span>&#123;<br>    Parcel data = Parcel.obtain();<br>    Parcel reply = Parcel.obtain();<br>    data.writeInterfaceToken(IActivityManager.descriptor);<br>    data.writeStrongBinder(app.asBinder());<br>    mRemote.transact(ATTACH_APPLICATION_TRANSACTION, data, reply, <span class="hljs-number">0</span>);<br>    reply.readException();<br>    data.recycle();<br>    reply.recycle();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>进而会有一系列scheduleXXXActivity回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">schedulePauseActivity</span><span class="hljs-params">(IBinder token, <span class="hljs-keyword">boolean</span> finished,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">boolean</span> userLeaving, <span class="hljs-keyword">int</span> configChanges, <span class="hljs-keyword">boolean</span> dontReport)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> seq = getLifecycleSeq();<br>    <span class="hljs-keyword">if</span> (DEBUG_ORDER) Slog.d(TAG, <span class="hljs-string">&quot;pauseActivity &quot;</span> + ActivityThread.<span class="hljs-keyword">this</span><br>            + <span class="hljs-string">&quot; operation received seq: &quot;</span> + seq);<br>    sendMessage(<br>            finished ? H.PAUSE_ACTIVITY_FINISHING : H.PAUSE_ACTIVITY,<br>            token,<br>            (userLeaving ? USER_LEAVING : <span class="hljs-number">0</span>) | (dontReport ? DONT_REPORT : <span class="hljs-number">0</span>),<br>            configChanges,<br>            seq);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="第一部分-上半场"><a href="#第一部分-上半场" class="headerlink" title="第一部分 -  上半场"></a>第一部分 -  上半场</h3><blockquote><p>当启动Activity的过程中且在AMS处理之前的操作，称之为”上半场”。</p></blockquote><p>Activity -&gt; Instrumentation</p><h3 id="第二部分-下半场"><a href="#第二部分-下半场" class="headerlink" title="第二部分 - 下半场"></a>第二部分 - 下半场</h3><blockquote><p>AMS处理完成，并开始回调App 进程的过程到Activity启动大的操作，称之为”下半场”。</p></blockquote><p>ActivityStarter -&gt; ActivityStackSupervisor -&gt; ActivityThread -&gt; ActivityThread.java#H -&gt; handleLaunchActivity -&gt; performLaunchActivity </p><h1 id="Context-的区别"><a href="#Context-的区别" class="headerlink" title="Context 的区别"></a>Context 的区别</h1><p>Context 的关联类采用了装饰模式，主要有以下的优点：</p><ul><li>  使用者（比如 Service ）能够方便的使用 Context。</li><li>  如果 ContextImpl 发生变化，它的装饰类 ContextWrapper 不需要做任何修改。</li><li>  ContextImpl 的实现不会暴露给使用者，使用者也不必关心 ContextImpl 的实现。</li><li>  通过组合而非继承的方式，拓展 ContextImpl 的功能，在运行时选择不同的装饰类，实现不同的功能。</li></ul><p><img src="https://static001.geekbang.org/infoq/fc/fce9147eea433965e4becfb9bc2e067c.webp?x-oss-process=image/resize,p_80/format,png" alt="Context Summary"></p><p>Context的数量等于Activity的个数 + Service的个数 +1，这个1为Application。</p><p>这还涉及 application  启动 activity 的时候，需要加 Intent.FLAG_ACTIVITY_NEW_TASK flag；</p><p>application 的 context 是在启动进程的时候创建的。</p><h1 id="Android-的内存管理-回收策略"><a href="#Android-的内存管理-回收策略" class="headerlink" title="Android 的内存管理/回收策略"></a>Android 的内存管理/回收策略</h1><blockquote><p>对Android系统有较好理解，知道AMS与Kennel层LMK相结合的方式(Adj)去管理和查杀或回收进程；<br>以及LMK的内存统计策略，当系统内存不足时，AMS会遍历App进程并通知进程进行内存释放(onTrimMemoryLevel)，以及触发各个进程进行GC等。<br>需要有一些纵向层次的理解，涉及LMK，AMS，APP多层的协同机制，其中每个层面又都有一套自己的策略。</p></blockquote><h2 id="AMS"><a href="#AMS" class="headerlink" title="AMS"></a>AMS</h2><p>AMS 在进程管理这块儿做两件事</p><ul><li><strong>进程LRU列表动态更新</strong>：动态调整进程在mLruProcesses列表的位置</li><li>进程优先级动态调整：实际是调整进程oom_adj的值。</li></ul><h2 id="LMK机制"><a href="#LMK机制" class="headerlink" title="LMK机制"></a>LMK机制</h2><p><strong>在Android中，即使当用户退出应用程序后，应用进程也还会存在内存中，方便下次可以快速进入应用而不需要重新创建进程</strong>。 这样带来的直接影响就是<strong>由于进程数量越来越多，系统内存会越来越少，这个时候就需要杀死一部分进程来缓解内存压力。</strong> <strong>至于哪些进程会被杀死，这个时候就需要用到Low Memory Killer机制来进行判定。</strong></p><p><strong>Android的Low Memory Killer基于Linux的OOM机制</strong>， 在Linux中，内存是以页面为单位分配的，当申请页面分配时如果内存不足会通过以下流程选择 bad 进程来杀掉从而释放内存</p><p><strong>LMK驱动层在用户空间指定了一组内存临界值及与之一一对应的一组 oom_adj 值，</strong> <strong>当系统剩余内存位于内存临界值中的一个范围内时，如果一个进程的 oom_adj 值大于或等于这个临界值对应的oom_adj值就会被杀掉。</strong></p><h1 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h1><ul><li><a href="http://gityuan.com/2015/11/28/binder-summary/">可参考链接</a></li></ul><ol><li> 从IPC角度来说：Binder是Android中的一种跨进程通信方式，该通信方式在linux中没有，是Android独有；</li><li> 从 Android Driver 层：Binder 还可以理解为一种虚拟的物理设备，它的设备驱动是 /dev/binder；</li><li> 从 Android Native 层：Binder 是创建 ServiceManager 以及 BpBinder/BBinder 模型，搭建与binder 驱动的桥梁；</li><li> 从 Android Framework 层：Binder 是各种 Manager（ActivityManager、WindowManager等）和相应 xxxManagerService 的桥梁；</li><li> 从 Android APP 层：Binder 是客户端和服务端进行通信的媒介，当 bindService 的时候，服务端会返回一个包含了服务端业务调用的 Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或者数据，这里的服务包括普通服务和基于AIDL的服务。</li></ol><p>Binder 是基于 C/S 架构设计的。由 Client、Server、ServiceManager 和 Binder 驱动组成。Client、Server负责自各的业务、ServiceManager 运行在<strong>用户空间</strong>负责代理业务，Binder 驱动运行在内核空间真正对接业务细节。其中 ServiceManager 和 Binder 驱动由系统提供，而 Client、Server 由应用程序来实现。</p><p><img src="http://gityuan.com/images/binder/java_binder/java_binder.jpg" alt="binder 的framework架构图"></p><h2 id="一次通信的过程"><a href="#一次通信的过程" class="headerlink" title="一次通信的过程"></a>一次通信的过程</h2><ol><li> Server 进程向 Binder 驱动发送 Binder 实体请求注册服务， Binder 驱动将请求转发到 ServiceManager 注册后把名字和 Binder 实体等信息填入查找表中。</li><li> Client 进程在 Binder 驱动的帮助下通过名字从 ServiceManager 中获取到 Server Binder 实体的引用，至此，Client 与 Server 总算是勾搭上了。</li><li> 与此同时，Binder 驱动开始创建数据缓冲区并通过 ServiceManager 提供的 Server 进程信息地址使用 mmap 函数将 Server 进程用户空间地址映射到创建好的缓冲区上，为跨进程通信做好了准备。</li><li> Client 进程调用 copy_from_user 函数将数据拷贝到数据缓冲区后 Binder 驱动再通知 Server 进程进行解包。</li><li> Server 进程收到通知后进行解包和方法调用，并将结果写到自己的有映射的内存中。</li><li> 由于内核缓冲区与 Server进程用户空间地址存在映射关系的，这就相当于目标方法的结果直接传递到了内核数据缓冲区，Binder 驱动通知 Client 进程调用 copy_to_user 函数将缓冲区的目标结果拷贝到自己的用户空间中。</li></ol><h2 id="为什么要使用-Binder？"><a href="#为什么要使用-Binder？" class="headerlink" title="为什么要使用 Binder？"></a>为什么要使用 Binder？</h2><p>性能：移动设备中如果广泛的使用跨进程通信机制肯定会对通信机制提出严格的要求，而 Binder 相比较传统的进程通信方式更加的高效。<br>安全：由于传统进程通信方式没有对通信的双方和身方做出严格的验证，只有上层协议才会去架构，如 socket 连接的 IP 地址可以人为的伪造。而 Binder 身份校验也是 android 权限模式的基础。</p><h2 id="Binder-的线程管理"><a href="#Binder-的线程管理" class="headerlink" title="Binder 的线程管理"></a>Binder 的线程管理</h2><p>每个 Binder 的 Server 进程会创建很多线程来处理 Binder 请求，可以简单的理解为创建了一个 Binder 的线程池吧（虽然实际上并不完全是这样简单的线程管理方式），而真正管理这些线程并不是由这个 Server 端来管理的，而是由 Binder 驱动进行管理的。</p><h2 id="Binder-有什么优势？"><a href="#Binder-有什么优势？" class="headerlink" title="Binder 有什么优势？"></a>Binder 有什么优势？</h2><p>性能方面</p><ul><li>共享内存 0 次数据拷贝</li><li>Binder 1 次数据拷贝</li><li>Socket/管道/消息队列 2 次数据拷贝</li></ul><p>稳定性方面</p><ul><li>Binder：基于 C/S 架构，客户端（Client）有什么需求就丢给服务端（Server）去完成，架构清晰、职责明确又相互独立，自然稳定性更好</li><li>共享内存：虽然无需拷贝，但是控制复杂，难以使用</li><li>从稳定性的角度讲，Binder 机制是优于内存共享的。</li></ul><p>安全性方面</p><ul><li>传统的 IPC 没有任何安全措施，安全依赖上层协议来确保。</li><li>传统的 IPC 方法无法获得对方可靠的进程用户 ID/进程 UI（UID/PID），从而无法鉴别对方身份。 binder 的 uid 是由 driver 保证；</li><li>传统的 IPC 只能由用户在数据包中填入 UID/PID，容易被恶意程序利用。</li><li>传统的 IPC 访问接入点是开放的，无法阻止恶意程序通过猜测接收方地址获得连接。</li><li>Binder 既支持实名 Binder，又支持匿名 Binder，安全性高。</li></ul><h2 id="Binder-是如何做到一次拷贝的？"><a href="#Binder-是如何做到一次拷贝的？" class="headerlink" title="Binder 是如何做到一次拷贝的？"></a>Binder 是如何做到一次拷贝的？</h2><p>主要是因为 Linux 是使用的虚拟内存寻址方式，它有如下特性：</p><ul><li>  用户空间的虚拟内存地址是映射到物理内存中的；</li><li>  对虚拟内存的读写实际上是对物理内存的读写，这个过程就是内存映射；</li><li>  这个内存映射过程是通过系统调用 mmap() 来实现的；</li></ul><p><strong>Binder 借助了内存映射的方法，在内核空间和接收方用户空间的数据缓存区之间做了一层内存映射，就相当于直接拷贝到了接收方用户空间的数据缓存区，从而减少了一次数据拷贝</strong></p><h2 id="Binder-机制是如何跨进程的？"><a href="#Binder-机制是如何跨进程的？" class="headerlink" title="Binder 机制是如何跨进程的？"></a>Binder 机制是如何跨进程的？</h2><ul><li>Binder 驱动<ul><li>在内核空间创建一块接收缓存区；</li><li>实现地址映射：将内核缓存区、接收进程用户空间映射到同一接收缓存区</li></ul></li><li>发送进程通过系统调用（copy_from_user）将数据发送到内核缓存区。<br>由于内核缓存区和接收进程用户空间存在映射关系，故相当于也发送了接收进程的用户空间，实现了跨进程通信。</li></ul><h2 id="为什么-Intent-不能传递大数据？"><a href="#为什么-Intent-不能传递大数据？" class="headerlink" title="为什么 Intent 不能传递大数据？"></a>为什么 Intent 不能传递大数据？</h2><p>Intent 携带信息的大小其实是受 Binder 限制。数据以 Parcel 对象的形式存放在 Binder 传递缓存中。如果数据或返回值比传递 buffer 大，则此次传递调用失败并抛出 TransactionTooLargeException 异常。</p><p>Binder 传递缓存有一个限定大小，通常是 1Mb。但同一个进程中所有的传输共享缓存空间。多个地方在进行传输时，即时它们各自传输的数据不超出大小限制，TransactionTooLargeException 异常也可能会被抛出。在使用 Intent 传递数据时，1Mb 并不是安全上限。因为 Binder 中可能正在处理其它的传输工作。不同的机型和系统版本，这个上限值也可能会不同。</p><h2 id="Binder-IPC-实现原理"><a href="#Binder-IPC-实现原理" class="headerlink" title="Binder IPC 实现原理"></a>Binder IPC 实现原理</h2><p>Binder IPC 正是基于内存映射（mmap）来实现的，但是 mmap() 通常是用在有物理介质的文件系统上的。</p><p>比如进程中的用户区域是不能直接和物理设备打交道的，如果想要把磁盘上的数据读取到进程的用户区域，需要两次拷贝（磁盘–&gt;内核空间–&gt;用户空间）；通常在这种场景下 mmap() 就能发挥作用，通过在物理介质和用户空间之间建立映射，减少数据的拷贝次数，用内存读写取代 I/O 读写，提高文件读取效率。</p><p>而 Binder 并不存在物理介质，因此 Binder 驱动使用 mmap() 并不是为了在物理介质和用户空间之间建立映射，而是用来在内核空间创建数据接收的缓存空间。</p><h3 id="一次完整的-Binder-IPC-通信过程通常是这样："><a href="#一次完整的-Binder-IPC-通信过程通常是这样：" class="headerlink" title="一次完整的 Binder IPC 通信过程通常是这样："></a>一次完整的 Binder IPC 通信过程通常是这样：</h3><ul><li>首先 Binder 驱动在内核空间创建一个数据接收缓存区；</li><li>接着在内核空间开辟一块内核缓存区，建立内核缓存区和内核中数据接收缓存区之间的映射关系，以及内核中数据接收缓存区和接收进程用户空间地址的映射关系；</li><li>发送方进程通过系统调用 copyfromuser() 将数据 copy 到内核中的内核缓存区，由于内核缓存区和接收进程的用户空间存在内存映射，因此也就相当于把数据发送到了接收进程的用户空间，这样便完成了一次进程间的通信。</li></ul><h1 id="Oneway-关键词"><a href="#Oneway-关键词" class="headerlink" title="Oneway 关键词"></a>Oneway 关键词</h1><p>非阻塞式调用。<br>Oneway 表示客户端不关服务端的返回值，甚至也不关系执行是否正常或者异常。只管通知一下。 代码层面也可以看出来，我们仔细看 initASVE 和 initASVEOneway 这两个方法在aidl内的实现。</p><p>oneway 关键词是用在 AIDL 中的，目的是实现异步调用， IPC 调用的时候，不用等待 server 的 reply 就返回。</p><p>Client端，判断如果是 ONEWAY，在会在transaction发送到binder驱动后（收到BR_TRANSACTION_COMPLETE），马上退出等待。</p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>oneway 默认处理异常不返回。发现为oneway直接吃掉了异常，仅仅打印一行日志。 也没有任何机制可以给上层通知。</p><h1 id="Handler机制"><a href="#Handler机制" class="headerlink" title="Handler机制"></a>Handler机制</h1><p><img src="https://github.com/guoxiaoxing/android-open-source-project-analysis/raw/master/art/native/process/android_handler_structure.png" alt="handler的示意图"></p><p>主要涉及的角色如下所示：</p><ul><li> Message：消息。</li><li>MessageQueue：消息队列，负责消息的存储与管理，负责管理由 Handler 发送过来的 Message。读取会自动删除消息，单链表维护，插入和删除上有优势。在其next()方法中会无限循环，不断判断是否有消息，有就返回这条消息并移除。</li><li>Looper：消息循环器，负责关联线程以及消息的分发，在该线程下从 MessageQueue获取 Message，分发给Handler，Looper创建的时候会创建一个 MessageQueue，调用loop()方法的时候消息循环开始，其中会不断调用messageQueue的next()方法，当有消息就处理，否则阻塞在messageQueue的next()方法中。当Looper的quit()被调用的时候会调用messageQueue的quit()，此时next()会返回null，然后loop()方法也就跟着退出。</li><li>Handler：消息处理器，负责发送并处理消息，面向开发者，提供 API，并隐藏背后实现的细节。</li></ul><p>整个消息的循环流程还是比较清晰的，具体说来：</p><ul><li>1、Handler通过sendMessage()发送消息Message到消息队列MessageQueue。</li><li>2、Looper通过loop()不断提取触发条件的Message，并将Message交给对应的target handler来处理。</li><li>3、target handler调用自身的handleMessage()方法来处理Message。</li></ul><p>事实上，在整个消息循环的流程中，并不只有Java层参与，很多重要的工作都是在C++层来完成的。我们来看下这些类的调用关系。</p><p><img src="https://github.com/guoxiaoxing/android-open-source-project-analysis/raw/master/art/native/process/android_handler_class.png"></p><p>注：虚线表示关联关系，实线表示调用关系。</p><p>在这些类中MessageQueue是Java层与C++层维系的桥梁，MessageQueue与Looper相关功能都通过MessageQueue的Native方法来完成，而其他虚线连接的类只有关联关系，并没有直接调用的关系，它们发生关联的桥梁是MessageQueue。</p><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><ul><li>Handler 发送的消息由 MessageQueue 存储管理，并由 Looper 负责回调消息到 handleMessage()。</li><li>线程的转换由 Looper 完成，handleMessage() 所在线程由 Looper.loop() 调用者所在线程决定。</li></ul><h2 id="Handler-引起的内存泄露原因以及最佳解决方案"><a href="#Handler-引起的内存泄露原因以及最佳解决方案" class="headerlink" title="Handler 引起的内存泄露原因以及最佳解决方案"></a>Handler 引起的内存泄露原因以及最佳解决方案</h2><p>Handler 允许我们发送延时消息，如果在延时期间用户关闭了 Activity，那么该 Activity 会泄露。 这个泄露是因为 Message 会持有 Handler，而又因为 Java 的特性，内部类会持有外部类，使得 Activity 会被 Handler 持有，这样最终就导致 Activity 泄露。</p><p>解决：将 Handler 定义成静态的内部类，在内部持有 Activity 的弱引用，并在Acitivity的onDestroy()中调用handler.removeCallbacksAndMessages(null)及时移除所有消息。</p><h2 id="为什么我们能在主线程直接使用-Handler，而不需要创建-Looper-？"><a href="#为什么我们能在主线程直接使用-Handler，而不需要创建-Looper-？" class="headerlink" title="为什么我们能在主线程直接使用 Handler，而不需要创建 Looper ？"></a>为什么我们能在主线程直接使用 Handler，而不需要创建 Looper ？</h2><p>通常我们认为 ActivityThread 就是主线程。事实上它并不是一个线程，而是主线程操作的管理者。在 ActivityThread.main() 方法中调用了 Looper.prepareMainLooper() 方法创建了 主线程的 Looper ,并且调用了 loop() 方法，所以我们就可以直接使用 Handler 了。</p><h2 id="Handler-里藏着的-Callback-能干什么？"><a href="#Handler-里藏着的-Callback-能干什么？" class="headerlink" title="Handler 里藏着的 Callback 能干什么？"></a>Handler 里藏着的 Callback 能干什么？</h2><p>Handler.Callback 有优先处理消息的权利 ，当一条消息被 Callback 处理并拦截（返回 true），那么 Handler 的 handleMessage(msg) 方法就不会被调用了；如果 Callback 处理了消息，但是并没有拦截，那么就意味着一个消息可以同时被 Callback 以及 Handler 处理。</p><h2 id="创建-Message-实例的最佳方式"><a href="#创建-Message-实例的最佳方式" class="headerlink" title="创建 Message 实例的最佳方式"></a>创建 Message 实例的最佳方式</h2><p>为了节省开销，Android 给 Message 设计了回收机制，所以我们在使用的时候尽量复用 Message ，减少内存消耗：</p><pre><code class="hljs">通过 Message 的静态方法 Message.obtain()；通过 Handler 的公有方法 handler.obtainMessage()。</code></pre><h2 id="主线程的死循环一直运行是不是特别消耗CPU资源呢？"><a href="#主线程的死循环一直运行是不是特别消耗CPU资源呢？" class="headerlink" title="主线程的死循环一直运行是不是特别消耗CPU资源呢？"></a>主线程的死循环一直运行是不是特别消耗CPU资源呢？</h2><p>并不是，这里就涉及到Linux pipe/epoll机制，简单说就是在主线程的MessageQueue没有消息时，便阻塞在loop的queue.next()中的nativePollOnce()方法里，此时主线程会释放CPU资源进入休眠状态，直到下个消息到达或者有事务发生，通过往pipe管道写端写入数据来唤醒主线程工作。这里采用的epoll机制，是一种IO多路复用机制，可以同时监控多个描述符，当某个描述符就绪(读或写就绪)，则立刻通知相应程序进行读或写操作，本质是同步I/O，即读写是阻塞的。所以说，主线程大多数时候都是处于休眠状态，并不会消耗大量CPU资源。</p><h2 id="handler-postDelay这个延迟是怎么实现的？"><a href="#handler-postDelay这个延迟是怎么实现的？" class="headerlink" title="handler postDelay这个延迟是怎么实现的？"></a>handler postDelay这个延迟是怎么实现的？</h2><p>handler.postDela y并不是先等待一定的时间再放入到 MessageQueu e中，而是直接进入MessageQueue，以 MessageQueue 的时间顺序排列和唤醒的方式结合实现的。</p><p>next 方法中，有计算下次唤醒的时间间隔；</p><h2 id="如何保证在msg-postDelay情况下保证消息次序？"><a href="#如何保证在msg-postDelay情况下保证消息次序？" class="headerlink" title="如何保证在msg.postDelay情况下保证消息次序？"></a>如何保证在msg.postDelay情况下保证消息次序？</h2><p>入队的时候，会按照时间顺序进行排序。</p><h1 id="AMS-1"><a href="#AMS-1" class="headerlink" title="AMS"></a>AMS</h1><ul><li><a href="https://cloud.tencent.com/developer/article/1466430">参考链接1</a></li></ul><h2 id="关键的类"><a href="#关键的类" class="headerlink" title="关键的类"></a>关键的类</h2><ol><li>ActivityManagerServices，简称AMS，服务端对象，负责系统中所有Activity的生命周期。</li><li>ActivityThread，App 的真正入口。当开启 App 之后，调用 main() 开始运行，开启消息循环队列，这就是传说的 UI 线程或者叫主线程。与 ActivityManagerService 一起完成Activity的管理工作。</li><li>ApplicationThread，用来实现 ActivityManagerServie 与 ActivityThread 之间的交互。在ActivityManagerSevice 需要管理相关 Application 中的 Activity 的生命周期时，通过 ApplicationThread 的代理对象与 ActivityThread 通信。</li><li>ApplicationThreadProxy，是 ApplicationThread 在服务器端的代理，负责和客户端的 ApplicationThread 通信。AMS 就是通过该代理与 ActivityThread 进行通信的。</li><li>Instrumentation，每一个应用程序只有一个 Instrumetation 对象，每个 Activity 内都有一个对该对象的引用，Instrumentation 可以理解为应用进程的管家，ActivityThread 要创建或暂停某个 Activity 时，都需要通过 Instrumentation 来进行具体的操作。</li><li>ActivityStack，Activity 在 AMS 的栈管理，用来记录经启动的 Activity 的先后关系，状态信息等。通过 ActivtyStack 决定是否需要启动新的进程。</li><li>ActivityRecord，ActivityStack 的管理对象，每个 Acivity 在 AMS 对应一个 ActivityRecord，来记录 Activity 状态以及其他的管理信息。<strong>其实就是服务器端的 Activity 对象的映像</strong>。</li><li>TaskRecord，AMS 抽象出来的一个“任务”的概念，是记录 ActivityRecord 的栈，一个“Task”包含若干个ActivityRecord。AMS 用 TaskRecord 确保 Activity 启动和退出的顺序。如果你清楚 Activity 的4种launchMode，那么对这概念应该不陌生。</li></ol><h2 id="简述ActivityManagerService的作用，什么时候初始化？"><a href="#简述ActivityManagerService的作用，什么时候初始化？" class="headerlink" title="简述ActivityManagerService的作用，什么时候初始化？"></a>简述ActivityManagerService的作用，什么时候初始化？</h2><p>ActivityManagerService 主要负责系统中四大组件的启动、切换、调度及应用进程的管理和调度等工作，其职责与操作系统中的进程管理和调度模块类似。</p><p>ActivityManagerService进行初始化的时机很明确，就是在SystemServer进程开启的时候，就会初始化ActivityManagerService， 可以在SystemServer类中找到相关的启动代码。</p><h2 id="简述ActivityThread和ApplicationThread，以及关系和区别"><a href="#简述ActivityThread和ApplicationThread，以及关系和区别" class="headerlink" title="简述ActivityThread和ApplicationThread，以及关系和区别"></a>简述ActivityThread和ApplicationThread，以及关系和区别</h2><p><strong>ActivityThread</strong></p><p>ActivityThread在Android中代表Android的主线程，但是并不是一个Thread类。ActivityThread类是Android 进程的初始类，它的main函数是这个App进程的入口。当创建完新进程之后，main函数被加载，然后执行一个loop的循环使当前线程进入消息循环。</p><p><strong>ApplicationThread</strong></p><p>ApplicationThread是ActivityThread的内部类， 是一个Binder对象。在此处它是作为IApplicationThread对象的server端等待client端的请求然后进行处理，最大的client就是AMS。</p><p>首先，我们看一下Activity的启动逻辑过程：Applicationthread的ScheduleActivity通过一个叫H的Handler发送了一个启动Activity信息。handleLaunchActivity接收了这个消息，然后做处理，处理的逻辑是让PreformLaunchActivity处理，并最终执行Activity的启动。</p><h2 id="Instrumentation是什么，和ActivityThread是什么关系"><a href="#Instrumentation是什么，和ActivityThread是什么关系" class="headerlink" title="Instrumentation是什么，和ActivityThread是什么关系"></a>Instrumentation是什么，和ActivityThread是什么关系</h2><p>Instrumentation 是Android系统中一系列控制方法的集合(hook),这些方法可以在正常的生命周期之外控制Android控件的运行，也可以控制Andoroid如何加载应用程序。</p><p>事实上，AMS与ActivityThread之间诸如Activity的创建、暂停等的交互工作都是由Instrumentation操作的。并且每个Activity都持有一个Instrumentation对象的一个引用， 整个进程中是只有一个Instrumentation。当startActivityForResult()调用之后，实际上还是调用了mInstrumentation.execStartActivity()。</p><p>它们之间的关系如下： <strong>AMS是大BOSS资本，负责指挥和调度的，ActivityThread是企业老板，虽然说企业的事自己说了算，但是需要听从AMS的指挥，而Instrumentation则是CTO，负责项目的大事小事，但是一般不抛头露面，听老板ActivityThread的安排。</strong></p><h2 id="ActivityManagerService和zygote进程通信是如何实现的"><a href="#ActivityManagerService和zygote进程通信是如何实现的" class="headerlink" title="ActivityManagerService和zygote进程通信是如何实现的"></a>ActivityManagerService和zygote进程通信是如何实现的</h2><p>应用启动时，Launcher进程请求 AMS，AMS 发送创建应用进程请求，Zygote进程接受请求并fork应用进程。而AMS发送创建应用进程请求调用的是 ZygoteState.connect() 方法，ZygoteState 是 ZygoteProcess 的内部类。</p><p>Zygote 处理客户端请求：Zygote 服务端接收到参数之后调用 ZygoteConnection.processOneCommand() 处理参数，并 fork 进程。</p><p>最后通过 findStaticMain() 找到 ActivityThread 类的 main() 方法并执行，子进程就这样启动了。</p><p><strong>怎么用</strong><br>Context.getSystemService()方法获取AMS的实例，然后调用其提供的API。</p><h1 id="WMS"><a href="#WMS" class="headerlink" title="WMS"></a>WMS</h1><h2 id="WMS-的作用"><a href="#WMS-的作用" class="headerlink" title="WMS 的作用"></a>WMS 的作用</h2><p>Android中的window机制的出现就是为了统一管理屏幕上的显示View，让程序有条不紊的执行。</p><ul><li>WMS 管理的是窗口，负责窗口的添加、删除、顺序的调整；</li><li>WMS 不负责洁面的合成和绘制，合成和绘制是由 SurfaceFlinger 完成；</li><li>View 必须被添加到窗口中，才可以被绘制；</li><li>View 有自己的 onDraw 回调，在这个回调里进行视图的绘制操作；</li><li>View 每个视图都是一个图层，就是一个 surface，这块的内存是由 SurfaceFlinger 申请的；<ul><li>这块内存是通过内存共享的方式在 SurfaceFlinger 和 App 进程之间进行共享的；</li><li>具体的感知方式：SurfaceFlinger 申请了 surface 的内存后，通过 binder 的方式将内存相关信息传递给 App 进程，App 向内存中写入绘制内容，绘制完毕，通知 SurfaceFlinger 进行图层的混排，再将数据渲染到屏幕上；</li><li>为什么使用共享内存的方式，而不是 binder 呢？因为图像的数据太大了，binder 和 socket 效率都太低了；</li></ul></li></ul><h2 id="关键的类-1"><a href="#关键的类-1" class="headerlink" title="关键的类"></a>关键的类</h2><ol><li>PhoneWindow：Window我们应该很熟悉，它是一个抽象类，具体的实现类为PhoneWindow，它对View进行管理。</li><li>WindowManagerImpl  ：WindowManager是一个接口类，继承自接口ViewManager, 它是用来管理Window的，它的实现类为WindowManagerImpl。</li><li>ViewManager中定义了三个方法：ViewManager中定义了三个方法，分别用来添加、更新和删除View </li><li>DecorView：窗口内的真实视图；最高层的视图；</li><li>ViewRootImpl：View 的最高层级，实现 view 和 WindowManager 之间的一些协议；可以触发视图的绘制；可以理解成一个桥梁；内部持有 DecorView 实例的引用；</li><li>WindowSession：</li><li>windowstate：WindowState是系统进程层面管理的window对象，windowState通过InputChannel与IMS获取联系。</li><li>W，IWindow.Stub 的 binder 服务对象，主要的作用是接收 WMS 的 IPC 调用；</li><li>想要对Window进行添加和删除就可以使用WindowManager，具体的工作都是由WMS来处理的，WindowManager和WMS通过Binder来进行跨进程通信，WMS作为系统服务有很多API是不会暴露给WindowManager的，这一点与ActivityManager和AMS的关系有些类似。</li></ol><h2 id="创建图层的流程"><a href="#创建图层的流程" class="headerlink" title="创建图层的流程"></a>创建图层的流程</h2><ol><li> 首先APP端新建一个Surface图层的容器壳子，</li><li> APP通过Binder通信将这个Surface的壳子传递给WMS，</li><li> WMS为了填充Surface去向SurfaceFlinger申请真正的图层，</li><li> SurfaceFlinger收到WMS请求为APP端的Surface分配真正图层</li><li> 将图层相关的关键信息Handle及Producer传递给WMS</li><li> WMS利用Handle和Producer创建一个SurfaceControl对象，之后再利用其创建Surface</li><li> 至此，WMS端的Surface创建并填充完毕，然后返回给APP端，APP端就获得了直接和SurfaceFlinger通信的能力</li></ol><h2 id="View-的绘制原理"><a href="#View-的绘制原理" class="headerlink" title="View 的绘制原理"></a>View 的绘制原理</h2><ul><li><a href="https://www.youtube.com/watch?v=1iaHxmfZGGc">参考链接1</a></li><li><a href="https://www.bilibili.com/video/BV19V4y1V79X/?spm_id_from=333.337.search-card.all.click&vd_source=2383886846e4aa5e7cf6fd52f9d0a367">参考链接2</a></li></ul><h3 id="屏幕的刷新机制："><a href="#屏幕的刷新机制：" class="headerlink" title="屏幕的刷新机制："></a>屏幕的刷新机制：</h3><ol><li>在一个典型的显示系统中，一般包括 CPU、GPU、Display 三个部分， CPU负责计算帧数据，把计算好的数据交给GPU，GPU会对图形数据进行渲染，渲染好后放到buffer(图像缓冲区)里存起来，然后Display（屏幕或显示器）负责把buffer里的数据呈现到屏幕上。</li><li>画面撕裂：由于上述谈到的，缓冲生产出的视图数据和绘制数据的数据源，使用的是同一个 buffer，就可能出现在屏幕刷新的时候，数据不一致，进而导致不是一个完整的一帧画面的问题；</li><li>为了解决画面撕裂的问题<ol><li>双缓冲：一个绘制数据的缓冲；一个显示数据的缓冲；二者互不干扰；</li><li>VSync：发出该信号时，就是两个缓冲区交换内存地址的时机；</li></ol></li></ol><h3 id="两个概念"><a href="#两个概念" class="headerlink" title="两个概念"></a>两个概念</h3><ol><li>刷新频率，refresh rate：屏幕在一秒内，可以刷新的次数；比如 60Hz；</li><li>帧率，frame rate：GPU 每秒可以画的帧数；比如</li><li>帧率比刷新频率快的时候，就会出现画面撕裂；</li><li>屏幕的显示，是由上至下扫描展示的；当屏幕扫描完，到最后一行的时候，放松 vsync 信号，通知缓冲期交换地址指针；</li></ol><h3 id="API-16-后新增的优化机制"><a href="#API-16-后新增的优化机制" class="headerlink" title="API 16 后新增的优化机制"></a>API 16 后新增的优化机制</h3><p>VSync 的引入，还残留一个问题没解决：刷新依赖于 VSync 信号，没有 VSync 不能刷新，如果 VSync 来时，缓冲区的数据没有准备好，就会显示上一帧的内容，就会出现卡顿。</p><ul><li>解决方案：新增一个缓冲期，变成 三缓冲区。能保证帧是连续的。</li><li>本质原因，是帧的生成时间太长导致的。</li></ul><h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><ol><li>调用 requestLayout 会导致该 view 已经其递归上去的父 view都会重新走一遍measure、layout、draw三大流程。 </li><li>调用invalidate只会导致draw流程的重走。</li></ol><h2 id="SurfaceView-与-TextureView"><a href="#SurfaceView-与-TextureView" class="headerlink" title="SurfaceView 与 TextureView"></a>SurfaceView 与 TextureView</h2><h3 id="SurfaceView"><a href="#SurfaceView" class="headerlink" title="SurfaceView"></a>SurfaceView</h3><p>我们知道每个窗口在SurfaceFlinger服务中都对应有一个layer，用来描述它的绘制表面surface。<strong>对于那些具有SurfaceView的窗口来说，每个SurfaceFlinger服务中还对应一个独立的Layer或者LayerBuffer</strong>，用来单独描述它的绘制表面，以区别它的宿主窗口的绘制表面。<br>surfaceView在其宿主Activity窗口上挖了一个“洞”，这个“洞”实际上只不过是在其宿主Activity窗口上设置了一块透明区域</p><p>优缺点</p><ul><li>  <strong>优点：</strong>由于在系统中（WMS和SF）中，它与宿主窗口是分离的。因此：Surface的渲染可以放到单独线程去做，渲染时可以有自己的GL context。这对于一些游戏、视频等性能相关的应用非常有益，因为它不会影响主线程对事件的响应。</li><li>  <strong>缺点:</strong> 因为这个Surface不在View hierachy中，它的显示也不受View的属性控制，所以不能进行平移，缩放等变换，也不能放在其它ViewGroup中，一些View中的特性也无法使用</li></ul><h3 id="TextureView"><a href="#TextureView" class="headerlink" title="TextureView"></a>TextureView</h3><p>在4.0(API level 14)中引入，与SurfaceView一样继承View，它可以将内容流直接投影到View中，它可以将内容流直接投影到View中，可以用于实现Live preview等功能。</p><ol><li>它不会在WMS中单独创建窗口，而是作为View hierachy中的一个普通View，因此可以和其它普通View一样进行移动，旋转，缩放，动画等变化。</li><li>值得注意的是TextureView必须在硬件加速的窗口中。它显示的内容流数据可以来自App进程或是远端进程。</li></ol><h1 id="各种-token"><a href="#各种-token" class="headerlink" title="各种 token"></a>各种 token</h1><h2 id="ActivityRecord-中的-token-是啥时候创建的？作用是什么？"><a href="#ActivityRecord-中的-token-是啥时候创建的？作用是什么？" class="headerlink" title="ActivityRecord 中的 token 是啥时候创建的？作用是什么？"></a>ActivityRecord 中的 token 是啥时候创建的？作用是什么？</h2><ul><li><p><a href="https://www.cnblogs.com/mingfeng002/p/10951883.html">可参考的链接1</a> ，这个文章写得很好。</p></li><li><p>时机：在创建 ActivityRecord 对象的时候，就会创建 token。</p></li><li><p>作用：启动一个Activity的时候会为这个 Activity 生成一个 ActivityRecord 对象，该对象用于 AMS 管理跟踪，而 Token 就在这里诞生了。Token 类实现了 IApplicationToken.Stub，也就是作为 Binder 的服务端，那么它自然的接收客户端的请求，那它主要提供什么样的服务呢?</p></li></ul><p><em>android/view/IApplicationToken.aidl</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IApplicationToken</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">windowsDrawn</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">windowsVisible</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">windowsGone</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">keyDispatchingTimedOut</span><span class="hljs-params">(String reason)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">getKeyDispatchingTimeout</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，大部分是用于接收 WindowManagerService 通知 ActivityManagerService 的关于 Window 的消息，也有 key 的相关消息。</p><h2 id="WMS-中的-token-是什么时候创建的？作用是什么？"><a href="#WMS-中的-token-是什么时候创建的？作用是什么？" class="headerlink" title="WMS 中的 token 是什么时候创建的？作用是什么？"></a>WMS 中的 token 是什么时候创建的？作用是什么？</h2><ul><li><p>是什么：WMS专为Activity实现了一个 WindowToken 的子类：AppWindowToken</p></li><li><p>时机：具体位置为 ActivityStack.startActivityLocked()，也就是启动 Activity 的时候，通过 WMS 根据  ActivityRecord 中的 token，一起创建了 AppWindowToken。</p></li><li><p>作用：WindowManagerService 中 AppWindowToken 保存着 ActivityManagerService Binder 对象，用来向AMS 传递 Window 和按键的一些信息.</p></li></ul><p> wms 中有与  ams 中一一对应的 stack 和 task；</p><h2 id="App-中的-token"><a href="#App-中的-token" class="headerlink" title="App 中的 token"></a>App 中的 token</h2><p>ActivityClientRecord 是 activity 在 App 应用进程中的代表。其中保存了 AMS  这个 server 的 token 引用。</p><ul><li>时机：scheduleLaunchActivity 方法中，进行了 ActivityClientRecord 的构建。这里 scheduleLaunchActivity 方法是通过 binder 进行 IPC 方法调用的。   </li><li>作用：这个 ActivityClientRecord 类是 Activity 在 ActivityThread 中一一对应的，一个APP有多个Activity, 也就是说有多个ActivityClientRecord， 那么当 AMS 要启动一个 Activity 的时候，怎么样找到 APP 中正确的那个Activity呢？答案就是通过Token,先通过token找到ActivityClientRecord,然后再通过ActivityClientRecord中的activity就找到了正确的Activity了。Activity中Token主要用于在请求AMS服务时用于定位到具体到AMS中正确的 ActivityRecord。</li></ul><h2 id="WindowManager-LayoutParams里的token"><a href="#WindowManager-LayoutParams里的token" class="headerlink" title="WindowManager.LayoutParams里的token"></a>WindowManager.LayoutParams里的token</h2><ul><li>时机：setView 的时候，构建 WindowManager.LayoutParams 的 token 时，用 Window 中的 mAppToken 也就是AMS中ActivityRecord中的Token。</li><li>作用：WindowManager.LayoutParams中的 token传递给WMS,另外它的大部分作用是一致性判断。</li></ul><h1 id="badToken-问题案例"><a href="#badToken-问题案例" class="headerlink" title="badToken 问题案例"></a>badToken 问题案例</h1><p>那为什么窗口显示的时候会出现BadTokenException？</p><p>很明显是WindowManagerService 的<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java#mWindowMap">mWindowMap</a> 已经找不到对应的token，那为什么会出现这种情况呢？从表面上看那肯定是addview的时候，activity或者toast生成的token，已经被清除了。</p><p>我们来分析上述的问题，BadTokenException能够产生的情形蛮多的，就当前的调用栈看，是在handleResumeActivity的时候出现问题。</p><ol><li>情况一<br>ActivityManagerService 里面成员变量 mHandler 的 Looper，不会被Client-Side（即APP进程的操作所影响）。它在调用 destroyActivityLocked 的时候会先给Handler发一个延迟的DESTROY_TIMEOUT_MSG，如果client端顺利执行完了destroy，则会通知ActivityStack移除这个MSG，否则它就会被执行。<br>系统在调用 Activity 的 destroy 操作的时候，出现超时导致系统 mHandler 执行 DESTROY_TIMEOUT_MSG，测试log：<br>那什么情况下，在没有调用这些生命周期的情况就直接调用了destory。</li></ol><p>1）还未完成resume的情况下，主动调用clean task;<br>2）在manifest中注明了activity是noHistory=true，则会在切换activity的时候，当前activity stop 的时候会执行requestFinishActivityLocked：<br>3）Intent 启动参数，设置FLAG_ACTIVITY_CLEAR_TOP，跳转到之前到activity；</p><p>解决方案<br><strong>主线程里面不能有大量耗时操作，这个DESTROY_TIMEOUT为10s</strong><br><strong>1.避免在Application与Activity的onCreate及onActivityResult阶段做耗时操作。</strong><br><strong>2.尽量把noHistory去掉，stop不强制触发finish，不发送DESTROY_TIMEOUT，AMS不再删除WindowToken。</strong><br><strong>3.根据业务逻辑判断较早的基于FLAG_ACTIVITY_CLEAR_TOP启动Activity后当前Activity是否具有耗时操作，进一步优化。</strong></p><ol start="2"><li>情况二<br>延迟addView<br>目前最常见的堆栈，也是日常编码极其容易触发的BadTokenException就是多线程操作 Dialog，在执行窗口显示的时候Activity已经被销毁了，可以看下边的调用栈：</li></ol><p>能够很清晰的看到Dialog.show的时候找不到token，这类问题一般有两种情形导致：</p><p>1.多线程操作，未准确判断生命周期直接进行窗口展示，当Activity已经destroy后，线程回调继续使用该context进行页面展示。<br>2.通过hanlder发送Runnable，而该runnable中有ui操作的流程, 在onPause之后没有及时清理掉这些未处理的消息导致destory后又触发了ui操作。</p><p>解决方案</p><ol><li>线程回调中执行需要判断context，currentActivity.isFinishing()，能够部分拦截；</li><li>在show的时候catch (WindowManager.BadTokenException e)；</li></ol><h1 id="热修复"><a href="#热修复" class="headerlink" title="热修复"></a>热修复</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286384&amp;idx=1&amp;sn=f1aff31d6a567674759be476bcd12549&amp;scene=4#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286384&amp;idx=1&amp;sn=f1aff31d6a567674759be476bcd12549&amp;scene=4#wechat_redirect</a></p><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><h3 id="Android中ClassLoader的种类-amp-特点"><a href="#Android中ClassLoader的种类-amp-特点" class="headerlink" title="Android中ClassLoader的种类&amp;特点"></a>Android中ClassLoader的种类&amp;特点</h3><ul><li>  BootClassLoader（Java的BootStrap ClassLoader）： 用于加载Android Framework层class文件。</li><li>  PathClassLoader（Java的App ClassLoader）： 用于加载已经安装到系统中的apk中的class文件。</li><li>  DexClassLoader（Java的Custom ClassLoader）： 用于加载指定目录中的class文件。</li><li>  BaseDexClassLoader： 是PathClassLoader和DexClassLoader的父类。</li></ul><h2 id="热修复的原理"><a href="#热修复的原理" class="headerlink" title="热修复的原理"></a>热修复的原理</h2><p>在app重启时，通过classloader抢先加载补丁的类，由于app在运行时需要修复的类已经被加载，运行时无法对类卸载，因此必须需要重启才能生效。</p><h3 id="Dalvik下的类校验问题"><a href="#Dalvik下的类校验问题" class="headerlink" title="Dalvik下的类校验问题"></a>Dalvik下的类校验问题</h3><p>当dex加载到内存时，如果不存在odex文件会做dexopt将其转换成odex，在dexopt的过程中会做dvmClassVerify，如果某个类及其直接引用的类都在同一个dex的情况下，该类会被打上CLASS_ISPREVERIFIED标志，在dvmResolveClass的时候会做校验，也就是以下的代码，当补丁类加载的时候，如果满足这三个条件，就会校验失败抛出异常</p><ul><li>  fromUnverifiedConstant=false，非const-class/instance-of指令引用补丁类</li><li>  IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED)，补丁类被打上CLASS_ISPREVERIFIED</li><li>  referrer-&gt;pDvmDex != resClassCheck-&gt;pDvmDex，补丁类和引用类不在同一个dex</li></ul><h2 id="方案分类"><a href="#方案分类" class="headerlink" title="方案分类"></a>方案分类</h2><h3 id="【native修复】Andfix"><a href="#【native修复】Andfix" class="headerlink" title="【native修复】Andfix"></a>【native修复】Andfix</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>通过env-&gt;FromReflectMethod可以得到Method对象的ArtMethod起始地址，然后将其强转为ArtMethod指针，从而对方法结构进行修改。</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>不能对原有类进行方法和字段的增减，都会导致索引发生变化，从而破坏原有类的结构，访问时就无法索引到正确的方法和字段</li><li>依赖Android底层源码，如果厂商修改了虚拟机方法，替换机制就可能出问题。</li></ul><h3 id="【native-修复】Sophix"><a href="#【native-修复】Sophix" class="headerlink" title="【native 修复】Sophix"></a>【native 修复】Sophix</h3><p><a href="https://developer.aliyun.com/article/103527">https://developer.aliyun.com/article/103527</a></p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>Sophix在Andfix基础上提出了一种新的思路，通过计算地址偏移对ArtMethod整体做替换，从而解决了底层结构兼容性问题。从方法创建的源码上看，类的方法数组是通过开辟连续的空间，然后逐个new出来。也就是说ArtMethod的内存地址排列是连续的，因此可以通过两个方法的地址的差计算出。ArtMethod的大小，然后通过memcpy直接拷贝即可完成方法的替换。</p><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><ul><li>依赖ArtMethod的内存排列结构；</li><li>不能对原有类进行方法和字段的增减；</li><li>非静态修复类不能被反射调用，由于反射的对象是运行时的，而修复方法的类新加载的，不一致导致校验失败；</li></ul><h3 id="【Instant-Run方案】Robust"><a href="#【Instant-Run方案】Robust" class="headerlink" title="【Instant Run方案】Robust"></a>【Instant Run方案】Robust</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>通过gradle的transform在编译期插桩，对每个类中插入一个变量changeQuickRedirect，并且在所有方法预置一段逻辑，如果changeQuickRedirect不为空，则重定向到补丁方法执行，否则执行原来的方法。</p><p>补丁下发后通过DexClassLoader加载patch.dex，反射拿到 PatchesInfoImpl 类，里面保存了混淆前后的名字，比如说上面的 <em>com.meituan.sample.State</em> 被混淆成 <em>com.meituan.sample.d</em></p><p>通过反射拿到com.meituan.sample.d，将changeQuickRedirect字段赋值用patch.dex中加载出来的StatePatch对象。</p><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><ul><li>  包体积问题，插桩会导致包体积变大</li><li>  dex中method id不能超过65536限制，主要原因是小函数插桩函数变大，容易导致无法内联，解决方式通过配置黑名单过滤小函数</li><li>  super调用问题，补丁类无法直接通过super调用父类方法</li></ul><p>解决方法：修改原始类的调用指令，改成invoke-super，由于invoke-super在调用时会校验当前类，补丁类需要继承原始类的父类，举个例子解释一下</p><h3 id="【类加载】QQ-空间"><a href="#【类加载】QQ-空间" class="headerlink" title="【类加载】QQ 空间"></a>【类加载】QQ 空间</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>QZone的思路是绕过第二个条件，预先在apk里面增加一个辅助类并单独打成一个dex，通过插桩的方式给所有类增加对辅助类的引用，从而让所有类不被打上CLASS_ISPREVERIFIED标志</p><h4 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h4><ul><li>  Dalvik下绕过dexopt导致在类加载的时候才做校验，影响加载性能</li><li>  art下dex2oat时同dex的类存在内联优化可能，如果补丁原来的类被内联了，且补丁类新增方法，内联类调用补丁类时方法、字段索引都是原来的，从而导致内存地址错乱，解决办法是将补丁类的父类和调用类都打到补丁包，但这样会导致补丁包变得很大。</li></ul><h3 id="【类加载】QFIX"><a href="#【类加载】QFIX" class="headerlink" title="【类加载】QFIX"></a>【类加载】QFIX</h3><h4 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h4><p>QFix的思路是绕过第一个条件，在加载补丁类的时候，手动在jni层调用dvmResolveClass，设置fromUnverifiedConstant=true，提前调用后会有缓存，下次执行就直接从缓存获取从而绕过校验。</p><h4 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h4><ul><li>  不支持多态，由于时机在dexopt之后，optimize阶段会将invoke-virtual指令替换成invoke-virtual-quick，也就是将方法直接替换成vtable里面的索引，当新增virtual方法后会导致vtable索引错乱，从而导致方法调用异常</li></ul><p><strong>多态是怎么实现的</strong></p><ul><li>  每个类在解析之后对所有的虚方法会生成会有一个vtable表，子类的vtable表会与父类的vtable表合并，通过比对方法签名，优先删去父类的保留子类的，否则添加到末尾，而invoke-virtual指令是通过遍历类的vtable表找到方法索引，然后通过索引在对象的vtable找到实际方法调用</li></ul><h3 id="【类加载】Tinker"><a href="#【类加载】Tinker" class="headerlink" title="【类加载】Tinker"></a>【类加载】Tinker</h3><h4 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h4><p>Tinker的思路是绕过第三个条件，自研了一套DexDiff算法，通过差量的方式打出补丁包下发，然后将patch.dex和应用变更的classN.dex合并成完整的dex，然后对完整的dex进行替换。<br><strong>合并dex</strong><br>app启动后开启独立进程，自研了一套算法进行合并</p><ul><li>  Dalvik：对每个需要修复的dex合成新dex，然后做dexopt</li><li>  Art：多个dex打包成zip包，由于动态加载的dex2oat默认是speed模式全量编译，为了避免耗时过长导致anr，通过命令先做quiken/interpret-only模式的dex2oat，通过解释模式先运行，然后后台再做全量编译</li></ul><h4 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h4><ul><li>  dex合并在vm heap上进行，容易oom，可以优化成在native进行，native内存不受vm限制</li></ul><h3 id="【类加载】JVMTI"><a href="#【类加载】JVMTI" class="headerlink" title="【类加载】JVMTI"></a>【类加载】JVMTI</h3><p>JVMTI：JVM Tool Interface，Java虚拟机定义的开发和监控JVM使用的接口，通过该接口可以探查JVM内部的运行状态，以及控制JVM应用程序的执行。</p><h2 id="So修复"><a href="#So修复" class="headerlink" title="So修复"></a>So修复</h2><h3 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h3><p><strong>替换加载方式</strong></p><p>android提供了两个方法加载so</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>load(String filename);<span class="hljs-comment">//可以加载自定义路径下的so</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>load<span class="hljs-constructor">Libaray(String <span class="hljs-params">filename</span>)</span>;<span class="hljs-comment">//用来加载已经安装APK中的so</span><br></code></pre></td></tr></table></figure><p>最简单的方式就是包装一下这两个方法，如果有补丁so则通过<code>System.load</code>加载，否则通过<code>System.loadLibaray</code>加载，不过该方式对代码有侵入性，无法修复三方库的so</p><p><strong>反射替换加载路径</strong></p><p>类似类加载的方式，so加载的时候实际也是从classloader中查找路径，可以把补丁so库的路径插入到nativeLibraryDirectories数组的最前面，优先加载补丁库达到修复的目的。</p><h1 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h1><ul><li><a href="https://bytedance.feishu.cn/wiki/wikcnwJbYjeGOIEtWLlGGFBZzhe">参考链接1</a></li></ul><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>插件一般也是以一个apk的文件形式存在，然后被宿主apk动态加载并运行。这么做的好处是：</p><ol><li>减小包大小。例如用户不常用的功能可以单独打包成一个插件apk，这样可以减小宿主apk的大小。</li><li>插件apk可以独立更新。</li><li>宿主和插件分开编译，提升开发效率。</li></ol><h2 id="classloader-相关的内容"><a href="#classloader-相关的内容" class="headerlink" title="classloader 相关的内容"></a>classloader 相关的内容</h2><p>类加载原理和”父委托”查找机制，大致分为三步，简单作如下说明：</p><ul><li>  第一步：当前ClassLoader.findLoadedClass()，尝试从已经加载过的缓存中读取。有则直接返回，无则进入下一步；</li><li>  第二步：如果存在parent，则委托parentClassLoader.loadClass()，自低向上依次委托，一致到BootClassLoader；</li><li>  第三步：自顶向下依次findClass()。</li></ul><h2 id="SO-文件的安装处理"><a href="#SO-文件的安装处理" class="headerlink" title="SO 文件的安装处理"></a>SO 文件的安装处理</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1199441">APK安装流程详解4——安装中关于so库的那些事</a><h3 id="ClassLoader与SO的关系"><a href="#ClassLoader与SO的关系" class="headerlink" title="ClassLoader与SO的关系"></a>ClassLoader与SO的关系</h3></li><li>  加载：System.load(path)/System.loadLibrary(name)，能否成功，取决于目标so文件能否找到，或由当前ClassLoader.nativeElements[]内部找到，或由外部传入。</li><li>  打开：能否成功，一个so只能被同一个ClassLoader打开，打开次数不限制。否则报错：already opened by ClassLoader xxx, can’t open in ClassLoader xxx</li><li>  native方法调用：如果是JNI调用，能否成功，取决于当前JNI接口类的classLoader是否是打开它的classLoader，否则报错：No implementation found for xxx。</li><li>  dlopen/dlsym/dlclose：如果是dlopen形式的打开、方法调用、关闭，取决与加载依赖它的so的ClassLoader的能否找到被依赖的so，如果找不到，主动调用System.load()，然后在dlopen也行。但是这个so库只能被同一个ClassLoader load一次。</li></ul><h2 id="插件的整体的流程"><a href="#插件的整体的流程" class="headerlink" title="插件的整体的流程"></a>插件的整体的流程</h2><ol><li>时机<ol><li>主动：业务方主动调用加载方法；</li><li>被动：业务方调用了插件中的类；</li></ol></li><li>核心操作：hook Instrumentation，创建自己的 Instrumentation，代理原有ActivityThread.mInstrumentation；</li><li>流程详解<ol><li>创建 applicationinfo；</li><li>创建 loadapk；</li><li>创建 plugin 的 classloader；</li><li>替换资源；</li><li>注册广播；</li><li>安装 ContentProvider；</li><li>创建 application；</li><li>替换 packageManager；</li><li>回调 application 的 oncreate；</li></ol></li></ol><h2 id="Activity-组件化的处理方式"><a href="#Activity-组件化的处理方式" class="headerlink" title="Activity 组件化的处理方式"></a>Activity 组件化的处理方式</h2><p>对于Activity的插件化来说主要是两步：</p><ul><li>如何让未在AndroidMainfest.xml注册的Activity通过AMS的校验</li><li>如何让未注册的Activity正常启动</li></ul><h3 id="业内方案"><a href="#业内方案" class="headerlink" title="业内方案"></a>业内方案</h3><h4 id="Qigsaw"><a href="#Qigsaw" class="headerlink" title="Qigsaw"></a>Qigsaw</h4><p><code>Qigsaw</code>对于第一步来说它的处理是将插件和宿主编译的时候，将插件内<code>AndroidMainfest.xml</code>的<code>Activity</code>信息复制到宿主的<code>AndroidMainfest.xml</code>内，从而第一步通过校验。</p><p>对于第二步来说，<code>Qigsaw</code>插件化框架修改了<code>Classloader</code>的实现，添加了插件相关的<code>Path</code>，从而导致即使是插件内的类也可以加载,从而实现<code>Activity</code>插件化。</p><p><strong>优点：</strong></p><ul><li>  稳定且兼容性强</li><li>  未使用<code>Hidden Api</code></li><li>  <code>Hook</code> 少</li><li>  改动少</li></ul><p><strong>缺点：</strong></p><ul><li>  宿主和插件要在同仓下编译</li><li>  无法动态新增<code>Activity</code>（宿主的<code>AndroidMainfest.xml</code>是编译时修改，无法通过更新插件升级）</li></ul><h4 id="Replugin"><a href="#Replugin" class="headerlink" title="Replugin"></a>Replugin</h4><p><code>Replugin</code>对于第一步来说，它是编译期间将生成<code>Activity</code>的基类，然后强制插件内的<code>Activity</code>继承此<code>Activity</code>,然后重写了其<code>startActivity</code>的方法，改为使用<code>Replugin</code>内的实现。这样可以按照一般插件化的方案来处理第一步，优点是没有<code>Hook</code>系统类。</p><p>对于第二步来说，<code>Replugin Hook</code> 了<code>Classloader</code> ,所以其可以在<code>Activity</code>创建的时候，将第一步中存储的插件的<code>Activity</code>的类名和占桩的<code>Activity</code>的类名读取出来，然后返回真正的插件的<code>Activity</code>的类即可。</p><p><strong>优点：</strong></p><ul><li>  稳定且兼容性强</li><li>  未使用<code>Hidden Api</code></li><li>  <code>Hook</code> 少</li><li>  改动少</li></ul><p><strong>缺点：</strong></p><ul><li>  需要生成代码和修改原代码</li></ul><h4 id="Mira"><a href="#Mira" class="headerlink" title="Mira"></a>Mira</h4><p>对于<code>Mira</code>来说，其第一步<code>Hook</code>了<code>Instrumentation</code>，当你执行了<code>Activity#startActivity</code>的时候，内部执行了<code>Instrumentation#execStartActivity</code>方法，所以目前<code>Hook</code>了这个方法，用于存储插件<code>Activity</code> 和 占桩<code>Activity</code>的关系，并将插件<code>Activity</code>替换成占桩<code>Activity</code>，完成第一步。</p><p>对于第二步来说，<code>Hook</code> 了<code>ActivityThread</code>的内部类<code>H</code>,它是个<code>Handle.Callback</code>，</p><p>这个地方需要注意，在<code>Android 7</code> 以上会触发<code>ActivityThread.H.EXECUTE_TRANSACTION</code> 消息，以下则会触发<code>ActivityThread.H.LAUNCH_ACTIVITY</code> 消息，版本不同消息类型不同，然后针对这俩消息中<code>Intent</code>存储的占桩<code>Activity</code>信息还原成插件<code>Activity</code>的信息。且此时也需要修改<code>Classloader</code>,用于加载插件<code>Activity</code>。</p><p><strong>优点：</strong></p><ul><li>  稳定性强</li></ul><p><strong>缺点：</strong></p><ul><li>  兼容性一般（需要针对<code>Android7.0</code>前后版本做适配）</li><li>  使用了<code>Hidden Api</code></li><li>  <code>Hook</code>稍多</li><li>  改动稍多</li></ul><h2 id="Resource-资源的插件化"><a href="#Resource-资源的插件化" class="headerlink" title="Resource 资源的插件化"></a>Resource 资源的插件化</h2><p>资源插件化的过程可总结为三步：</p><ol><li>第一步，Application启动时hook替换Application及LoadedApk的resouces到我们自定义的 WrapperResources 上来；<ol><li>反射调用AssetManager.addAssetPath(String path)方法，我们把插件APK的路径传递进去，就可实现访问插件的资源。App中有多少插件就调用多少次，把所有插件的资源都add进去，构造出一个”超级Resources”为全局共用，查找引用，把宿主与插件中需要使用资源的地方都替换为这个”超级Resources”即是。这是资源插件化的第一步。</li></ol></li><li>第二步，插件启动时把插件的资源add到全局资源中，分配不同的段位与resId；</li><li>第三步，Activity在启动时hook替换resouces到MiraWrapperResources实例上。</li></ol><p>在以下几个时机需要注意替换 resource 引用、AssetManager 引用</p><ul><li>application 启动</li><li>activity configuration 变化</li><li>新建 activity 的时候；</li></ul><h3 id="ID-冲突的解决方案"><a href="#ID-冲突的解决方案" class="headerlink" title="ID 冲突的解决方案"></a>ID 冲突的解决方案</h3><p>每个资源都有一个对应的 ID 值 0xPPTTEEEE，由于宿主和插件都是各自打包，开发插件 App 和开宿主App的流程基本是一样的。所以在合并插件资源到宿主时，某个资源 ID 值有可能与宿主资源的 ID 是相同的，即资源 ID 冲突，Mira 的解决方案是通过修改 AAPT 打包工具为插件资源 ID 分配新段位，和固定宿主 App 中需要共享给插件的资源 ID。</p><h2 id="service-的插件化"><a href="#service-的插件化" class="headerlink" title="service 的插件化"></a>service 的插件化</h2><p>整体的流程和 activity 的插件化很像，分为上半场和下半场。</p><ul><li>上半场一样；</li><li>区别在于下半场；<ul><li>因为 start 就是简单的启动一个 Service 组件，所以可以简单理解为只有一次交互消息，而bindService 执行时会有两次消息传递，第一次是 AMS 通知 ActivityThread 创建Service的消息，第二次是 AMS 传递 ServiceConnection 对象到 ActivityThread 的消息。</li><li>因为 stop 是简单的停止一个 Service 组件，只有一次交互消息，且消息体中包含了Intent 信息；而 unbind 有两次交互消息，且 stopService 消息体中没有 Intent 信息，只有 IBinder token 信息。</li></ul></li></ul><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ul><li>  上半场我们选择hook AMN，即创建IActivityManagerProxy作为AMN的代理对象。我们只要”欺骗AMS”要start/stop、bind/unBinder的Service已在AndroidManifest中存在就好。在经过AMN发送Intent信息到AMS之前，把该Intent上的targetService替换为一个在AndroidManifest中声明的StubService，把原来的targetService信息存放在Bundle的扩展字段位上即可。</li><li>下半场我们选择hook ActivityThread.H.mCallback，拦截AMS通知App启动或绑定StubService的消息。在即将启动或绑定StubService之前，把StubService换回原先保存在Bundle扩展位上的targetService。</li></ul><h2 id="Receiver的插件化"><a href="#Receiver的插件化" class="headerlink" title="Receiver的插件化"></a>Receiver的插件化</h2><p>静态广播需要在AndroidManifest中声明，应用安装和Android系统重启时，PMS都会解析App的Manifest，所以静态广播的注册信息位于PMS中。动态广播是在代码中调用Context.registerReceiver() –&gt; AMN.getDefault().registerReceiver()手动注册的，所以注册信息存在于AMS中。二者区别仅在于注册方式不同，之后就都一样了。<br>我们就可以把静态广播都改为动态广播，避免在AndroidManifest中声明，也就避免了AMS检查。这就是Receiver的插件化思路。</p><p>动态广播不需要和AMS打交道，所以它就是一个普通类。我们只要确保宿主App能加载插件中的这个动态广播类即是。在ClassLoader相关章节中介绍过全局的类加载器，有它作保证，我们可以加载任一插件中的任何一个类。这样，插件中的动态广播就可以被宿主App正常调用了。</p><ul><li>  时机：Mira 在使用一个插件前，都必须要preload()预加载。其中包括很重要的一步是将插件中的静态广播转为动态广播注册在宿主中。即插件初始化调用之前，我们取得插件中的静态广播列表，调用相应插件的PluginClassLoader创建实例，以动态广播的形式注册进宿主中。</li></ul><p>这种方案使得丧失了静态广播的特性，体现在不需要启动App就可以启动一个静态广播。当然这里我们不能浅显的认为，App的启动一定是打开某个Activity，通常情况下启动首页的MainActivity只是启动App的一种。Receiver作为四大组件之一，也支持外部调起，进而创建进程，启动应用，接收到广播。尤其推送Push场景下，当App进程已死后，其它伙伴应用可通过发送静态广播来唤醒App。当采用了这种静态转动态的方案后，插件中的所有静态广播特性丧失，即不在支持在App没启动和插件没就绪的情况下，接收到广播。后续我们会对此方案持续改进。</p><h2 id="ContentProvider的插件化"><a href="#ContentProvider的插件化" class="headerlink" title="ContentProvider的插件化"></a>ContentProvider的插件化</h2><h3 id="主进程插件化"><a href="#主进程插件化" class="headerlink" title="主进程插件化"></a>主进程插件化</h3><p>比较简单。类似Receiver的插件化解决方案，把插件中声明在Manifest的静态广播转动态广播”注册”在宿主中。其实Provider也可以这么实现，这时不叫”注册”，叫”安装”。该方法位于 <a href="http://aosp.opersys.com/xref/android-8.0.0_r1/xref/frameworks/base/core/java/android/app/ActivityThread.java#5838">ActivityThread.installContentProvider</a>方法中，我们可以反射调用该方法，把插件中的Providers作为第二个参数填充进去即可。</p><ul><li>时机：越早越好。因为Provider更多场景是给第三方App用得，插件中的Provider必须要安装在宿主中才能生效，越早安装，第三方App等待的时间就越短。App安装自身Provider时机是ActivityThread.installContentProvider()方法执行，会在App进程启动时立刻执行，比Application.onCreate()早，略晚于Application.attchBaseContext()。Mira在使用一个插件前，都必须要preload()预加载。其中包括很重要的一步是将插件中的Provider安装在宿主中。即插件初始化调用之前，我们取得插件中的Provider列表，修改providerInfo.applicationInfo.packageName包名为宿主包名，反射调用ActivityThread.installContentProvider()方法安装即可。所以如果可能，尽可能早得preload()插件。</li><li>  参照PMS通过PackageParser解析Apk，Mira中PluginPackangeManager用于管理插件安装包相关内容，包括解析插件Apk，解析Manifest，创建Package，提取四大组件等。在此调用getProviders()获取插件中的Provider列表。</li></ul><h3 id="子进程插件化"><a href="#子进程插件化" class="headerlink" title="子进程插件化"></a>子进程插件化</h3><p>有跨进程IPC操作，工作在本进程，主要为其它进程App提供数据的Provider，这类Provider的插件化方案比较复杂。直接让外界App或其它进程直接调用本进程插件里定义的Provider，并不是一个理想的解决方案，我们定义了一个StubContentProvider作为中转，让外界App先访问到中转Provider，进而分发到插件里的Provider上，这种设计得益于Provider独有的URI authority作为唯一定位符机制，URI是资源统一定位符，按照既定协议唯一标识一个确定的资源，但它本身就是一个字符串，所以非常适合用于这种转发机制。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文档系统_程序员如何写好文档 (The documentation system)</title>
    <link href="/2021/10/03/the-documentation-system_how_to_write_good_document/"/>
    <url>/2021/10/03/the-documentation-system_how_to_write_good_document/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>文档是日常开发过程中非常重要的记录和交流的工具,也是学习新技术必然要阅读的材料.学习技术的时候,都会建议直接看官方文档,不同的技术网站,会看到 <strong>Guide</strong>,<strong>Tutorial</strong>,<strong>Wiki</strong>,<strong>Reference</strong> 等分类(也可能只包含其中一个或者几个). 我之前就一直对这几个英文单词有疑问,尤其是我在看 Android 开发者官网的时候,不明白每个分类的依据,间接导致,自己也没有学会如何写文档.后来发现了这篇文章,读完觉得很有道理. <a href="https://documentation.divio.com/introduction/">The documentation system</a>,窃以为非常好,值得我进行模仿学习.</p><p>以下的内容会进行自我理解的翻译,有意无意的删除一些冗余的修辞,如有幸被网上邻居搜到,建议看原文,非常简单.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>为了编写良好的软件文档,需要说一个秘密: 没有一个名为文档的东西,文档应该是四样东西的集合.</p><p>这四样分别是是：<code>tutorials</code>(教程),<code>how-to guides</code>(如何做的引导),<code>technical reference</code> (技术参考),<code>explanation</code>(解释). 它们代表四种不同的目的或职能,并且这四种的写作方式都有差异.了解了这些差异,通常能巨大的提高文档的质量.</p><h2 id="关于即将描述的文档系统"><a href="#关于即将描述的文档系统" class="headerlink" title="关于即将描述的文档系统"></a>关于即将描述的文档系统</h2><p><img src="https://documentation.divio.com/_images/overview.png" alt="System"><br>这里的文档系统是非常简单的,近乎于全面适用行业内的方案.行文有个承诺: 如果将这些原则在实践中进行应用,将极大的提高写作文档的质量.</p><p>有很多公司/组织/开源项目采用了本文所述的方案,详细见链接<a href="https://documentation.divio.com/adoption/#adoption">采用本方案的项目</a></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="问题和解决方案"><a href="#问题和解决方案" class="headerlink" title="问题和解决方案"></a>问题和解决方案</h2><h3 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h3><p>如果文档不够好,产品再好,人们也不会使用它.即使人们必须使用它,那也是因为他们别无选择,没有良好的文档,人们无法如你期望的那样使用你开发的产品.</p><p>当然了,每个人都知道文档的重要性,每个人也都尝试去写好文档,最终也都失败了.</p><p>这也不是写作的人不够努力,通常是他们没有按照正确的方式去做而已.</p><p>本文介绍的文档系统,不是为了让你更加努力的工作,而是让你写作的文档更好,使用正确的方式进行写作,让文档更加易懂,更加容易维护: The right way is the easier way.</p><h3 id="文档系统的秘密"><a href="#文档系统的秘密" class="headerlink" title="文档系统的秘密"></a>文档系统的秘密</h3><p>有一个不应该是秘密的秘密: 文档应该围绕四种不能的功能目的进行构造: <code>tutorials</code>(教程),<code>how-to guides</code>(如何做的引导),<code>technical reference</code> (技术参考),<code>explanation</code>(解释).每一种都需要有独立的写作模式. 软件的使用者在不同的情况下,需要不同的文档,故而,大部分的软件,对于这四种文档,都需要包含. </p><p>文档将围绕这四种进行构建,并且四种文档需要独立的创建.</p><table><thead><tr><th align="center"></th><th align="center">Tutorials(教程)</th><th align="center">How-to guides(如何做的引导)</th><th align="center">Reference(技术参考)</th><th align="center">Explanation(解释)</th></tr></thead><tbody><tr><td align="center">oriented to(面向的/目的/导向)</td><td align="center">学习</td><td align="center">有一个固定的目标</td><td align="center">传达信息</td><td align="center">为了更深的理解</td></tr><tr><td align="center">must (必须做到)</td><td align="center">让一个初学者上手</td><td align="center">演示如何解决一个特定的问题</td><td align="center">描述技术的内部参数等</td><td align="center">深层次的解释</td></tr><tr><td align="center">its form(形式)</td><td align="center">一节课</td><td align="center">一些列的步骤</td><td align="center">纯粹的描述</td><td align="center">用文字进行阐述说明</td></tr><tr><td align="center">analogy(类比)</td><td align="center">教一个孩子如何进行烹饪</td><td align="center">烹饪中的食谱</td><td align="center">百科全书里的文章</td><td align="center">关于烹饪的历史书</td></tr></tbody></table><p>如上这种划分,可以让作者清楚写什么内容,写在哪儿,如何写; 读者清楚去哪找想要的内容.这种划分,可以让作者从原先的一股脑的将一堆信息进行拼凑的状态中解脱,因为这种划分,按照职责划分,不同类型的文章只需要完成一样职责,写作时目的很明确,不再出现拼凑信息的情况.</p><p>坦白讲,那些不符合该方案的文档还是非常难以维护的.因为我们列出的 4 种类型针对的是 4 种不同的需求,一旦将这些需求对应的内容糅合在一个文档里的时候,文档的内容为了兼顾,肯定有相互之间的牵扯,读者就会被牵扯.</p><p>一旦理解了上述的方案,就会极大地提高文档的结构性,我们也就能知晓接下来采取什么方式提高我们的文档质量.</p><p>接下里的章节中,将会针对这四种类型的文档,分别进行详细的描述.</p><h3 id="让文档自己工作"><a href="#让文档自己工作" class="headerlink" title="让文档自己工作"></a>让文档自己工作</h3><h4 id="对于作者而言"><a href="#对于作者而言" class="headerlink" title="对于作者而言"></a>对于作者而言</h4><p>对于文档的作者而言,最大的难题是不知道他们该做这些什么. 作者为了让自己想表达的内容以合适的方式排列在一起,不停的写再重写,不停的反复.<br>通过这种文档系统结构,将会使得写作更加容易,因为该方案将文档进行明确的职责区分,将文档进行明确的隔离,这样使得写作和维护都很容易,也很容易使用和查找.<br>虽然说文档不能自己完成,但是现在编写文档的时候,可以做到不用操心哪些内容应该包含,哪些内容不应该包含.在职责明确的背景下,我们很容易知道在什么地方,写什么,怎么写.</p><h4 id="对于读者而言"><a href="#对于读者而言" class="headerlink" title="对于读者而言"></a>对于读者而言</h4><p>对于读者言,可以更好的与软件进行交互了,在试用的不同阶段,可以很快的找到自己需要的资料.<br>按照上述四个象限进行编写文档,有助于软件吸引和留住用户,他们可以快速接入,更加高效的使用软件.</p><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><p>Tutorials(教程) 是由课程组合而成,内容都是些课程,目的是带领读者通过一系列步骤来完成某种项目.项目的作者需要这些 Tutorials(教程 ),一次向初学者展示他们可以用作者的软件可以获取到的东西.</p><p>Tutorials(教程) 是以学习为导向的,具体来说,Tutorials(教程) 是教会学习者如何使用,成为一个使用者,而不是学习项目本身.</p><p>你作为作者就是个老师,读者就是个学生.你需要对你教授给学生的东西负责.学生在你的指导下,将会通过一系列的操作在最终获到你想传授的技能.</p><p>最终的结局和步骤,都取决于你.但是读者应该是什么样的人,却是无法预测的.结局对于初学者来说,必须有意义,而且必须有所收获.</p><p>有一个重要的事情需要说明,当学习者阅读完Tutorial时,他应该对剩下的文档内容心里有数了,对于这个软件本身也做到了心里有数.</p><p>大多数软件的Tutorial很差,甚至干脆没有.Tutorial是一个让学习者成为软件用户的契机.如果Tutorial很差,或者没有,获取新用户的难度会大很多.</p><p>在介绍四种文档的章节中,这部分是最难写的,因为Tutorial是最难理解,也最难做好的内容.</p><p>传授知识的最佳方式是现实中存在一个可以互动的老师.这基本是不可能的,所以我们写的Tutorial就是最好的替代品.这也能说明,我们需要格外的注意Tutorial的部分.</p><p>Tutorial 必须对初学者有用,简单有意义,而且紧跟软件的发版节奏,及时保持最新状态.</p><h2 id="和烹饪类比"><a href="#和烹饪类比" class="headerlink" title="和烹饪类比"></a>和烹饪类比</h2><p><img src="https://documentation.divio.com/_images/anselmo.jpg" alt="孩子学烹饪"><br>可以类比教一个孩子如何烹饪.</p><p>你教孩子做什么菜不重要.重要的是,孩子通过你的传授,发现了烹饪的乐趣,获得了自信并且想再次尝试.</p><p>孩子通过学习过程中所做的事情,将会学习到烹饪中最重要的事情.他将学会为了做一道鸡丝面,应该放些什么材料,而且知道如何处理这些材料.</p><p>这是因为,使用软件,和烹饪一样,是个手艺活.尽管说,他是需要知识,但是这些知识是实用性的,需要实际使用,而不是理论性的.</p><p>当我们学一门新的手艺和技巧的时候,总是从使用这个手艺或技巧开始.</p><h2 id="如何写好Tutorial-How-to-write-good-tutorials"><a href="#如何写好Tutorial-How-to-write-good-tutorials" class="headerlink" title="如何写好Tutorial (How to write good tutorials)"></a>如何写好Tutorial (How to write good tutorials)</h2><h3 id="让学习者在使用中学-Allow-the-user-to-learn-by-doing"><a href="#让学习者在使用中学-Allow-the-user-to-learn-by-doing" class="headerlink" title="让学习者在使用中学(Allow the user to learn by doing)"></a>让学习者在使用中学(Allow the user to learn by doing)</h3><p>在事情的初期阶段,我们通过实际使用来学.这也是我们学习说话和走路使用的方法.</p><p>在软件的Tutorial中,都是软件的初学者需要做的事情.学习者在阅读Tutorial后可以知晓,从一个简单入门的项目向一个更复杂的项目需要使用的工具和步骤.</p><h3 id="让学习者开始动起来-Get-the-user-started"><a href="#让学习者开始动起来-Get-the-user-started" class="headerlink" title="让学习者开始动起来 (Get the user started)"></a>让学习者开始动起来 (Get the user started)</h3><p>对于初学者进行手把手式的讲解,是让人更容易接受的.而不是将初学者当作一个经验丰富的用户.有时候,传授的内容可能不是所谓的“正确”方式,因为刚开始的时候,不要传授所谓的最佳实践.</p><p>Tutorial 的最核心的点是,让学习者开始行动起来,让他踏上使用的旅程,而不是要一次性将他们带到旅途的终点.</p><h3 id="确保Tutorial是可用的-Make-sure-that-your-tutorial-works"><a href="#确保Tutorial是可用的-Make-sure-that-your-tutorial-works" class="headerlink" title="确保Tutorial是可用的 (Make sure that your tutorial works)"></a>确保Tutorial是可用的 (Make sure that your tutorial works)</h3><p>作为指导者,还有一个很重要的任务,就是让学习者充满自信,自信于在你的指导下,通过软件,以自己的能力,可以完成Tutorial中要求的内容.</p><p>有很多的内容可以帮我们达到这个目的.一份措辞温和友好的帮助文档,连续且逻辑清晰的语言,都对此大有裨益.但是其中最重要的一点是,你让阅读者进行的操作案例必须是可用的.阅读学习者必须根据你的步骤能看到跟你说的一样的效果.</p><p>如果学习者在学习过程中,进行的操作不顺利,产生错误或者意想不到的结果,即使这个不是你的原因,你的Tutorial就算是失败了.学习者如果跟你面对面交流,那么你可以直接线下指导,但是绝大部分情况,都是直接阅读Tutorial的,那就很难直接指导.所以,在写作Tutorial的时候,就需要想方设法的我避免这个样的事情发生.</p><h3 id="确保阅读者的操作能获得及时反馈-Ensure-the-user-sees-results-immediately"><a href="#确保阅读者的操作能获得及时反馈-Ensure-the-user-sees-results-immediately" class="headerlink" title="确保阅读者的操作能获得及时反馈(Ensure the user sees results immediately)"></a>确保阅读者的操作能获得及时反馈(Ensure the user sees results immediately)</h3><p>学习者在过程中执行的所有操作应该是完成一些学习者阅读时已经可理解的操作,无论这个操作有多小,都必须让阅读者明白目的.试想一下,你的一个学生,在看到一个效果之前,需要阅读两页的文档,且执行一些自身都觉得奇怪的操作,这个过程也太长了.学习者进行的每一步操作,应该做到尽快明显且可见.,执行的动作和效果之间的联系也需要清晰明了.</p><p>Tutorial整体或者其中的任一章节结束的时候,他的结尾,都必须是个有意义的总结,让学习者一顿操作下来是有意义的.</p><h3 id="让你的Tutorial是重复的-可反复操作的-Make-your-tutorial-repeatable"><a href="#让你的Tutorial是重复的-可反复操作的-Make-your-tutorial-repeatable" class="headerlink" title="让你的Tutorial是重复的,可反复操作的(Make your tutorial repeatable)"></a>让你的Tutorial是重复的,可反复操作的(Make your tutorial repeatable)</h3><p>你的Tutorial必须是非常可靠,可复现的.这点并不容易,原因在于,学习者使用的操作系统可能不一样,经验和使用工具的水平并不一样,更重要的是,学习者使用的软件和资料也与此同时发生了变化.</p><p>Tutorial必须适应这么多情况,在这些情况下都能正常工作.</p><p>所以 Tutorial 需要定期进行详细的测试,以保证它持续的有效.</p><h3 id="聚焦在具体的步骤中-而不是抽象的概念里-Focus-on-concrete-steps-not-abstract-concepts"><a href="#聚焦在具体的步骤中-而不是抽象的概念里-Focus-on-concrete-steps-not-abstract-concepts" class="headerlink" title="聚焦在具体的步骤中,而不是抽象的概念里(Focus on concrete steps, not abstract concepts)"></a>聚焦在具体的步骤中,而不是抽象的概念里(Focus on concrete steps, not abstract concepts)</h3><p>Tutorial 必须是具体的,围绕着规格说明进行开展的,有明确的步骤和步骤对应的结果.</p><p>进行抽象概念的介绍的诱惑力太大,毕竟,计算机的强大也是来自于此,然而,大多数的学习都是由具体到抽象,反过来是个比较糟糕的学习方式.</p><h3 id="必要的解释要尽量的少-Provide-the-minimum-necessary-explanation"><a href="#必要的解释要尽量的少-Provide-the-minimum-necessary-explanation" class="headerlink" title="必要的解释要尽量的少(Provide the minimum necessary explanation)"></a>必要的解释要尽量的少(Provide the minimum necessary explanation)</h3><p>在完成 Tutorial 中不需要了解的知识,不要进行解释.额外的扩展和讨论是可以的,但是不应该出现在 Tutorial 中.在 Tutorial 中,只会令学习者分心,还会干扰学习目的.只有必要的解释才可以放在这部分,其他的可以提供链接导航.</p><h3 id="关注于哪些用户需要执行的步骤-Focus-only-on-the-steps-the-user-needs-to-take"><a href="#关注于哪些用户需要执行的步骤-Focus-only-on-the-steps-the-user-needs-to-take" class="headerlink" title="关注于哪些用户需要执行的步骤 (Focus only on the steps the user needs to take)"></a>关注于哪些用户需要执行的步骤 (Focus only on the steps the user needs to take)</h3><p>Tutorial 需要关注的是手头的任务.也许你的命令还有很多的其他的可选项,也许你的API还有很多其他的使用方式,但是对于学习者当前的任务而言,并不需要. </p><h2 id="Divio-中的一个-Tutorial-例子-Example-from-Divio’s-documentation"><a href="#Divio-中的一个-Tutorial-例子-Example-from-Divio’s-documentation" class="headerlink" title="Divio 中的一个 Tutorial 例子(Example from Divio’s documentation)"></a>Divio 中的一个 Tutorial 例子(Example from Divio’s documentation)</h2><p>可以看下这个 <a href="https://docs.divio.com/en/latest/introduction/">Tutorial</a><br><img src="https://documentation.divio.com/_images/django-tutorial-example.png" alt="Django"></p><p>可以着重看下关于 Django 的 Tutorial,如图所示,其实就是在承诺,如果学者具备了基本的前提能力,并且按照文档所述的步骤一步一步的执行,当阅读完之后,将会完成一个用 Django 实现的web应用,其中数据库中用的是 Postgress, S3实现的媒体存储等等.为了达成这样的目标,Tutorial 就需要一步一步填充这些内容.</p><p>注意,Tutorial 目录都没有指明学习什么,而聚焦在应该做些什么,做什么的顺序.</p><h1 id="如何做的指南-How-to-guides"><a href="#如何做的指南-How-to-guides" class="headerlink" title="如何做的指南(How-to guides)"></a>如何做的指南(How-to guides)</h1><p>“How-to-guides”是通过指引读者进行一系列的步骤以解决现实中特定的问题。</p><p>Guide 是食谱，是为了解决一个特定问题的指导方案。举个例子，如何创建一个web表单；如何启用LDAP权限验证。</p><p>guide始终是目标为导向的。</p><p><strong>Guide 和 Tutorial完全不同，二者的编写目的和面向的目标都不一样</strong>，对此必须有清晰的认识。具体来说，有几下几个差异</p><ul><li>Tutorial 是你作为一个作者，想让读者作为一个初学者，需要知道的内容。是作者认为初学者应该知道的。</li><li>Guide 是面向有经验的用户，为的是解决他们的一个实际问题。</li><li>在编写 Guide 的时候，作者可以假设读者已经具备了常规的知识和理解。可以假设读者已经具备了操作使用作者的软件所需要的基础能力和基本的工具。</li><li>和 Tutorial 不同的是, Guide 是比较容易写好的，这部分内容是比较轻松，比较容易写的。</li></ul><h2 id="和烹饪类比-1"><a href="#和烹饪类比-1" class="headerlink" title="和烹饪类比"></a>和烹饪类比</h2><p><img src="https://documentation.divio.com/_images/recipe.jpg" alt="食谱"></p><p>可以想象成某样食物的食谱。</p><p>食谱必须清晰明了，有明确的定义。他们描述了一个明确的问题。食谱在向一个有基本烹饪经验的人，如何完成食物的烹饪过程。</p><p>从来没有任何烹饪经验的人，只靠食谱，是很难完成一道菜的烹饪的，所以说，食谱本来不是烹饪课的一部份。与此同时，如果有经验的厨师，发现食谱在描述一些他们早就掌握的基础能力，基础的技巧，他们就会很愤怒。</p><h2 id="如果编写一份好的guide-How-to-write-good-how-to-guides"><a href="#如果编写一份好的guide-How-to-write-good-how-to-guides" class="headerlink" title="如果编写一份好的guide(How to write good how-to guides)"></a>如果编写一份好的guide(How to write good how-to guides)</h2><h3 id="提供一系列的步骤-Provide-a-series-of-steps"><a href="#提供一系列的步骤-Provide-a-series-of-steps" class="headerlink" title="提供一系列的步骤(Provide a series of steps)"></a>提供一系列的步骤(Provide a series of steps)</h3><p>Guide 必须包含一些读者必须操作的步骤（这个在 Tutorial 也有类似的需求）。作者并不需要从头开始描述步骤，以一个相对合理的点进行开始描述即可。Guide 必须是可靠的，但是，Guide 并不需要保证像 Tutorial 一样的可重复性。</p><h3 id="聚焦于结果-Focus-on-results"><a href="#聚焦于结果-Focus-on-results" class="headerlink" title="聚焦于结果(Focus on results)"></a>聚焦于结果(Focus on results)</h3><p>Guide 必须聚焦于某个特定的目标。与目标无关的任何其他事情都是分心的。和 Tutorial 一样，详细的解释并不适合放这儿。</p><h3 id="解决某个特定的问题-Solve-a-particular-problem"><a href="#解决某个特定的问题-Solve-a-particular-problem" class="headerlink" title="解决某个特定的问题(Solve a particular problem)"></a>解决某个特定的问题(Solve a particular problem)</h3><p>Guide 必须的标题命名也必须是有明确指向一个问题的，比如： 如何。。。</p><p>Guide 和 Tutorial 的另一个不同点是，阅读 Guide 的人知道自己阅读 Guide 需要什么，最终的目的是什么，他们已经知道阅读完 Guide 自己将获得什么，他们只是不知道该怎么做而已。而对于 Tutorial 而言，读者其实并不知道自己将获得什么，读者阅读完获得的内容，完全是由作者说了算。</p><h3 id="不要解释概念-Don’t-explain-concepts"><a href="#不要解释概念-Don’t-explain-concepts" class="headerlink" title="不要解释概念(Don’t explain concepts)"></a>不要解释概念(Don’t explain concepts)</h3><p>guide中不需要解释任何东西，guide只适合放些解决问题的步骤，如果有解释的需求，可以进行超链接。</p><h3 id="也许允许存在一些弹性变通-Allow-for-some-flexibility"><a href="#也许允许存在一些弹性变通-Allow-for-some-flexibility" class="headerlink" title="也许允许存在一些弹性变通(Allow for some flexibility)"></a>也许允许存在一些弹性变通(Allow for some flexibility)</h3><p>一份 Guide 针对同一件事应该是允许存在一些不同的处理方式的。Guide中能让读者采取变通的地方应该做到显而易见。不要让guide太过特殊，一点通用型和灵活性都没有。</p><h3 id="Leave-things-out-将事情抛诸脑后"><a href="#Leave-things-out-将事情抛诸脑后" class="headerlink" title="Leave things out(将事情抛诸脑后)"></a>Leave things out(将事情抛诸脑后)</h3><p>实用性比完整性更有价值.Tutorial (教程)需要是完整的,有头有尾的指导. Guide 并不需要这样.Guide 可以从作者认为合适的地方开始和结束。Guide 也不需要提及那些仅仅因为它与主题相关,但是并不是关键内容的部分.臃肿的 Guide 并不能帮助用户快速找到解决方案.</p><h3 id="名字很重要-Name-guides-well"><a href="#名字很重要-Name-guides-well" class="headerlink" title="名字很重要(Name guides well)"></a>名字很重要(Name guides well)</h3><p>Guide 的标题很重要,标题必须能准确告诉读者,文章的内容具体是干什么的. “How to create a class-based view (如何创建一个基于类的视图)” 就是个很好的标题. 然而像 “(Creating a class-based)创建基于类的视图” 和 “Class-based views (基于类的视图)”就更差劲了.</p><h2 id="Divio-中的-Guide-例子-Example-from-Divio’s-documentation"><a href="#Divio-中的-Guide-例子-Example-from-Divio’s-documentation" class="headerlink" title="Divio 中的 Guide 例子(Example from Divio’s documentation)"></a>Divio 中的 Guide 例子(Example from Divio’s documentation)</h2><p>看一下这个文档<a href="https://docs.divio.com/en/latest/how-to/">our how-to guides</a>.<br><img src="https://documentation.divio.com/_images/django-how-to-example.png" alt="Divio中的例子"></p><p>这里的每个标题都是在说明内容是一个问题的答案. “how do I…? (如何解决…如何做到…)”. 这些标题里都是在阐述类似的概念”how to “.  每一个都是一道菜的食谱,都会引导读者完成对应的菜.</p><p>虽然我在 Tutorial 和 Guide 都是服务用户的需求.但是,Tutorial 的内容是作者在告诉读者,作者认为读者应该知道的内容. 然而,Guide,是作者在回答读者问的问题.</p><h1 id="参考-Reference-guides"><a href="#参考-Reference-guides" class="headerlink" title="参考(Reference guides)"></a>参考(Reference guides)</h1><p>Reference是机械的技术说明，说明如何进行操作。</p><p>Reference只有一个职责，就是进行描述。Reference是面向代码的。从根本上说，描述了关键的class，函数，API，以及罗列一些字段属性，还有方法，同时呢，说明如何使用它们。</p><p>Reference是信息导向的。</p><p>无论如何，尽管Reference可以包含一些example来演示使用方式，然而呢，依旧不应该试图解释一些基本概念和如何完成常规的需求。</p><p>Reference应该是简单直切主题的。</p><p>请注意，Reference的描述应该是包含一些机理的基本描述。如：如何初始化一个类，如何调用一个方法，例子，以及调用方法时，参数的限制等等。</p><p>对于一些开发者而言，Reference是他们唯一能想到的文档了。他们已经对软件非常熟悉了，也知晓了如何使用了。他们认为学习者就需要这些文档。</p><p>Reference比较容易写好，甚至在某种程度上来说，都可以自动生成。但是这还远远不够。 </p><h2 id="和烹饪进行类比-Analogy-from-cooking"><a href="#和烹饪进行类比-Analogy-from-cooking" class="headerlink" title="和烹饪进行类比(Analogy from cooking)"></a>和烹饪进行类比(Analogy from cooking)</h2><p><img src="https://documentation.divio.com/_images/ginger.jpg" alt="生姜"></p><p>想象一下百科全书上有一篇关于生姜作为原材料的文章。</p><p>当你在Reference中查询生姜时，你想要获取的信息都是些像起源，表现，化学机理，以及如何进行烹饪。</p><p>你希望你检索的任何食材都以类似的方式展示信息。而且你希望获取一些基本扩展信息，比如生姜家族还有姜粉，还有豆蔻等等。</p><p>还有一些潜在问题风险也是我们想获取的。比如。生姜可能会导致胃灼热，与一些抗凝血的药一起食用会有副作用。</p><h2 id="如何写一篇好的-Reference-How-to-write-good-reference-guides"><a href="#如何写一篇好的-Reference-How-to-write-good-reference-guides" class="headerlink" title="如何写一篇好的 Reference(How to write good reference guides)"></a>如何写一篇好的 Reference(How to write good reference guides)</h2><h3 id="Reference是围绕代码进行结构的组织-Structure-the-documentation-around-the-code"><a href="#Reference是围绕代码进行结构的组织-Structure-the-documentation-around-the-code" class="headerlink" title="Reference是围绕代码进行结构的组织(Structure the documentation around the code)"></a>Reference是围绕代码进行结构的组织(Structure the documentation around the code)</h3><p>将reference的结构和代码的结构保持一致，这样使用者看代码的同时，可以同时看到reference。这种方式也有利于开发维护文档，及时知晓哪块缺少文档，哪块需要更新。</p><h3 id="保持连贯性-Be-consistent"><a href="#保持连贯性-Be-consistent" class="headerlink" title="保持连贯性(Be consistent)"></a>保持连贯性(Be consistent)</h3><p>在书写Reference的过程中，结构，语气和格式都需要保持一致。就像一本百科全书和字典那样。</p><h3 id="只做内容描述-Do-nothing-but-describe"><a href="#只做内容描述-Do-nothing-but-describe" class="headerlink" title="只做内容描述(Do nothing but describe)"></a>只做内容描述(Do nothing but describe)</h3><p>技术Reference只需要尽可能的描述完整，描述清楚就行。其他的像解释，讨论，指导，命令，猜测，观点等等，不仅会让读者分心，也会让Reference难以使用，维护困难。可以在适当的时候，在Reference中提供简单的example进行演示。</p><p>不要在Reference中忍不住指引读者，使用超出基本操作之外的操作来完成某项完整的需求.更不要在 reference 中试图对一些概念进行解释或者进行一些主题讨论.相反,如果有类似的需求,可以放一个链接,导航到 Guide,Explanation 和 Tutorial 部分.</p><h3 id="一定要精确-Be-accurate"><a href="#一定要精确-Be-accurate" class="headerlink" title="一定要精确 (Be accurate)"></a>一定要精确 (Be accurate)</h3><p>Reference 这部分的内容必须时刻保持最新,紧跟软件的更新和发展,但凡 reference 和软件有一丝的不一致,就可能将读者或者用户带入沟里.</p><h2 id="以Divio的文档作为例子-Example-from-Divio’s-documentation"><a href="#以Divio的文档作为例子-Example-from-Divio’s-documentation" class="headerlink" title="以Divio的文档作为例子(Example from Divio’s documentation)"></a>以Divio的文档作为例子(Example from Divio’s documentation)</h2><p>可以看下这个链接里的<a href="https://docs.divio.com/en/latest/reference/divio-cli">例子</a> </p><p><img src="https://documentation.divio.com/_images/django-reference-example.png" alt="Divio CLI"></p><p>这是个典型的 Reference 文档,这里是展示的命令行工具的解释.</p><p>这里的描述就是如本文上述的内容一样,完整而精确地展示了这个工具的的功能,命令以及命令的参数.</p><p>这部分的内容的易读性可能没那么好,但是这部分的目的是为了尽快无干扰的找到相关功能的信息.</p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p>Explanation(解释) 或者 discussion(讨论)是要阐明一个特定的主题. 这其实扩大了文档对主题的覆盖范围.</p><p>Explanation(解释) 是面向理解的.</p><p>Explanation(解释) 本质上也可以等价于 discussions(讨论) ,他们其实都比较散漫.Explanation(解释)  是在跳出了软件本身,从更高的视野和不同的角度在解释和阐明软件.你可以想象,你的用户在闲暇时间,希望阅读的是文档,而不是源码.</p><p>很少有人明确的创建Explanation(解释) 这一章节.而是本该属于这章节的内容分散在了其他的章节里.有时,文档里有对应Explanation(解释) 应有内容的章节,但是这些章节都命名成了”背景”,或者其他主题形式的记录,这就导致这些命名不能很好的表征内容.</p><p>Discussions (讨论)并没有看上去的那么容易,想象一下,你手里有张白纸,这时候,有人问了一个问题,该如何进行回答和讨论?</p><p>一个topic (主题)不是像 Guide(指南) 一样,解决一个特定的问题,传授一些特有的步骤; 也不是像tutorial(教程)一样,在向读者传授你认为读者他们应该掌握的内容.也不是由机器来决定的 reference . 这部分的内容完全是有作者自己来界定讨论的内容,以及覆盖的范围.所以这部分的内容看上是比较随意的.</p><h2 id="类比烹饪-Analogy-from-cooking"><a href="#类比烹饪-Analogy-from-cooking" class="headerlink" title="类比烹饪(Analogy from cooking)"></a>类比烹饪(Analogy from cooking)</h2><p><img src="https://documentation.divio.com/_images/mcgee.jpg" alt="烹饪"></p><p>考虑下,在进行历史,科技和科学的上下文和背景下,进行烹饪的讨论. 讨论的内容会是烹饪和厨房.</p><p>这部分讨论的内容并不是传授如何烹饪,也不是食谱的集合. 这部分内容只是在进行描述.</p><p>相反的,这部分内容是在从多个角度进行阐述分析问题. 可能是在解释为什么我们今天会如此处理事情,或者事情的处理如何糟糕,甚至会描述替代的方案.</p><p>这部分内容会加深我们对知识的理解,即使这部分内容并不是立马可应用于实际的业务场景中,但是这部分内容的价值并不是靠在实际的生产应用中体现.</p><p>当我们需要闲暇事件,离开厨房的时候,从更高的层次上,来加深对烹饪的理解时,了解更多关厨房的主题时,我们就会选择阅读这部分内容.</p><h2 id="如何写好一份-explanation-How-to-write-a-good-explanation"><a href="#如何写好一份-explanation-How-to-write-a-good-explanation" class="headerlink" title="如何写好一份 explanation(How to write a good explanation)"></a>如何写好一份 explanation(How to write a good explanation)</h2><h3 id="提供上下文环境-Provide-context"><a href="#提供上下文环境-Provide-context" class="headerlink" title="提供上下文环境(Provide context)"></a>提供上下文环境(Provide context)</h3><p>Explanations 可以用来提供上下文和背景. 例如,在 Django或者 CMS 中如何处理 Web  表单.</p><p>在这部分,可以解释为什么是如此处理,相关的设计决策,历史原因,技术限制等等.</p><h3 id="讨论替代方案和建议意见-Discuss-alternatives-and-opinions"><a href="#讨论替代方案和建议意见-Discuss-alternatives-and-opinions" class="headerlink" title="讨论替代方案和建议意见(Discuss alternatives and opinions)"></a>讨论替代方案和建议意见(Discuss alternatives and opinions)</h3><p>Explanation  可以考虑进行替代方案,或者同一问题的多种不同解决方案.举个例子,在一篇关于 Django 部署的文章中,可以讨论和评估不同的服务器部署.</p><p>Discussions  也可以用来讨论两种相反的意见和选择. 举个例子,是否需要将测试模块放入源码工程的包下面.</p><h3 id="不要进行指导-也不要提供技术支持-Don’t-instruct-or-provide-technical-reference"><a href="#不要进行指导-也不要提供技术支持-Don’t-instruct-or-provide-technical-reference" class="headerlink" title="不要进行指导,也不要提供技术支持(Don’t instruct, or provide technical reference)"></a>不要进行指导,也不要提供技术支持(Don’t instruct, or provide technical reference)</h3><p>Explanation 应该做一些其他部分的文档没有做的事情. Explanation 不适合对读者进行指导如何进行操作,也不适合提供技术解决方案.这些内容都是其他文档的职责.</p><h2 id="Example-from-Divio’s-documentation"><a href="#Example-from-Divio’s-documentation" class="headerlink" title="Example from Divio’s documentation"></a>Example from Divio’s documentation</h2><p>Divio 文档中的一个<a href="https://docs.divio.com/en/latest/reference/divio-cli">例子</a></p><p><img src="https://documentation.divio.com/_images/divio-explanation-example.png" alt="Divio"><br>看一眼这个文档, our explanation section (名称是“Background” -名字并不重要,阐释的主题和内容更加重要).</p><p>这些文章没有教任何东西. 他们不会告诉读者该做什么.它们不是 reference . 他们只是讨论特定的话题.举个例子, 读者不需要知道 缓存 或 CDN 亦或是如何管理环境变量来使用平台或完成任何特定任务,但是阅读完这些内容之后,读者的经验和平台的使用能力都会更加清晰,理解也会更加深刻.</p><p>这些文章的内容提供了一个更加广阔的图景,更加清晰地上下文. 读者作为一个用户,作为一个使用方,也许他们并不需要知道处理一个问题的方式为何如此.但是当他们知道这些背景和缘由之后,他们会对产品更加满足,自身也会更加的快乐.</p><h1 id="关于文档的结构-About-the-structure"><a href="#关于文档的结构-About-the-structure" class="headerlink" title="关于文档的结构(About the structure)"></a>关于文档的结构(About the structure)</h1><h2 id="为什么这个不明显-Why-isn’t-this-obvious"><a href="#为什么这个不明显-Why-isn’t-this-obvious" class="headerlink" title="为什么这个不明显(Why isn’t this obvious?)"></a>为什么这个不明显(Why isn’t this obvious?)</h2><p>这个结构是非常清晰的,而且是能其效果的. 但是为什么让人觉得这个结构没那么明显呢?原因是,这四个类型的文档,处在四个象限,每个象限的和其相邻的象限在特征上是有重叠.</p><p><img src="https://documentation.divio.com/_images/overview.png" alt="四种文档"><br>从上图中可以看到,每个象限都和邻居有重叠.</p><blockquote><p>Tutorials 和 Guides  都有描述操作步骤;<br>Guides 和 Reference 都有关于我们在工作时应该做的内容.<br>Reference 和 Explanation 都有理论知识的内容.<br>Tutorials 和 Explanation 相较于实际的工作内容,对学习有莫大的帮助.</p></blockquote><h3 id="坍塌的趋势-The-tendency-to-collapse"><a href="#坍塌的趋势-The-tendency-to-collapse" class="headerlink" title="坍塌的趋势(The tendency to collapse)"></a>坍塌的趋势(The tendency to collapse)</h3><p>考虑到这些文档之间的重叠部分,不同类型的文档相互之间变得混淆并相互混合也就不足为奇了.事实上,这些不同类型的文档彼此之间存在一种难以抗拒的力量,让他们之间纠缠不清.它的作用是坍塌式的结构,这就是为什么这么多文档看起来像这样.<br><img src="https://documentation.divio.com/_images/collapse.png" alt="文档之间坍塌"></p><h1 id="省略的内容"><a href="#省略的内容" class="headerlink" title="省略的内容"></a>省略的内容</h1><p>后面有一些使用本结构的文档链接和介绍,就不再翻译了.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>文章中最后也有说明,不是所有的文档都需要具备齐全这四种类型,最重要的是,知道有这四种类型,注意阅读者的分级分层,内容的重点和意图.</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Documentation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mySoftware</title>
    <link href="/2021/07/06/mySoftware/"/>
    <url>/2021/07/06/mySoftware/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>记录我平时使用的一些软件,提效的,娱乐的.</p><span id="more"></span><h1 id="快速打开"><a href="#快速打开" class="headerlink" title="快速打开"></a>快速打开</h1><p><a href="https://raycast.com/">Raycast</a><br><a href="https://www.alfredapp.com/">Alfred</a><br><a href="https://contexts.co/">Contexts</a></p><h2 id="目的-用于快速打开应用软件和文件夹"><a href="#目的-用于快速打开应用软件和文件夹" class="headerlink" title="目的: 用于快速打开应用软件和文件夹"></a>目的: 用于快速打开应用软件和文件夹</h2><p>其中比较知名的就是 Alfread了,我目前把它和Context进行配合使用.</p><p>Raycast 和 Alfred 差不多,Raycast 我装了,但是用的频率不高,目前没发现他有什么特别的亮点,用来作为 Alfred 的备选,毕竟免费.</p><p>Context有一个feature就是可以切换window,比如,AndroidStudio里打开了多个Project,形成了多个window,这说话,直接Alfred打开Androidstudio的话,只是打开了软件,至于哪个Window,有时候不清楚,这种情况下,Context 是个很好的补充.<br>Context 的缺陷就是,他只是用来打开,已有的窗口的.</p><h1 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h1><p><a href="https://pinyin.sogou.com/mac/">搜狗输入法</a></p><p>目前国内也就搜狗输入法还行了,当然百度也有Mac版本,但是体验上,还是搜狗好点.</p><h1 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h1><p><a href="https://iterm2.com/">iterm2</a><br><a href="https://ohmyz.sh/">oh-my-zsh</a><br>Mac 下很好的终端工具了.目前没发现其他替代品;</p><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><a href="https://git-fork.com/">fork</a><br>Native开发,相比对sourceTree,颜值和性能都更高,无他,颜值即正义.</p><h1 id="Android开发"><a href="#Android开发" class="headerlink" title="Android开发"></a>Android开发</h1><p><a href="https://developer.android.com/studio">AndroidStudio</a></p><p>开发Android必备,只是有一点至今让我诟病的地方,就是ActivityStack的打印被删除了…</p><h1 id="C-Cpp开发"><a href="#C-Cpp开发" class="headerlink" title="C/Cpp开发"></a>C/Cpp开发</h1><p><a href="https://www.jetbrains.com/clion/">Clion</a></p><p>VSC配置cpp开发环境也试过,繁琐.Mac 下的Xcode也用过,感觉一般, 不得不说,jetbrains做的IDE,真香.</p><h1 id="Java开发"><a href="#Java开发" class="headerlink" title="Java开发"></a>Java开发</h1><p><a href="https://www.jetbrains.com/idea/">IntellijIdea</a><br><a href="https://www.eclipse.org/downloads/">Eclipse</a><br><a href="https://netbeans.apache.org/download/index.html">NetBeans</a></p><p>目前在用的就是 IntellijIdea 了,其他的基本不用了.只有一个 NetBeans 在某些场景下是有优势的,那就是JavaSE GUI开发的时候.</p><h1 id="清除广告"><a href="#清除广告" class="headerlink" title="清除广告"></a>清除广告</h1><p><a href="https://apps.apple.com/us/app/adblock-pro-for-safari/id1018301773">AdBlock Pro</a> 清除Safari广告用;<br>看动漫太多的广告了,Chrome 上清除广告很容易,Safari就只能依赖这个plugin了.</p><h1 id="database"><a href="#database" class="headerlink" title="database"></a>database</h1><p><a href="https://www.jetbrains.com/datagrip/">DataGrip</a><br>一个客户端,支持查看所有的数据库,jetbrains太香了.</p><h1 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h1><p><a href="https://macgrid.app/">Grid</a></p><p>windows 系统有个自动管理窗口的功能,这个软件就是在Mac上实现类似的功能;</p><h1 id="扩展屏幕"><a href="#扩展屏幕" class="headerlink" title="扩展屏幕"></a>扩展屏幕</h1><p><a href="https://github.com/pavlobu/deskreen">Deskreen</a><br>只要有个浏览器就可以实现屏幕的扩展,有时候可以将自己的iPad用上.</p><h1 id="statusbar-隐藏图标"><a href="#statusbar-隐藏图标" class="headerlink" title="statusbar 隐藏图标"></a>statusbar 隐藏图标</h1><p><a href="https://github.com/Mortennn/Dozer">Dozer</a><br><a href="https://www.macbartender.com/">Bartender</a></p><p>Dozer是开源的,Bartender 是收费的.</p><h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h1><p><a href="https://app.diagrams.net/">draw.io</a><br><a href="https://www.omnigroup.com/omnigraffle/">OmniGraffle</a></p><p>draw.io 比较简单;<br>OmniGraffle 是收费的,而且入门的门槛很高.但是自定义很方便;</p><h1 id="屏幕用时记录"><a href="#屏幕用时记录" class="headerlink" title="屏幕用时记录"></a>屏幕用时记录</h1><p><a href="https://apps.apple.com/cn/app/eye-monitor/id1527031341">Eye Monitor</a><br><a href="https://www.rescuetime.com/">RescueTime</a></p><p>第一个是用来当前屏幕用了多久,提醒使用者可以休息了;<br>RescueTime 可以将所有使用的时间进行归类,每星期一封邮件,也可以在控制台上查看;</p><h1 id="笔记类"><a href="#笔记类" class="headerlink" title="笔记类"></a>笔记类</h1><p><a href="https://www.focalboard.com/">Focalboard</a><br><a href="https://www.notion.so/">Notion </a><br><a href="https://www.wolai.com/">我来</a><br><a href="https://www.onenote.com/hrd">OneNote</a><br><a href="https://www.yuque.com/dashboard">语雀</a></p><p>OneNote 传统的笔记本,最好的点在于,他就像一个实体的笔记本概念.<br>Notion 现在很火爆的笔记本,可以实现很多的功能,报表,看板,自定义数据库等等;<br>Focalboard 作为Notion的开源替代版本;最重要是有看板;<br>我来是国产的notion,目前还有待完善;<br>语雀是蚂蚁金服出品,传统的笔记当中做的比较完善的,加上在线的Markdown渲染的很好,有免费的cdn,速度很快;</p><h1 id="破解反编译"><a href="#破解反编译" class="headerlink" title="破解反编译"></a>破解反编译</h1><p>Hopper Disassembler<br>IDA Pro 7.0</p><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><p>Microsoft Edge<br>chrome<br>Firefox<br>TorBrowser</p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>Microsoft To Do</p><h1 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h1><p>NeteaseMusic</p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>Postman</p><h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><p><a href="https://zh.snipaste.com/">Snipaste</a><br>截图软件很多,偏爱他的原因是截图完之后,可以将截出来的图片pin在屏幕上,常有需要对比图片的时候,这样可以pin多个,放在一起对比.</p><h1 id="快捷打开"><a href="#快捷打开" class="headerlink" title="快捷打开"></a>快捷打开</h1><p><a href="https://shortcatapp.com/">Shortcat</a><br>快速触达系统的功能的快捷方式.</p><h1 id="聊天"><a href="#聊天" class="headerlink" title="聊天"></a>聊天</h1><p>Telegram Lite</p><h1 id="Finder"><a href="#Finder" class="headerlink" title="Finder"></a>Finder</h1><p><a href="https://totalfinder.binaryage.com/">TotalFinder</a><br>增加Mac自带的Finder;</p><h1 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h1><p>ShadowsocksX-NG</p><h1 id="将网页转成App"><a href="#将网页转成App" class="headerlink" title="将网页转成App"></a>将网页转成App</h1><p><a href="https://www.bzgapps.com/unite">Unite</a><br>可以将一个网页转换成Mac App,其实他还是一个内嵌的网页;方便点,我用来将微信读书生成一个App;</p><h1 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h1><p><a href="https://theunarchiver.com/">The Unarchiver</a><br>免费好用,支持很多的压缩方式;</p><h1 id="阅读源码"><a href="#阅读源码" class="headerlink" title="阅读源码"></a>阅读源码</h1><p><a href="https://www.scitools.com/">Understand</a><br>Windows下有一个叫SourceInsight的神奇软件,Understand是Mac的SourceInsight;</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>Visual Studio Code</p><h1 id="调试网络"><a href="#调试网络" class="headerlink" title="调试网络"></a>调试网络</h1><p>Wireshark</p><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p>XMind ZEN</p><h1 id="显示状态栏"><a href="#显示状态栏" class="headerlink" title="显示状态栏"></a>显示状态栏</h1><p><a href="https://github.com/gao-sun/eul">eul</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一张思维导图看 Java 【持续迭代】</title>
    <link href="/2021/07/03/java_summary/"/>
    <url>/2021/07/03/java_summary/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>总结自己的 java 知识，按照编码 -&gt; 运行，画了一张图，xmind 导出的图比较大，后续持续更新，迭代这部分的内容。</p><p><img src="/img/java/java_summary.png" alt="java"></p><div class="note note-info">            <p>下面是一些常见的知识,将会慢慢补充进思维导图内</p>          </div><p style="text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;">下面是一些常见的知识,将会慢慢补充进思维导图内</p><h1 id="HashMap-原理"><a href="#HashMap-原理" class="headerlink" title="HashMap 原理"></a>HashMap 原理</h1><p>可参考的文章</p><ul><li><a href="https://zhuanlan.zhihu.com/p/200997545">HashMap原理，循环链表是如何产生的</a></li><li> <a href="https://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/">HashMap? ConcurrentHashMap? 相信看完这篇没人能难住你！</a></li><li><a href="https://zhuanlan.zhihu.com/p/263523069">转换红黑树的阈值为何设置为8</a></li><li><a href="https://hg.openjdk.org/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/util/HashMap.java#l174">官方comment</a></li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li>Java 8 之前：数组 + 链表</li><li>Java 8 之后：数组 + 链表；</li></ul><h3 id="存储的对象"><a href="#存储的对象" class="headerlink" title="存储的对象"></a>存储的对象</h3><h3 id="Java7"><a href="#Java7" class="headerlink" title="Java7"></a>Java7</h3><p>Entry&lt;K,V&gt;[] table，Entry 是 HashMap 中的一个静态内部类，它有key、value、next、hash（key的hashcode）成员变量。</p><h3 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h3><ul><li>TREEIFY_THRESHOLD 用于判断是否需要将链表转换为红黑树的阈值。</li><li>HashEntry 修改为 Node。</li></ul><h2 id="负载因子："><a href="#负载因子：" class="headerlink" title="负载因子："></a>负载因子：</h2><ul><li>给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 16 * 0.75 = 12 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。</li><li>因此通常建议能提前预估 HashMap 的大小最好，尽量的减少扩容带来的性能损耗。</li></ul><h2 id="put-操作"><a href="#put-操作" class="headerlink" title="put 操作"></a>put 操作</h2><h3 id="Java7-1"><a href="#Java7-1" class="headerlink" title="Java7"></a>Java7</h3><ul><li>  判断当前数组是否需要初始化。</li><li>  如果 key 为空，则 put 一个空值进去。</li><li>  根据 key 计算出 hashcode。</li><li>  根据计算出的 hashcode 定位出所在桶。</li><li>  如果桶是一个链表则需要遍历判断里面的 hashcode、key 是否和传入 key 相等，如果相等则进行覆盖，并返回原来的值。</li><li> 如果桶是空的，说明当前位置没有数据存入，新增一个 Entry 对象写入当前位置。</li><li>当调用 addEntry 写入 Entry 时需要判断是否需要扩容。如果需要就进行两倍扩充，并将当前的 key 重新 hash 并定位。而在 createEntry 中会将当前位置的桶传入到新建的桶中，如果当前桶有值就会在位置形成链表。</li></ul><h3 id="Java8-1"><a href="#Java8-1" class="headerlink" title="Java8"></a>Java8</h3><blockquote><p>当 Hash 冲突严重时，在桶上形成的链表会变的越来越长，这样在查询时的效率就会越来越低；时间复杂度为 O(N)，因此 1.8 中重点优化了这个查询效率。</p></blockquote><ul><li>  判断当前桶是否为空，空的就需要初始化（在resize方法 中会判断是否进行初始化）。</li><li>  根据当前 key 的 hashcode 定位到具体的桶中并判断是否为空，为空表明没有 Hash 冲突就直接在当前位置创建一个新桶即可。</li><li>  如果当前桶有值（ Hash 冲突），那么就要比较当前桶中的 key、key 的 hashcode 与写入的 key 是否相等，相等就赋值给 e,在第 8 步的时候会统一进行赋值及返回。</li><li>  如果当前桶为红黑树，那就要按照红黑树的方式写入数据。</li><li>  如果是个链表，就需要将当前的 key、value 封装成一个新节点写入到当前桶的后面（形成链表）。</li><li>  接着判断当前链表的大小是否大于预设的阈值，大于时就要转换为红黑树。</li><li>  如果在遍历过程中找到 key 相同时直接退出遍历。</li><li>  如果 e != null 就相当于存在相同的 key,那就需要将值覆盖。</li><li>  最后判断是否需要进行扩容。</li></ul><h2 id="get-操作"><a href="#get-操作" class="headerlink" title="get 操作"></a>get 操作</h2><h3 id="Java7-2"><a href="#Java7-2" class="headerlink" title="Java7"></a>Java7</h3><ul><li>  首先也是根据 key 计算出 hashcode，然后定位到具体的桶中。</li><li>  判断该位置是否为链表。</li><li>  不是链表就根据 key、key 的 hashcode 是否相等来返回值。</li><li>  为链表则需要遍历直到 key 及 hashcode 相等时候就返回值。</li><li>  啥都没取到就直接返回 null 。<h3 id="Java8-2"><a href="#Java8-2" class="headerlink" title="Java8"></a>Java8</h3></li><li>  首先将 key hash 之后取得所定位的桶。</li><li>  如果桶为空则直接返回 null 。</li><li>  否则判断桶的第一个位置(有可能是链表、红黑树)的 key 是否为查询的 key，是就直接返回 value。</li><li>  如果第一个不匹配，则判断它的下一个是红黑树还是链表。</li><li>  红黑树就按照树的查找方式返回值。</li><li>  不然就按照链表的方式遍历匹配返回值。</li></ul><h2 id="HashMap-自身的缺陷"><a href="#HashMap-自身的缺陷" class="headerlink" title="HashMap 自身的缺陷"></a>HashMap 自身的缺陷</h2><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>修改为红黑树之后查询效率直接提高到了 O(logn)。但是 HashMap 原有的问题也都存在，比如在并发场景下使用时容易出现死循环：<br>在 HashMap 扩容的时候会调用 resize() 方法，就是这里的并发操作容易在一个桶上形成环形链表；这样当获取一个不存在的 key 时，计算出的 index 正好是环形链表的下标就会出现死循环：在 1.7 中 hash 冲突采用的头插法形成的链表，在并发条件下会形成循环链表，一旦有查询落到了这个链表上，当获取不到值时就会死循环。</p><h3 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h3><p>形成循环链表后，一旦有查询落到了这个链表上，当获取不到值时就会死循环。</p><h3 id="非线程安全"><a href="#非线程安全" class="headerlink" title="非线程安全"></a>非线程安全</h3><p>就如上所说的两个问题，都是并发导致的问题。</p><h2 id="扩容相关"><a href="#扩容相关" class="headerlink" title="扩容相关"></a>扩容相关</h2><h3 id="何时扩容"><a href="#何时扩容" class="headerlink" title="何时扩容"></a>何时扩容</h3><p>当向容器添加元素的时候，会判断当前容器的元素个数，如果大于等于阈值—即大于当前数组的长度乘以加载因子的值的时候，就要自动扩容。</p><h3 id="扩容的算法是什么"><a href="#扩容的算法是什么" class="headerlink" title="扩容的算法是什么"></a>扩容的算法是什么</h3><p>扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组。</p><h2 id="Hashmap如何解决散列碰撞？"><a href="#Hashmap如何解决散列碰撞？" class="headerlink" title="Hashmap如何解决散列碰撞？"></a>Hashmap如何解决散列碰撞？</h2><p>Java中HashMap是利用“拉链法”处理HashCode的碰撞问题。在调用HashMap的put方法或get方法时，都会首先调用hashcode方法，去查找相关的key，当有冲突时，再调用equals方法。hashMap基于hasing原理，我们通过put和get方法存取对象。当我们将键值对传递给put方法时，他调用键对象的hashCode()方法来计算hashCode，然后找到bucket（哈希桶）位置来存储对象。当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象。HashMap使用链表来解决碰撞问题，当碰撞发生了，对象将会存储在链表的下一个节点中。hashMap在每个链表节点存储键值对对象。当两个不同的键却有相同的hashCode时，他们会存储在同一个bucket位置的链表中。键对象的equals()来找到键值对。</p><blockquote><p>额外补充，其他解决办法是，<br>开放地址法，但是这个方法浪费存储空间，空间利用率很低。适用于规模很小的场景；<br>再hash法，进行二次、三次hash；</p></blockquote><h2 id="数组大小为何是-2-的倍数"><a href="#数组大小为何是-2-的倍数" class="headerlink" title="数组大小为何是 2 的倍数"></a>数组大小为何是 2 的倍数</h2><ol><li>与运算比或运算效率高，提高速度；</li><li>减少hash冲突；</li></ol><p>整体为了提高散列的均匀性。</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="为何需要转换成红黑树"><a href="#为何需要转换成红黑树" class="headerlink" title="为何需要转换成红黑树"></a>为何需要转换成红黑树</h3><p>每次遍历一个链表，平均查找的时间复杂度是 O(n)，n 是链表的长度。红黑树有和链表不一样的查找性能，由于红黑树有自平衡的特点，可以防止不平衡情况的发生，所以可以始终将查找的时间复杂度控制在 O(log(n))。最初链表还不是很长，所以可能 O(n) 和 O(log(n)) 的区别不大，但是如果链表越来越长，那么这种区别便会有所体现。所以为了提升查找性能，需要把链表转化为红黑树的形式。</p><h3 id="那为什么不一开始就用红黑树，反而要经历一个转换的过程呢？"><a href="#那为什么不一开始就用红黑树，反而要经历一个转换的过程呢？" class="headerlink" title="那为什么不一开始就用红黑树，反而要经历一个转换的过程呢？"></a>那为什么不一开始就用红黑树，反而要经历一个转换的过程呢？</h3><p>因为树节点(TreeNodes)所占的空间是普通节点Node的两倍，所以我们只有在桶中包含足够的节点时才使用树节点(请参阅TREEIFY_THRESHOLD)(只有在同一个哈希桶中的节点数量大于等于TREEIFY_THRESHOLD时，才会将该桶中原来的链式存储的节点转化为红黑树的树节点)。并且当桶中的节点数过少时 (由于移除或调整)，树节点又会被转换回普通节点(当桶中的节点数量过少时，原来的红黑树树节点又会转化为链式存储的普通节点)，以便节省空间。　　</p><h3 id="阈值的选取"><a href="#阈值的选取" class="headerlink" title="阈值的选取"></a>阈值的选取</h3><blockquote><p>体现了时间和空间平衡的思想</p></blockquote><p>如果 hashCode 分布良好，也就是 hash 计算的结果离散好的话，那么红黑树这种形式是很少会被用到的，因为各个值都均匀分布，很少出现链表很长的情况。在理想情况下，桶(bins)中的节点数概率(链表长度)符合泊松分布，当桶中节点数(链表长度)为 8 的时候，概率仅为 0.00000006。这是一个小于千万分之一的概率，通常我们的 Map 里面是不会存储这么多的数据的，所以通常情况下，并不会发生从链表向红黑树的转换。</p><p>阈值为何是 8 和 6，这个是一个概率问题，是用泊松分布计算出来。</p><h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><ul><li><a href="https://mp.weixin.qq.com/s/My4P_BBXDnAGX1gh630ZKw">可以参考的文章</a><br>HashTable是一个线程安全的类，它使用synchronized来锁住整张Hash表来实现线程安全，即每次锁住整张表让线程独占，相当于所有线程进行读写时都去竞争一把锁，导致效率非常低下。ConcurrentHashMap可以做到读取数据不加锁，并且其内部的结构可以让其在进行写操作的时候能够将锁的粒度保持地尽量地小，允许多个修改操作并发进行，其关键在于使用了<strong>锁分段技术</strong>。它使用了多个锁来控制对hash表的不同部分进行的修改。对于JDK1.7版本的实现, ConcurrentHashMap内部使用段(Segment)来表示这些不同的部分，每个段其实就是一个小的Hashtable，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。JDK1.8的实现降低锁的粒度，<strong>JDK1.7版本锁的粒度是基于Segment的</strong>，包含多个HashEntry，而<strong>JDK1.8锁的粒度就是HashEntry（首节点）</strong>。<br>JAVA7之前ConcurrentHashMap主要采用锁机制，在对某个Segment进行操作时，将该Segment锁定，不允许对其进行非查询操作，而在<strong>JAVA8之后采用CAS无锁算法</strong>，这种乐观操作在完成前进行判断，如果符合预期结果才给予执行，对并发操作提供良好的优化.</li></ul><h2 id="Put"><a href="#Put" class="headerlink" title="Put"></a>Put</h2><h3 id="Java-7"><a href="#Java-7" class="headerlink" title="Java 7"></a>Java 7</h3><p>首先是通过 key 定位到 Segment，之后在对应的 Segment 中进行具体的 put。</p><ul><li> 虽然 HashEntry 中的 value 是用 volatile 关键词修饰的，但是并不能保证并发的原子性，所以 put 操作时仍然需要加锁处理。</li><li> 首先第一步的时候会尝试获取锁，如果获取失败肯定就有其他线程存在竞争，则利用 scanAndLockForPut() 自旋获取锁:</li><li>尝试自旋获取锁。 如果重试的次数达到了 MAX_SCAN_RETRIES 则改为阻塞锁获取，保证能获取成功。</li><li>将当前 Segment 中的 table 通过 key 的 hashcode 定位到 HashEntry。</li><li>遍历该 HashEntry，如果不为空则判断传入的 key 和当前遍历的 key 是否相等，相等则覆盖旧的 value。</li><li>为空则需要新建一个 HashEntry 并加入到 Segment 中，同时会先判断是否需要扩容。</li><li>最后会使用unlock()解除当前 Segment 的锁。</li></ul><h3 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h3><ul><li>  根据 key 计算出 hashcode 。</li><li>  判断是否需要进行初始化。</li><li>  如果当前 key 定位出的 Node 为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。</li><li>  如果当前位置的 hashcode == MOVED == -1,则需要进行扩容。</li><li>  如果都不满足，则利用 synchronized 锁写入数据。</li><li>  最后，如果数量大于 TREEIFY_THRESHOLD 则要转换为红黑树。</li></ul><h2 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h2><h3 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h3><ul><li>  只需要将 Key 通过 Hash 之后定位到具体的 Segment ，再通过一次 Hash 定位到具体的元素上。</li><li>  由于 HashEntry 中的 value 属性是用 volatile 关键词修饰的，保证了内存可见性，所以每次获取时都是最新值。</li><li>  ConcurrentHashMap 的 get 方法是非常高效的，因为整个过程都不需要加锁。</li></ul><h3 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h3><ul><li>  根据计算出来的 hashcode 寻址，如果就在桶上那么直接返回值。</li><li>  如果是红黑树那就按照树的方式获取值。</li><li>  就不满足那就按照链表的方式遍历获取值。</li></ul><h1 id="Java-中的-map-与-Android-的-SparseArray-的比较"><a href="#Java-中的-map-与-Android-的-SparseArray-的比较" class="headerlink" title="Java 中的 map 与 Android 的 SparseArray 的比较"></a>Java 中的 map 与 Android 的 SparseArray 的比较</h1><p>SparseArray 比HashMap更省内存，在某些条件下性能更好，主要是因为它避免了对key的自动装箱（int转为Integer类型），它内部则是通过两个数组来进行数据存储的，一个存储 key，另外一个存储 value，为了优化性能，它内部对数据还采取了压缩的方式来表示稀疏数组的数据，从而节约内存空间，我们从源码中可以看到key和value分别是用数组表示：</p><p>private int[] mKeys;<br>private Object[] mValues;</p><p>key 的下标 index 和 values 的下标 index 是一一对应的，在查询的时候，可以根据 key 进行二分查找，查找到 index 就是 values 的下标，效率较高。</p><h2 id="ArrayMap"><a href="#ArrayMap" class="headerlink" title="ArrayMap"></a>ArrayMap</h2><p>还有一个类是 ArrayMap，结构也是两个数组，一个存储 hash，一个存储  value；<br>查询的时候，也是二分查找，查找数组里存储的hash值和 key 的 hash 值一致的 下标；</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><ul><li>0-1,000时，SparseArray 具备更好的性能：</li></ul><p>1、如果key的类型已经确定为int类型，那么使用SparseArray，因为它避免了自动装箱的过程，如果key为long类型，它还提供了一个LongSparseArray来确保key为long类型时的使用<br>2、如果key类型为其它的类型，则使用ArrayMap。</p><ul><li><p>1,000 - 10,000<br>hashmap 具备更好的插入优势；SparseArray 具备更好的查询优势；</p></li><li><p>10,000 以上<br>hashmap 优势降低。</p></li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="创建型（5）"><a href="#创建型（5）" class="headerlink" title="创建型（5）"></a>创建型（5）</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><a href="https://www.cnblogs.com/xz816111/p/8470048.html">参考的文章</a></p><p>双重检查锁的意义</p><ul><li>外层的判空，是为了提升性能；</li><li>内层的加锁是为了原子话；</li><li>变量 volatile 是为了防止指令重排；</li></ul><p>通过静态内部类实现单例模式有哪些优点？</p><ul><li>不用 synchronized ，节省时间。</li><li>调用 getInstance() 的时候才会创建对象，不调用不创建，节省空间，这有点像传说中的懒汉式。</li></ul><p>builder 模式，工厂模式， 抽象工厂模式</p><h2 id="结构型（7）"><a href="#结构型（7）" class="headerlink" title="结构型（7）"></a>结构型（7）</h2><p>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</p><h2 id="行为型（11）"><a href="#行为型（11）" class="headerlink" title="行为型（11）"></a>行为型（11）</h2><p>策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><h2 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h2><blockquote><p>开闭原则是基础</p></blockquote><h3 id="开放封闭原则（Open-Close-Principle）"><a href="#开放封闭原则（Open-Close-Principle）" class="headerlink" title="开放封闭原则（Open Close Principle）"></a>开放封闭原则（Open Close Principle）</h3><blockquote><p>对扩展开放，对修改封闭</p></blockquote><ul><li>  原则思想：尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化</li><li>  描述：一个软件产品在生命周期内，都会发生变化，既然变化是一个既定的事实，我们就应该在设计的时候尽量适应这些变化，以提高项目的稳定性和灵活性。</li><li>  优点：单一原则告诉我们，每个类都有自己负责的职责，里氏替换原则不能破坏继承关系的体系。</li></ul><h3 id="里氏代换原则（Liskov-Substitution-Principle）"><a href="#里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏代换原则（Liskov Substitution Principle）"></a>里氏代换原则（Liskov Substitution Principle）</h3><blockquote><p>高度抽象的继承体系，即使增加子类，不需要修改父类</p></blockquote><ul><li>  原则思想：使用的基类可以在任何地方使用继承的子类，完美的替换基类。</li><li>  大概意思是：子类可以扩展父类的功能，但不能改变父类原有的功能。子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法，子类中可以增加自己特有的方法。</li><li>  优点：增加程序的健壮性，即使增加了子类，原有的子类还可以继续运行，互不影响。</li></ul><h3 id="依赖倒转原则（Dependence-Inversion-Principle）"><a href="#依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒转原则（Dependence Inversion Principle）"></a>依赖倒转原则（Dependence Inversion Principle）</h3><blockquote><p>面向接口编程，接口需要高度的抽象</p></blockquote><ul><li>  依赖倒置原则的核心思想是面向接口编程.</li><li>  依赖倒转原则要求我们在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，</li><li>  这个是开放封闭原则的基础，具体内容是：对接口编程，依赖于抽象而不依赖于具体。</li></ul><h3 id="接口隔离原则（Interface-Segregation-Principle）‘"><a href="#接口隔离原则（Interface-Segregation-Principle）‘" class="headerlink" title="接口隔离原则（Interface Segregation Principle）‘"></a>接口隔离原则（Interface Segregation Principle）‘</h3><blockquote><p>接口的信息要合适，不需要含有复杂冗余的方法</p></blockquote><ul><li>  这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</li><li>  例如：支付类的接口和订单类的接口，需要把这俩个类别的接口变成俩个隔离的接口</li></ul><h3 id="迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="迪米特法则（最少知道原则）（Demeter Principle）"></a>迪米特法则（最少知道原则）（Demeter Principle）</h3><blockquote><p>知道的越少越好</p></blockquote><ul><li>  原则思想：一个对象应当对其他对象有尽可能少地了解，简称类间解耦</li><li>  大概意思就是一个类尽量减少自己对其他对象的依赖，原则是低耦合，高内聚，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。</li><li>  优点：低耦合，高内聚。</li></ul><h3 id="单一职责原则（Principle-of-single-responsibility）"><a href="#单一职责原则（Principle-of-single-responsibility）" class="headerlink" title="单一职责原则（Principle of single responsibility）"></a>单一职责原则（Principle of single responsibility）</h3><blockquote><p>聚焦</p></blockquote><ul><li>  原则思想：一个方法只负责一件事情。</li><li>  描述：单一职责原则很简单，一个方法 一个类只负责一个职责，各个职责的程序改动，不影响其它程序。 这是常识，几乎所有程序员都会遵循这个原则。</li><li>  优点：降低类和类的耦合，提高可读性，增加可维护性和可拓展性，降低可变性的风险。</li></ul><h1 id="动态代理原理及实现"><a href="#动态代理原理及实现" class="headerlink" title="动态代理原理及实现"></a>动态代理原理及实现</h1><ul><li>静态代理通常只代理一个类，动态代理是代理一个接口下的多个实现类。</li><li>静态代理事先知道要代理的是什么，而动态代理不知道要代理什么东西，只有在运行时才知道。</li></ul><p>动态代理是实现 JDK 里的 InvocationHandler 接口的 invoke 方法，但注意的是代理的是接口，也就是你的业务类必须要实现接口，通过 Proxy 里的 newProxyInstance 得到代理对象。还有一种动态代理 CGLIB，代理的是类，不需要业务类继承接口，通过派生的子类来实现代理。通过在运行时，动态修改字节码达到修改类的目的。AOP 编程就是基于动态代理实现的，比如著名的 Spring 框架、Hibernate 框架等等都是动态代理的使用例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>List&lt;String&gt; proxyInstance =<br>        (List&lt;String&gt;) Proxy.newProxyInstance(list.getClass().getClassLoader(),<br>                list.getClass().getInterfaces(),<br>                <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                        <span class="hljs-keyword">return</span> method.invoke(list, args);<br>                    &#125;<br>                &#125;);<br>    proxyInstance.add(<span class="hljs-string">&quot;你好&quot;</span>);<br>    System.out.println(list);<br></code></pre></td></tr></table></figure><ul><li><p>问题1：为什么 JDK 动态代理要基于接口实现？而不是基于继承来实现？<br>解答：因为 JDK 动态代理生成的对象默认是继承 Proxy ，Java 不支持多继承，所以 JDK 动态代理要基于接口来实现。</p></li><li><p>问题2：JDK 动态代理中，目标对象调用自己的另一个方法，会经过代理对象么？<br>解答：内部调用方法使用的对象是目标对象本身，被调用的方法不会经过代理对象。</p></li></ul><ul><li>应用<br>Retrofit 应用：Retrofit 通过动态代理，为我们定义的请求接口都生成一个动态代理对象，实现请求</li></ul><h1 id="静态嵌套类和内部类的区别"><a href="#静态嵌套类和内部类的区别" class="headerlink" title="静态嵌套类和内部类的区别"></a>静态嵌套类和内部类的区别</h1><ul><li>静态嵌套类：Static Nested Class是被声明为静态（static）的内部类，它可以不依赖于外部类实例被实例化。</li><li>内部类：需要在外部类实例化后才能实例化，其语法看起来挺诡异的。</li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。</p><p>Java 反射主要提供以下功能：</p><ul><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li><li>在运行时调用任意一个对象的方法</li></ul><p>重点：是运行时而不是编译时。</p><p>要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>三种类型的注解</p><ul><li>SOURCE：存在于源码级别，编译期可以读取，但是不会保存到 class 文件中；</li><li>CLASS：编译级别，存在于 class 文件中，但是运行时会被丢弃；</li><li>RUNTIME：存储在 class 文件中，并且 vm 运行时也会保留，可以通过反射获取；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Description &#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;](&lt;<span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> CustomAnnotation&#123;<br>&#125;&gt;)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SupportedAnnotationTypes(&quot;com.example.CustomAnnotation&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompileTimeAnnotationProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProcessor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">process</span><span class="hljs-params">(Set&lt;? extends TypeElement&gt; annotations, </span></span><br><span class="hljs-params"><span class="hljs-function">                           RoundEnvironment roundEnv)</span> </span>&#123;<br>        Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(CustomAnnotation.class);<br>        <span class="hljs-keyword">for</span>(Element e : elements)&#123;<br>            <span class="hljs-keyword">if</span>(!e.getClass().equals(ParticularType.class))&#123;<br>                processingEnv.getMessager().printMessage(Kind.ERROR,<br>                     <span class="hljs-string">&quot;@CustomAnnotation annotated fields must be of type ParticularType&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><blockquote><p>参数化类型，操作的类型以参数的形式传递。可以用于类、接口、方法中。<br>目的是为了安全。</p></blockquote><p>型是Java SE1.5的新特性，<strong>泛型的本质是参数化类型，也就是说所操的数据类型被指定为一个参数</strong>。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是<strong>安全简单</strong>。</p><p>在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者实际参数类型可以预知的情况下进行的。对于强制类型换错误的情况，编译器可能不提示错误，在运行的时候出现异常，这是一个<strong>安全隐患</strong>。</p><p>泛型的好处是在编译的时候检查类型安全，并且所有的转换都是自动和隐式的，提高代码的重用率。</p><p>1、泛型的类型参数只能是类类型（包括自定义类），不是简单类型。</p><p>2、同一种泛型可以对应多个版本（因为参数类型是不确的），不同版本的泛型类实例是不兼容的。</p><p>3、泛型的类型参数可以有多个。</p><p>4、泛型的参数类型可以使用 extends 语句，例如。习惯上称为“有界类型”。</p><p>5、泛型的参数类型还可以是通配符类型。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; classType = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="泛型擦除以及相关的概念"><a href="#泛型擦除以及相关的概念" class="headerlink" title="泛型擦除以及相关的概念"></a>泛型擦除以及相关的概念</h2><blockquote><p>泛型的信息只存在编译期间，等到进入 jvm 时候，已经被擦除；<br>擦除的时候，如果有指定上限，则使用上限，没指定，则使用 object；</p></blockquote><p>泛型信息只存在代码编译阶段，在进入JVM之前，与泛型关的信息都会被擦除掉。</p><p>在类型擦除的时候，如果泛型类里的类型参数没有指定上限，则会被转成Object类型，如果指定了上限，则会被传转换成对应的类型上限。</p><p>Java中的泛型基本上都是在编译器这个层次来实现的。生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候擦除掉。这个过程就称为类型擦除。</p><p>类型擦除引起的问题及解决方法：</p><p>1、先检查，在编译，以及检查编译的对象和引用传递的题</p><p>2、自动类型转换</p><p>3、类型擦除与多态的冲突和解决方法</p><p>4、泛型类型变量不能是基本数据类型</p><p>5、运行时类型查询</p><p>6、异常中使用泛型的问题</p><p>7、数组（这个不属于类型擦除引起的问题）</p><p>9、类型擦除后的冲突</p><p>10、泛型在静态方法和静态类中的问题</p><h2 id="协变和逆变；大名鼎鼎的-PECS-（producer-extend，consumer-super），往两头扩散；"><a href="#协变和逆变；大名鼎鼎的-PECS-（producer-extend，consumer-super），往两头扩散；" class="headerlink" title="协变和逆变；大名鼎鼎的 PECS （producer extend，consumer super），往两头扩散；"></a>协变和逆变；大名鼎鼎的 PECS （producer extend，consumer super），往两头扩散；</h2><p>将 collection 视为 product 还是 consumer</p><h1 id="四种引用"><a href="#四种引用" class="headerlink" title="四种引用"></a>四种引用</h1><ul><li><p>强引用：<br>使用最普遍的引用。只要引用链没有断开，强引用就不会断开。当内存空间不足，抛出OutOfMemoryError终止程序也不会回收具有强引用的对象。通过将对象设置为null来弱化引用,使其被回收</p></li><li><p>软引用<br>对象处在有用但非必须的状态。只有当内存空间不足时, GC会回收该引用的对象的内存。可以用来实现高速缓存（作用）–比如网页缓存、图片缓存。</p></li><li><p>弱引用<br>弱引用就是只要JVM垃圾回收器发现了它，就会将之回收。非必须的对象,比软引用更弱一些。GC时会被回被回收的概率也不大,因为GC线程优先级比较低。适用于引用偶尔被使用且不影响垃圾收集的对象。</p></li><li><p>虚引用<br>不会决定对象的生命周期。任何时候都可能被垃圾收集器回收。跟踪对象被垃圾收集器回收的活动,起哨兵作用。</p></li></ul><p>必须和引用队列ReferenceQueue联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会把这个虚引用加入到与之 关联的引用队列中。</p><p>程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。用来跟踪对象的 gc 活动。</p><h2 id="LeakCanary-的应用"><a href="#LeakCanary-的应用" class="headerlink" title="LeakCanary 的应用"></a>LeakCanary 的应用</h2><p>可以参考的文章</p><ol><li><a href="https://blog.csdn.net/c10WTiybQ1Ye3/article/details/122954616">通过一个 Java 演示原理</a>；</li></ol><p>LeakCanary 的检测原理是：</p><ul><li>弱引用对象在其包装对象被回收后（弱引用对象创建时，传入了引用队列），该弱引用对象会被加到引用队列中（ReferenceQueue）。</li><li>通过在 ReferenceQueue 中检测是否有目标对象的弱引用对象存在，即可判断目标对象是否被回收。如果在队列中，则说明是回收了，不存在内存泄漏，反之则存在内存泄漏；</li></ul><ol><li><p>为什么要放入空闲消息里面去执行？<br>因为gc就是发生在系统空闲的时候的，所以当空闲消息被执行的时候，大概率已经执行过一次gc了。</p></li><li><p>为什么在空闲消息可以直接检测activity是否被回收？<br>跟问题1一样，空闲消息被执行的时候，大概率已经发生过gc，所以可以检测下gc后activity是否被回收。</p></li><li><p>如果没有被回收，应该是已经泄漏了啊，为什么再次执行了一次gc，然后再去检测？<br>根据问题2，空闲消息被执行的时候，大概率已经发生过gc，但是也可能还没发生gc，那么此时activity没有被回收是正常的，所以我们手动再gc一下，确保发生了gc，再去检测activity是否被回收，从而100%的确定是否发生了内存泄漏。</p></li></ol><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>可以参考的文章</p><ol><li><a href="https://www.cnblogs.com/hongdada/p/12108611.html">ThreadLocal原理及魔数0x61c88647</a></li></ol><p>ThreadLocal是一种线程封闭技术。ThreadLocal提供了get和set等访问接口或方法，这些方法为每个使用该变量的线程都<strong>存有一份独立的副本</strong>，因此get总是返回由<strong>当前执行线程</strong>在调用set时设置的最新值。</p><p>从ThreadLocal的set和get方法可以看出，它们所操作的对象都是当前线程的<strong>localValues对象的table数组</strong>，因此在不同线程中访问同一个ThreadLocal的set和get方法，它们对ThreadLocal所做的<strong>读写操作仅限于各自线程的内部</strong>，这就是为什么ThreadLocal可以在多个线程中互不干扰地存储和修改数据。</p><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Integer&gt; threadIds = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<br>Integer id = threadIds.get();  <br><span class="hljs-keyword">if</span> (id == <span class="hljs-keyword">null</span>) &#123;  <br>    id = nextThreadId.getAndIncrement();  <br>    threadIds.set(id);  <br>&#125;<br></code></pre></td></tr></table></figure><p>一个 threadlocal 只能维护一个变量；等价于每一个线程私有变量都需要  new 一个 threadlocal 实例。</p><h2 id="内存泄漏问题"><a href="#内存泄漏问题" class="headerlink" title="内存泄漏问题"></a>内存泄漏问题</h2><p>threadLocalMap 使用 ThreadLocal 的弱引用作为 key，如果一个 ThreadLocal 不存在外部强引用时，Key(ThreadLocal) 势必会被 GC 回收，这样就会导致 ThreadLocalMap 中 key 为 null， 而 value 还存在着强引用，只有 thead 线程退出以后,value 的强引用链条才会断掉。<br>但如果当前线程再迟迟不结束的话，这些 key 为 null 的 Entry 的 value 就会一直存在一条强引用链：</p><p><code>Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value</code></p><p>永远无法回收，造成内存泄漏。</p><p>就比如线程池里面的线程，线程都是复用的，那么之前的线程实例处理完之后，出于复用的目的线程依然存活，所以，ThreadLocal设定的value值被持有，导致内存泄露。</p><h2 id="ThreadLocal-正确的使用方法"><a href="#ThreadLocal-正确的使用方法" class="headerlink" title="ThreadLocal 正确的使用方法"></a>ThreadLocal 正确的使用方法</h2><ul><li>每次使用完 ThreadLocal 都调用它的 remove() 方法清除数据。</li><li>将 ThreadLocal 变量定义成 private static，这样就一直存在 ThreadLocal 的强引用，也就能保证任何时候都能通过 ThreadLocal 的弱引用访问到Entry的value值，进而清除掉 。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>线程间的数据隔离</li><li>在Android中，Looper类就是利用了ThreadLocal的特性，保证每个线程只存在一个Looper对象。</li><li>当某些数据是<strong>以线程为作用域并且不同线程具有不同的数据副本</strong>的时候，就可以考虑采用ThreadLocal。</li></ul><h1 id="为什么Java里的匿名内部类只能访问final修饰的外部变量？"><a href="#为什么Java里的匿名内部类只能访问final修饰的外部变量？" class="headerlink" title="为什么Java里的匿名内部类只能访问final修饰的外部变量？"></a>为什么Java里的匿名内部类只能访问final修饰的外部变量？</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TryUsingAnonymousClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useMyInterface</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Integer number = <span class="hljs-number">123</span>;<br>        System.out.println(number);<br><br>        MyInterface myInterface = <span class="hljs-keyword">new</span> MyInterface() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(number);<br>            &#125;<br>        &#125;;<br>        myInterface.doSomething();<br><br>        System.out.println(number);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 编译后的结果</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TryUsingAnonymousClass</span>$1 <span class="hljs-keyword">implements</span> <span class="hljs-title">MyInterface</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TryUsingAnonymousClass <span class="hljs-keyword">this</span>$<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer paramInteger;<br><br>    TryUsingAnonymousClass$<span class="hljs-number">1</span>(TryUsingAnonymousClass <span class="hljs-keyword">this</span>$<span class="hljs-number">0</span>, Integer paramInteger) &#123;<br>        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">this</span>$<span class="hljs-number">0</span> = <span class="hljs-keyword">this</span>$<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">this</span>.paramInteger = paramInteger;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.paramInteger);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>因为匿名内部类最终会编译成一个单独的类，而被该类使用的变量会以构造函数参数的形式传递给该类，例如：Integer paramInteger，这个时候修改传入的参数并不能改动到外部类的变量。这变量相当于脱离了之前类的生命周期。</p><p>如果变量不定义成 final 的，paramInteger在匿名内部类被可以被修改，进而造成和外部的paramInteger不一致的问题，为了避免这种不一致的情况，因次Java规定匿名内部类只能访问final修饰的外部变量。</p><h1 id="ConcurrentModificationException"><a href="#ConcurrentModificationException" class="headerlink" title="ConcurrentModificationException"></a>ConcurrentModificationException</h1><h2 id="出现的原因："><a href="#出现的原因：" class="headerlink" title="出现的原因："></a>出现的原因：</h2><p>在 ArrayList 中，在迭代遍历 list 的过程中，修改了 list 的大小时，就会抛出这个并发修改的异常。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>Collections.synchronizedList(new ArrayList&lt;&gt;())，将对 list 的操作修改为线程安全的，带来的损失是性能损耗；</li><li>改成 CopyOnWriteArrayList （推荐这种）；</li></ul><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * Appends the specified element to the end of this list. * * <span class="hljs-doctag">@param</span> e element to be appended to this list  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; (as specified by &#123;<span class="hljs-doctag">@link</span> Collection#add&#125;)  </span><br><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;  <br>    <span class="hljs-keyword">synchronized</span> (lock) &#123;  <br>        Object[] elements = getArray();  <br>        <span class="hljs-keyword">int</span> len = elements.length;  <br>        Object[] newElements = Arrays.copyOf(elements, len + <span class="hljs-number">1</span>);  <br>        newElements[len] = e;  <br>        setArray(newElements);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>针对修改 list 内容的变更，不在原有的数据上修改，而是进行 copy，修改完成之后，调用<code>setArray(newElements);</code>   重新指向新数据即可。</p><h1 id="java-util-concurrent-包的学习"><a href="#java-util-concurrent-包的学习" class="headerlink" title="java.util.concurrent 包的学习"></a>java.util.concurrent 包的学习</h1><ol><li><a href="https://blog.csdn.net/wbwjx/article/details/57856045">参考资料一</a></li></ol><p><img src="https://img-blog.csdn.net/20170301212847989?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2J3ang=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="脑图"></p><ul><li>  locks部分：显式锁(互斥锁和速写锁)相关；</li><li>  atomic部分：原子变量类相关，是构建非阻塞算法的基础；</li><li>  executor部分：线程池相关；</li><li>  collections部分：并发容器相关；</li><li>  tools部分：同步工具相关，如信号量、闭锁、栅栏等功能；</li></ul><h2 id="一些常见的类"><a href="#一些常见的类" class="headerlink" title="一些常见的类"></a>一些常见的类</h2><h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><p>此接口是一个线程安全的 存取实例的队列。</p><h3 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h3><p>ArrayBlockingQueue 是一个有界的阻塞队列。</p><h3 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h3><p>DelayQueue 对元素进行持有直到一个特定的延迟到期，才能得到运行。注入其中的元素必须实现 java.util.concurrent.Delayed 接口。</p><h3 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h3><p>内部以一个链式结构(链接节点)对其元素进行存储 。</p><h3 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h3><p>一个无界的并发队列，它使用了和类 java.util.PriorityQueue 一样的排序规则。</p><h3 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h3><p>一个特殊的队列，它的内部同时只能够容纳单个元素。</p><ul><li>  如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。</li><li>  如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。</li></ul><h3 id="BlockingDeque"><a href="#BlockingDeque" class="headerlink" title="BlockingDeque"></a>BlockingDeque</h3><p>此接口表示一个线程安全放入和提取实例的双端队列。</p><h3 id="LinkedBlockingDeque"><a href="#LinkedBlockingDeque" class="headerlink" title="LinkedBlockingDeque"></a>LinkedBlockingDeque</h3><p>LinkedBlockingDeque 是一个双端队列，可以从任意一端插入或者抽取元素的队列。</p><h3 id="ConcurrentMap"><a href="#ConcurrentMap" class="headerlink" title="ConcurrentMap"></a>ConcurrentMap</h3><p>一个能够对别人的访问(插入和提取)进行并发处理的 java.util.Map接口。 </p><h3 id="ConcurrentNavigableMap"><a href="#ConcurrentNavigableMap" class="headerlink" title="ConcurrentNavigableMap"></a>ConcurrentNavigableMap</h3><p>一个支持并发访问的 java.util.NavigableMap，它还能让它的子 map 具备并发访问的能力。</p><p>其中有 headMap tailMap  等方法，可以指定范围的子集。</p><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>CountDownLatch 是一个并发构造，它允许一个或多个线程等待一系列指定操作的完成。</p><ul><li>  CountDownLatch 以一个给定的数量初始化。countDown() 每被调用一次，这一数量就减一。</li><li>  通过调用 await() 方法之一，线程可以阻塞等待这一数量到达零。</li></ul><h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><p>CyclicBarrier 类是一种同步机制，它能够对处理一些算法的线程实现同步。<br>循环的障碍物，可以反复使用。</p><p>适用于，执行一组固定大小，且偶尔需要彼此相互等待的线程。</p><p>等待的线程是需要阻塞的，与 CountDownLatch 的区别是，CountDownLatch 只是进行了计数而已，不会被阻塞，CyclicBarrier 的线程是会被阻塞的。</p><h3 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h3><ul><li><a href="https://www.jianshu.com/p/990ae2ab1ae0">参考资料</a></li></ul><p>Exchanger 是 JDK 1.5 开始提供的一个用于两个工作线程之间交换数据的封装工具类，简单说就是一个线程在完成一定的事务后想与另一个线程交换数据，则第一个先拿出数据的线程会一直等待第二个线程，直到第二个线程拿着数据到来时才能彼此交换对应数据。</p><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><p>控制许可集，控制多个共享资源的计数器。</p><ul><li>  保护一个重要(代码)部分防止一次超过 N 个线程进入。</li><li>  在两个线程之间发送信号。</li></ul><ul><li><p>用于保护重要的数据<br>如果你将信号量用于保护一个重要部分，试图进入这一部分的代码通常会首先尝试获得一个许可，然后才能进入重要部分(代码块)，执行完之后，再把许可释放掉。</p></li><li><p>用于通信，在线程之间发送信号</p></li></ul><p>如果你将一个信号量用于在两个线程之间传送信号，通常你应该用一个线程调用 acquire() 方法，而另一个线调用 release() 方法。<br>如果没有可用的许可，acquire() 调用将会阻塞，直到一个许可被另一个线程释放出来。<br>如果无法往信号量释放更多许可时，一个 release() 调用也会阻塞。</p><p>使用场景</p><ol><li>限制同时访问资源的线程总数；</li><li>流量控制；</li></ol><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><ul><li><a href="https://juejin.cn/post/6844904058302513159#heading-15">可参考的文章1</a></li><li><a href="https://stackoverflow.com/questions/11821801/why-use-a-reentrantlock-if-one-can-use-synchronizedthis">可参考的文章2</a></li><li><a href="https://blog.csdn.net/m0_45406092/article/details/113789547">可参考的文章3</a></li><li><a href="https://winterbe.com/posts/2015/04/30/java8-concurrency-tutorial-synchronized-locks-examples/">可参考的文章4</a></li></ul><blockquote><ul><li>ReentrantLock可以尝试获取锁与设置获取锁的时限，需要手动释放锁</li><li>synchronized不能扩展锁之外的方法或者块边界，尝试获取锁时不能中途取消，获取不到锁会阻塞，synchronized正常或异常退出会自动释放锁。</li></ul></blockquote><ul><li>可重入锁，可以对同一把锁，多次上锁；</li><li>公平锁，FIFO，有队列，先进先出；默认是非公平的；每次 acquire 的时候，都检查等待最长时间的线程；</li></ul><p>Synchronized 获取锁的行为是不公平的，并非是按照申请对象锁的先后时间分配锁的，每次对象锁被释放时，每个线程都有机会获得对象锁，这样有利于提高执行性能，但是也会造成线程饥饿现象。</p><h4 id="ReentrantLock-常用的方法有哪些？"><a href="#ReentrantLock-常用的方法有哪些？" class="headerlink" title="ReentrantLock 常用的方法有哪些？"></a>ReentrantLock 常用的方法有哪些？</h4><p>ReentrantLock 常见方法如下：</p><ul><li>  lock()：用于获取锁</li><li>  unlock()：用于释放锁</li><li>  tryLock()：尝试获取锁</li><li>  getHoldCount()：查询当前线程执行 lock() 方法的次数</li><li>  getQueueLength()：返回正在排队等待获取此锁的线程数</li><li>  isFair()：该锁是否为公平锁</li></ul><h4 id="ReentrantLock-有哪些优势"><a href="#ReentrantLock-有哪些优势" class="headerlink" title="ReentrantLock 有哪些优势"></a>ReentrantLock 有哪些优势</h4><ul><li>灵活性，自主可控；</li><li>具备等待超时机制；</li><li>具备构造公平锁的能力；</li><li>可以感知等待锁的线程数量；</li><li>可以被中断；</li></ul><h4 id="ReentrantLock-有哪些缺点"><a href="#ReentrantLock-有哪些缺点" class="headerlink" title="ReentrantLock 有哪些缺点"></a>ReentrantLock 有哪些缺点</h4><ul><li>  需要使用 import 引入相关的 Class</li><li>  不能忘记在 finally 模块释放锁,这个看起来比 synchronized 丑陋</li><li>  synchronized 可以放在方法的定义里面, 而 reentrantlock 只能放在块里面. 比较起来, synchronized 可以减少嵌套</li></ul><h3 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h3><p>是一个接口，约定了一些方法，用以管理多个异步任务的执行，可以获取执行任务的 future，用以跟踪任务的执行。</p><p>可以执行任务，关闭任务等。</p><p>基于此，有一个线程池实现类 - ThreadPoolExecutor。</p><h4 id="为什么需要线程池"><a href="#为什么需要线程池" class="headerlink" title="为什么需要线程池"></a>为什么需要线程池</h4><ol><li>线程是很重的资源，JVM 的线程和系统的线程是一一对应的，创建和销毁都是系统调用，是很消耗资源的；</li><li>线程不少越多越好，线程是 CPU 调度的最小单位,但 CPU 的核心数有限，同时能运行的线程数有限，所以需要根据调度算法切换执行的线程，而线程的切换需要开销，比如替换寄存器的内容、高速缓存的失效等等。如果线程数太多，切换的频率就变高，可能使得多线程带来的好处抵不过线程切换带来的开销，得不偿失。</li></ol><p>小结一下：</p><ul><li>  Java中线程与操作系统线程是一比一的关系。</li><li>  线程的创建和销毁是一个“较重”的操作。</li><li>  多线程的主要是为了提高 CPU 的利用率。</li><li>  线程的切换有开销，线程数的多少需要结合 CPU核心数与 I/O 等待占比。IO 占比高的，可以适当提高线程数，以充分利用 CPU 资源；</li></ul><p>所以</p><ol><li>控制线程的数量；</li><li>缓存一批线程，避免重复的创建和销毁；</li></ol><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><ul><li><a href="https://mp.weixin.qq.com/s/NDOx94yY06OnHjrYq2lVYw">可以参考的资源1</a></li></ul><p>线程池就是事先将多个线程对象放到一个容器中，使用的时候就不用new线程而是直接去池中拿线程即可，节省了开辟子线程的时间，提高了代码执行效率。</p><p>熟悉对象池、连接池的朋友肯定对池化技术不陌生，一般池化技术的使用方式是从池子里拿出资源，然后使用，用完了之后归还。但是线程池的实现不太一样，不是说我们从线程池里面拿一个线程来执行任务，等任务执行完了之后再归还线程，你可以想一下这样做是否合理。线程池的常见实现更像是一个黑盒存在，我们设置好线程池的大小之后，直接往线程池里面丢任务，然后就不管了。</p><p>线程池其实是一个典型的生产者-消费者模式。</p><h4 id="自己设计一个线程池"><a href="#自己设计一个线程池" class="headerlink" title="自己设计一个线程池"></a>自己设计一个线程池</h4><ol><li>一个队列，用以存放 task 任务；</li><li>一个线程集合，用以执行任务；</li><li>定义拒绝策略；</li></ol><p>线程池讲白了就是存储线程的一个容器，池内保存之前建立过的线程来重复执行任务，减少创建和销毁线程的开销，提高任务的响应速度，并便于线程的管理。<br>我个人觉得如果要设计一个线程池的话得考虑池内工作线程的管理、任务编排执行、线程池超负荷处理方案、监控。</p><p>初始化线程数、核心线程数、最大线程池都暴露出来可配置，包括超过核心线程数的线程空闲消亡配置。</p><p>任务的存储结构可配置，可以是无界队列也可以是有界队列，也可以根据配置分多个队列来分配不同优先级的任务，也可以采用 stealing 的机制来提高线程的利用率。</p><h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h4><p>是个线程池实现类。<br><img src="https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nFApmmGxuSmkFnGZIczU6HYDguQXRlrglaIKgUCZ5ZCGj64s4S0iaFzIW990yfJiaplaC1z6aYDtoEA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="线程池示意图"></p><p>简单来说线程池把任务的提交和任务的执行剥离开来，当一个任务被提交到线程池之后：</p><ul><li>  如果此时线程数小于核心线程数，那么就会新起一个线程来执行当前的任务。</li><li>  如果此时线程数大于核心线程数，那么就会将任务塞入阻塞队列中，等待被执行。</li><li>  如果阻塞队列满了，并且此时线程数小于最大线程数，那么会创建新线程来执行当前任务。</li><li>  如果阻塞队列满了，并且此时线程数大于最大线程数，那么会采取拒绝策略。</li></ul><h5 id="任务是先入队，还是先执行？"><a href="#任务是先入队，还是先执行？" class="headerlink" title="任务是先入队，还是先执行？"></a>任务是先入队，还是先执行？</h5><p>看两个条件</p><ol><li>core 线程数；</li><li>任务队列是否已满；</li></ol><h6 id="线程数达到核心数的时候，如果任务队列未满"><a href="#线程数达到核心数的时候，如果任务队列未满" class="headerlink" title="线程数达到核心数的时候，如果任务队列未满"></a>线程数达到核心数的时候，如果任务队列未满</h6><p>任务是先入队，而不是先创建最大线程数。</p><h6 id="线程数达到核心数的时候，如果任务队列满了"><a href="#线程数达到核心数的时候，如果任务队列满了" class="headerlink" title="线程数达到核心数的时候，如果任务队列满了"></a>线程数达到核心数的时候，如果任务队列满了</h6><p>如果任务队列也满了，新增最大线程数的线程时，任务是可以直接给予新建的线程执行的，而不是入队。</p><h6 id="什么时候创建非核心线程"><a href="#什么时候创建非核心线程" class="headerlink" title="什么时候创建非核心线程"></a>什么时候创建非核心线程</h6><ul><li>核心线程忙碌状态；</li><li>等待队列已满；</li></ul><h6 id="此时线程数小于核心线程数，并且线程都处于空闲状态，现提交一个任务，是新起一个线程还是给之前创建的线程？"><a href="#此时线程数小于核心线程数，并且线程都处于空闲状态，现提交一个任务，是新起一个线程还是给之前创建的线程？" class="headerlink" title="此时线程数小于核心线程数，并且线程都处于空闲状态，现提交一个任务，是新起一个线程还是给之前创建的线程？"></a>此时线程数小于核心线程数，并且线程都处于空闲状态，现提交一个任务，是新起一个线程还是给之前创建的线程？</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">When a new task is submitted in method `[execute(java.lang.Runnable)](https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#execute(java.lang.Runnable))`, if fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle.<br></code></pre></td></tr></table></figure><p><a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor">参考链接</a></p><p>答案 ：新创建一个线程执行任务。</p><h5 id="原生线程池的核心线程一定伴随着任务慢慢创建的吗？"><a href="#原生线程池的核心线程一定伴随着任务慢慢创建的吗？" class="headerlink" title="原生线程池的核心线程一定伴随着任务慢慢创建的吗？"></a>原生线程池的核心线程一定伴随着任务慢慢创建的吗？</h5><p>并不是，线程池提供了两个方法：</p><ul><li>  prestartCoreThread：启动一个核心线程</li><li>  prestartAllCoreThreads ：启动所有核心线程<br>不要小看这个预创建方法，预热很重要，不然刚重启的一些服务有时是顶不住瞬时请求的，就立马崩了，所以有预热线程、缓存等等操作。</li></ul><h5 id="你是如何理解核心线程的"><a href="#你是如何理解核心线程的" class="headerlink" title="你是如何理解核心线程的 ?"></a>你是如何理解核心线程的 ?</h5><p>核心线程指的是线程池承载日常任务的中坚力量，也就是说本质上线程池是需要这么些数量的线程来处理任务的，所以在懒中又急着创建它。<br>而最大线程数其实是为了应付突发状况。</p><h6 id="线程池的核心线程在空闲的时候一定不会被回收吗？"><a href="#线程池的核心线程在空闲的时候一定不会被回收吗？" class="headerlink" title="线程池的核心线程在空闲的时候一定不会被回收吗？"></a>线程池的核心线程在空闲的时候一定不会被回收吗？</h6><p>有个 allowCoreThreadTimeOut 方法，把它设置为 true ，则所有线程都会超时，不会有核心数那条线的存在。</p><h5 id="你是怎么理解-KeepAliveTime-的？"><a href="#你是怎么理解-KeepAliveTime-的？" class="headerlink" title="你是怎么理解 KeepAliveTime 的？"></a>你是怎么理解 KeepAliveTime 的？</h5><p>这就是上面提到的，线程池其实想要的只是核心线程数个线程，但是又预留了一些数量来预防突发状况，当突发状况过去之后，线程池希望只维持核心线程数的线程，所以就弄了个 KeepAliveTime，当线程数大于核心数之后，如果线程空闲了一段时间（KeepAliveTime），就回收线程，直到数量与核心数持平。</p><p>线程池希望维持的线程数量就是 core 数量的线程，可能存在突发情况，导致线程的数量达到 max，但是突发事件过后，还是希望恢复到常态 core 的数量。</p><h5 id="那-workQueue-有什么用？"><a href="#那-workQueue-有什么用？" class="headerlink" title="那 workQueue 有什么用？"></a>那 workQueue 有什么用？</h5><p>缓存任务供线程获取。所以工作队列起到一个缓冲作用，具体队列长度需要结合线程数，任务的执行时长，能承受的等待时间等。</p><h5 id="你是如何理解拒绝策略的？"><a href="#你是如何理解拒绝策略的？" class="headerlink" title="你是如何理解拒绝策略的？"></a>你是如何理解拒绝策略的？</h5><ul><li>线程数达到最大值；</li><li>队列中的任务数达到最大值；</li></ul><p>满足上述两个条件后，</p><ul><li>默认实现是 AbortPolicy 直接抛出异常。</li><li>直接丢弃任务；</li><li>让提交任务的线程自己运行；</li><li>淘汰老的未执行的任务而空出位置；</li></ul><p>具体用哪个策略，根据场景选择。当然也可以自定义拒绝策略，实现 <code>RejectedExecutionHandler</code> 这个接口即可。</p><h5 id="线程池里的-ctl-的作用？"><a href="#线程池里的-ctl-的作用？" class="headerlink" title="线程池里的 ctl 的作用？"></a>线程池里的 ctl 的作用？</h5><p>工作线程数和线程池状态结合在一起维护，低 29 位存放 workerCount，高 3 位存放 runState。</p><p>其实并发包中有很多实现都是一个字段存多个值的，比如读写锁的高 16 位存放读锁，低 16 位存放写锁，这种一个字段存放多个值可以更容易的维护多个值之间的一致性，也算是极简主义。</p><h5 id="线程池有几种状态吗？"><a href="#线程池有几种状态吗？" class="headerlink" title="线程池有几种状态吗？"></a>线程池有几种状态吗？</h5><ul><li>  RUNNING：能接受新任务，并处理阻塞队列中的任务</li><li>  SHUTDOWN：不接受新任务，但是可以处理阻塞队列中的任务</li><li>  STOP：不接受新任务，并且不处理阻塞队列中的任务，并且还打断正在运行任务的线程，就是直接撂担子不干了！</li><li>  TIDYING：所有任务都终止，并且工作线程也为0，处于关闭之前的状态</li><li>  TERMINATED：已关闭。</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nFApmmGxuSmkFnGZIczU6HYs2XzibU6JNtBALibRhZTFWPVicaQ5IYst97Zh1mOIlSdJLbanMEIX8N4w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1****" alt="状态变迁图"></p><h5 id="为什么要先进队列，而不是直接新建线程执行"><a href="#为什么要先进队列，而不是直接新建线程执行" class="headerlink" title="为什么要先进队列，而不是直接新建线程执行"></a>为什么要先进队列，而不是直接新建线程执行</h5><p>其实经过上面的分析可以得知，线程池本意只是让核心数量的线程工作着，不论是 core 的取名，还是 keepalive 的设定，所以你可以直接把 core 的数量设为你想要线程池工作的线程数，而任务队列起到一个缓冲的作用。最大线程数这个参数更像是无奈之举，在最坏的情况下做最后的努力，去新建线程去帮助消化任务。</p><p>所以我个人觉得没有为什么，就是这样设计的，并且这样的设定挺合理。</p><p>原生版线程池的实现可以认为是偏向 CPU 密集的，也就是当任务过多的时候不是先去创建更多的线程，而是先缓存任务，让核心线程去消化，从上面的分析我们可以知道，当处理 CPU 密集型任务的时，线程太多反而会由于线程频繁切换的开销而得不偿失，所以优先堆积任务而不是创建新的线程。</p><h5 id="如何修改原生线程池，使得可以先拉满线程数再入任务队列排队？"><a href="#如何修改原生线程池，使得可以先拉满线程数再入任务队列排队？" class="headerlink" title="如何修改原生线程池，使得可以先拉满线程数再入任务队列排队？"></a>如何修改原生线程池，使得可以先拉满线程数再入任务队列排队？</h5><p>如果了解线程池的原理，很轻松的就知道关键点在哪，就是队列的 offer 方法。<br>execute 方法想必大家都不陌生，就是给线程池提交任务的方法。在这个方法中可以看到只要在 offer 方法内部判断此时线程数还小于最大线程数的时候返回 false，即可走下面 <code>else if</code> 中 <code>addWorker</code> (新增线程)的逻辑，如果数量已经达到最大线程数，直接入队即可。</p><p>自定义队列，让队列在线程数还未到达最大值时，不允许入队，就会进入创建新线程的逻辑。</p><h5 id="如果线程池中的线程在执行任务的时候，抛异常了，会怎么样？"><a href="#如果线程池中的线程在执行任务的时候，抛异常了，会怎么样？" class="headerlink" title="如果线程池中的线程在执行任务的时候，抛异常了，会怎么样？"></a>如果线程池中的线程在执行任务的时候，抛异常了，会怎么样？</h5><p>把这个线程废了，然后新建一个线程替换之。</p><p>所以如果一个任务执行一半就抛出异常，并且你没有自行处理这个异常，那么这个任务就这样戛然而止了，后面也不会有线程继续执行剩下的逻辑，所以要自行捕获和处理业务异常。</p><ul><li>shutdown：一个是安全的关闭线程池，会等待任务都执行完毕；</li><li>shutdownNow：粗暴的直接咔嚓了所有线程，管你在不在运行；</li><li>shutdownNow 了之后还在任务队列中的任务咋办？线程池还算负责，把未执行的任务拖拽到了一个列表中然后返回，至于怎么处理，就交给调用者了！</li></ul><h5 id="线程池如何动态修改核心线程数和最大线程数？"><a href="#线程池如何动态修改核心线程数和最大线程数？" class="headerlink" title="线程池如何动态修改核心线程数和最大线程数？"></a>线程池如何动态修改核心线程数和最大线程数？</h5><ul><li>  CPU 密集型的话，核心线程数设置为 CPU核数+1</li><li>  I/O 密集型的话，核心线程数设置为 2*CPU核数<br>线程数= CPU核数  ✖️ 1 + 线程等待时间 / 线程时间运行时间）<br>所以说线程数真的很难通过一个公式一劳永逸，线程数的设定是一个迭代的过程，需要压测适时调整，以上的公式做个初始值开始调试是 ok 的。</li></ul><p>但是可以根据监控的状态，动态修改线程池的配置。</p><h2 id="为什么不推荐使用jdk自带的-executors-的方式来创建线程池"><a href="#为什么不推荐使用jdk自带的-executors-的方式来创建线程池" class="headerlink" title="为什么不推荐使用jdk自带的 executors 的方式来创建线程池?"></a>为什么不推荐使用jdk自带的 executors 的方式来创建线程池?</h2><p>避免资源耗尽的风险；<br>如果用这种方式设置，则</p><ul><li>FixedThreadPool和SingleThreadPool允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM</li><li>CachedThreadPool和ScheduledThreadPool允许创建的线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM</li></ul><h2 id="executors-的几种线程池"><a href="#executors-的几种线程池" class="headerlink" title="executors 的几种线程池"></a>executors 的几种线程池</h2><h5 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h5><p>不固定线程数量，且支持最大为Integer.MAX_VALUE的线程数量:<br>1、线程数无限制。<br>2、有空闲线程则复用空闲线程，若无空闲线程则新建线程<br>3、一定程序减少频繁创建/销毁线程，减少系统开销。</p><h5 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h5><p>一个固定线程数量的线程池:<br>1、可控制线程最大并发数（同时执行的线程数）。<br>2、超出的线程会在队列中等待。</p><h5 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h5><p>可以理解为线程数量为1的FixedThreadPool:<br>单线程化的线程池：<br>1、有且仅有一个工作线程执行任务。<br>2、所有任务按照指定顺序执行，即遵循队列的入队出队规则。</p><h5 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h5><p>支持定时以指定周期循环执行任务: 注意：前三种线程池是ThreadPoolExecutor不同配置的实例，最后一种是ScheduledThreadPoolExecutor的实例。</p><h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><blockquote><p>提供更多的锁机制<br>实现阻塞锁和与之相关依赖于先进先出队列等待队列的同步器；</p></blockquote><p><a href="https://mp.weixin.qq.com/s/iNz6sTen2CSOdLE0j7qu9A">参考的文章1</a><br><a href="https://mp.weixin.qq.com/s/hB5ncpe7_tVovQj1sNlDRA">参考的文章2</a><br><a href="https://mp.weixin.qq.com/s/trsjgUFRrz40Simq2VKxTA">参考文章3</a><br><a href="https://www.bilibili.com/video/BV1V84y1H7oF/?spm_id_from=333.788&vd_source=2383886846e4aa5e7cf6fd52f9d0a367">参考的原理讲解</a></p><h2 id="基于许可的多线程控制"><a href="#基于许可的多线程控制" class="headerlink" title="基于许可的多线程控制"></a>基于许可的多线程控制</h2><p>为了控制多个线程访问共享资源 ，我们需要为每个访问共享区间的线程派发一个许可。拿到一个许可的线程才能进入共享区间活动。当线程完成工作后，离开共享区间时，必须要归还许可，以确保后续的线程可以正常取得许可。如果许可用完了，那么线程进入共享区间时，就必须等待，这就是控制多线程并行的基本思想。</p><h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><p>基于许可的控制，有点和管程很像。</p><h2 id="排他锁和共享锁"><a href="#排他锁和共享锁" class="headerlink" title="排他锁和共享锁"></a>排他锁和共享锁</h2><p>第二个重要的概念就是排他锁(exclusive)和共享锁(shared)。顾名思义，在排他模式上，只有一个线程可以访问共享变量，而共享模式则允许多个线程同时访问。简单地说，重入锁是排他的；信号量是共享的。<br>共享也是一定量的共享。</p><h2 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h2><ul><li>  public static void park() : 如果没有可用许可，则挂起当前线程</li><li>  public static void unpark(Thread thread)：给thread一个可用的许可，让它得以继续执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">LockSupport.unpark(Thread.currentThread());<br>LockSupport.park();<br></code></pre></td></tr></table></figure><p>大家可以猜一下，park()之后，当前线程是停止，还是 可以继续执行呢？</p><p>答案是：可以继续执行。那是因为在park()之前，先执行了unpark()，进而释放了一个许可，也就是说当前线程有一个可用的许可。而park()在有可用许可的情况下，是不会阻塞线程的。</p><p>综上所述，park()和unpark()的执行效果和它调用的先后顺序没有关系。这一点相当重要，因为在一个多线程的环境中，我们往往很难保证函数调用的先后顺序(都在不同的线程中并发执行)，因此，这种基于许可的做法能够最大限度保证程序不出错。</p><p>与park()和unpark()相比， 一个典型的反面教材就是Thread.resume()和Thread.suspend()。</p><h2 id="Thread-resume-和Thread-suspend"><a href="#Thread-resume-和Thread-suspend" class="headerlink" title="Thread.resume()和Thread.suspend()"></a>Thread.resume()和Thread.suspend()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread.currentThread().resume();<br>Thread.currentThread().suspend();<br></code></pre></td></tr></table></figure><p>首先让线程继续执行，接着在挂起线程。这个写法和上面的park()的示例非常接近，但是运行结果却是截然不同的。在这里，当前线程就是卡死。</p><p>因此，使用park()和unpark()才是我们的首选。而在AbstractQueuedSynchronizer中，也正是使用了 LockSupport 的park()和unpark()操作来控制线程的运行状态的。</p><p>在AbstractQueuedSynchronizer内部，</p><ul><li>有一个队列，我们把它叫做<strong>同步等待队列</strong>。它的作用是保存等待在这个锁上的线程(由于lock()操作引起的等待）。</li><li>为了维护等待在条件变量上的等待线程，AbstractQueuedSynchronizer又需要再维护一个<strong>条件变量等待队列</strong>，也就是那些由Condition.await()引起阻塞的线程。<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/uChmeeX1Fpx7JSVwOERcCuTUA4ZfuvczicXgb2JJQvlLzklMOhd3NOJ5KVsm3xprYVovO2LvU6fxL0iaUpSk6PicA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="数据结构"></li></ul><h1 id="Java-对象真实占用的内存大小"><a href="#Java-对象真实占用的内存大小" class="headerlink" title="Java 对象真实占用的内存大小"></a>Java 对象真实占用的内存大小</h1><ul><li><a href="https://www.cnblogs.com/rickiyang/p/14206724.html">可以参考的资源1</a></li></ul><p><img src="https://img2020.cnblogs.com/blog/1607781/202012/1607781-20201229150956450-1399589204.png" alt="java对象数据结构"></p><ul><li>对象头（Header）<ul><li>MarkWord：用于存储对象运行时的数据，好比 HashCode、锁状态标志、GC分代年龄等。这部分在 64 位操作系统下占 8 字节，32 位操作系统下占 4 字节。</li><li>指针：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪一个类的实例。这部分就涉及到指针压缩的概念，在开启指针压缩的状况下占 4 字节，未开启状况下占 8 字节。</li><li>数组长度：这部分只有是数组对象才有，若是是非数组对象就没这部分。这部分占 4 字节。</li></ul></li><li>  实例数据（Instance Data）用于存储对象中的各类类型的字段信息（包括从父类继承来的）</li><li>对齐填充（Padding），Java 对象的大小默认是按照 8 字节对齐<ul><li>由于 CPU 进行内存访问时，一次寻址的指针大小是 8 字节，正好也是 L1 缓存行的大小。如果不进行内存对齐，则可能出现跨缓存行的情况，这叫做 缓存行污染。</li><li>JVM 为对象进行填充，使其大小变为 8 个字节的倍数。使用这些填充后，oops 中的最后三位始终为零。这是因为在二进制中 8 的倍数的数字总是以 000 结尾。由于 JVM 已经知道最后三位始终为零，因此在堆中存储那些零是没有意义的。相反假设它们存在并存储 3 个其他更重要的位，以此来模拟 35 位的内存地址。现在我们有一个带有 3 个右移零的 32 位地址，所以我们将 35 位指针压缩成 32 位指针。这意味着我们可以在不使用 64 位引用的情况下使用最多 32 GB ：  (2(32+3)=235=32 GB) 的堆空间。</li><li>当 JVM 需要在内存中找到一个对象时，它将指针向左移动 3 位。另一方面当堆加载指针时，JVM 将指针向右移动 3 位以丢弃先前添加的零。虽然这个操作需要 JVM 执行更多的计算以节省一些空间，不过对于大多数CPU来说，位移是一个非常简单的操作。</li></ul></li></ul><h2 id="压缩的原理"><a href="#压缩的原理" class="headerlink" title="压缩的原理"></a>压缩的原理</h2><p>CompressedOops 工作原理</p><p>32 位内最多可以表示 4GB，64 位地址为 堆的基地址 + 偏移量，当堆内存 &lt; 32GB 时候，在压缩过程中，把 偏移量 / 8 后保存到 32 位地址。在解压再把 32 位地址放大 8 倍，所以启用 CompressedOops 的条件是堆内存要在 4GB * 8=32GB 以内。</p><p>JVM 的实现方式是，不再保存所有引用，而是每隔 8 个字节保存一个引用。例如，原来保存每个引用 0、1、2…，现在只保存 0、8、16…。因此，指针压缩后，并不是所有引用都保存在堆中，而是以 8 个字节为间隔保存引用。</p><p>在实现上，堆中的引用其实还是按照 0x0、0x1、0x2… 进行存储。只不过当引用被存入 64 位的寄存器时，JVM 将其左移 3 位（相当于末尾添加 3 个0），例如 0x0、0x1、0x2… 分别被转换为 0x0、0x8、0x10。而当从寄存器读出时，JVM 又可以右移 3 位，丢弃末尾的 0。（oop 在堆中是 32 位，在寄存器中是 35 位，2的 35 次方 = 32G。也就是说使用 32 位，来达到 35 位 oop 所能引用的堆内存空间）。</p><h3 id="为什么可以压缩？"><a href="#为什么可以压缩？" class="headerlink" title="为什么可以压缩？"></a>为什么可以压缩？</h3><p>。。。。。。。<br>// todo</p><h2 id="数据类型占用的空间"><a href="#数据类型占用的空间" class="headerlink" title="数据类型占用的空间"></a>数据类型占用的空间</h2><h3 id="基础数据类型占用的内存大小"><a href="#基础数据类型占用的内存大小" class="headerlink" title="基础数据类型占用的内存大小"></a>基础数据类型占用的内存大小</h3><ul><li>数据类型对应的内存占用，参考：<a href="https://www.baeldung.com/java-primitives">https://www.baeldung.com/java-primitives</a></li></ul><h3 id="引用类型占用的内存大小"><a href="#引用类型占用的内存大小" class="headerlink" title="引用类型占用的内存大小"></a>引用类型占用的内存大小</h3><p>引用类型在 32 位系统上每个引用对象占用 4 byte，在 64 位系统上每个引用对象占用 8 byte。</p><h2 id="Java-对象到底占用多大内存"><a href="#Java-对象到底占用多大内存" class="headerlink" title="Java 对象到底占用多大内存"></a>Java 对象到底占用多大内存</h2><ul><li><a href="https://hg.openjdk.org/jdk8u/jdk8u/hotspot/file/6f33e450999c/src/share/vm/oops/markOop.hpp">可供参考的资料1</a></li><li><a href="https://github.com/openjdk/jol">JOL</a></li></ul><p><strong>首先记住公式，对象由 对象头 + 实例数据 + padding 填充字节组成，虚拟机规范要求对象所占内存必须是 8 的倍数，padding 就是干这个的</strong>。</p><p>对象头由 Markword + 类指针kclass（该指针指向该类型在方法区的元类型） 组成。</p><p>可以借助这个工具进行分析 <code>org.openjdk.jol:jol-core:0.17</code></p><p>new String(“xxxx”); 这个对象是 24 bytes；</p><p>无论是什么对象，一般 header 是 12，剩下的是具体的属性对象的大小，外加对齐的内容。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java,JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cronet_build</title>
    <link href="/2021/06/02/cronet-build/"/>
    <url>/2021/06/02/cronet-build/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>记录编译Cronet for Android 的过程和步骤.</p><span id="more"></span><h1 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h1><ol><li>install  depot_tools</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br></code></pre></td></tr></table></figure><ol start="2"><li>添加进path,或者 .bashrc/.zshrc</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将 /path/to/depot_tools 天换成自己安装的目录即可</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:/path/to/depot_tools&quot;</span></span><br></code></pre></td></tr></table></figure><p>如果安装的位置是home目录下,上述命令切勿使用 <em>~</em>,使用绝对路径或者 HOME 替代.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$&#123;HOME&#125;</span>/depot_tools&quot;</span></span><br></code></pre></td></tr></table></figure><p>我的安装路径是  ~/ide/depot_tools</p><p>所以,我执行的命令是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$&#123;HOME&#125;</span>/ide/depot_tools&quot;</span></span><br></code></pre></td></tr></table></figure><h1 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h1><ol><li>找个目录,clone代码,我选择的是   ~/workspace/chromium</li><li>拉取代码,因为我不想要history,如果想要history,去掉 –no-history 即可.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这个命令是第一次拉取代码使用</span><br><span class="hljs-meta">$</span><span class="bash"> fetch --nohooks --no-history chromium</span><br></code></pre></td></tr></table></figure><p>根据网速,快的话办小时,慢的话,数小时之后完成. 20G的东西，我的网速很慢，过了一夜吧，也没具体看多久，这个工具有个问题，没有进度条。。。<br>当命令结束之后,目录下就会出现隐藏文件.gclient 和 文件夹 src.<br>​<br>假如中间中断过，或者直接拷贝了一份已有的源码，非第一次拉取代码,可能会提示如下内容。<br>​<br><img src="/img/cronet_build/sync_warning.png" alt="sync warning"></p><h2 id="非初次同步-则执行同步代码的命令"><a href="#非初次同步-则执行同步代码的命令" class="headerlink" title="非初次同步,则执行同步代码的命令"></a>非初次同步,则执行同步代码的命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gclient sync</span><br></code></pre></td></tr></table></figure><p>进入漫长的等待…</p><p><img src="/img/cronet_build/sync_proceed.png" alt="sync_proceed"></p><p>同步完成,自动执行 gclient runhooks 命令.</p><p><img src="/img/cronet_build/sync_success.png" alt="sync_success"></p><h1 id="切换到src目录下"><a href="#切换到src目录下" class="headerlink" title="切换到src目录下"></a>切换到src目录下</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"><span class="hljs-built_in">cd</span> src</span><br></code></pre></td></tr></table></figure><h1 id="安装额外依赖"><a href="#安装额外依赖" class="headerlink" title="安装额外依赖"></a>安装额外依赖</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ./build/install-build-deps.sh</span><br></code></pre></td></tr></table></figure><p>依赖比较多,安装需要点时间,约1G的空间大小.</p><p>我安装的时候,还遇到一个问题</p><p><img src="/img/cronet_build/sync_error_font.png" alt="sync_error_font"></p><p>试了很多办法,还是不行,就按照提示的,跳过这个字体库的安装.<br>​</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ./build/install-build-deps.sh --no-chromeos-fonts</span><br><br></code></pre></td></tr></table></figure><h1 id="Run-the-hooks"><a href="#Run-the-hooks" class="headerlink" title="Run the hooks"></a>Run the hooks</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gclient runhooks</span><br></code></pre></td></tr></table></figure><h1 id="build"><a href="#build" class="headerlink" title="build"></a>build</h1><h2 id="需求一-Building-Cronet-for-development-and-debugging"><a href="#需求一-Building-Cronet-for-development-and-debugging" class="headerlink" title="需求一: Building Cronet for development and debugging"></a>需求一: Building Cronet for development and debugging</h2><h3 id="第一步-设置out-dir-生成ninja文件"><a href="#第一步-设置out-dir-生成ninja文件" class="headerlink" title="第一步: 设置out_dir,生成ninja文件"></a>第一步: 设置out_dir,生成ninja文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ./components/cronet/tools/cr_cronet.py gn --out_dir=out/Cronet</span><br></code></pre></td></tr></table></figure><p>在linux进行编译,则自动生成Android 库,在Mac上,则会生成iOS库.</p><p>这个命令执行完成之后,会影响之前编译在out/Cronet目录中的内容.</p><p>如果 –out_dir 参数省略的话,就输出目录就会默认变成 out/Debug 和 out/Release,分别存放debug和release的输出内容.</p><p><img src="/img/cronet_build/build_gn_ninja.png" alt="build_gn_ninja"></p><h3 id="第二步-Running-the-ninja-files"><a href="#第二步-Running-the-ninja-files" class="headerlink" title="第二步: Running the ninja files"></a>第二步: Running the ninja files</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ninja -C out/Cronet cronet_package</span><br></code></pre></td></tr></table></figure><p><img src="/img/cronet_build/build_success.png" alt="build_success"></p><h3 id="生成物解释"><a href="#生成物解释" class="headerlink" title="生成物解释"></a>生成物解释</h3><p>编译完,用作Android开发的库都在 chromium/src/out/Cronet/cronet 目录下.</p><p><img src="/img/cronet_build/build_gn_dir.png" alt="build_gn_dir"><br>​</p><ol><li>Android的jar包: 该目录下的所有jar文件,就是需要的jar包;</li><li>Android的动态库: libs目录下有对应的so文件;</li><li>符号表: 对应的符号信息在symbols目录下,用于线上crash或其他栈信息的mapping;</li><li>头文件: include目录下有对应的头文件.</li><li>反混淆文件: 也在该目录下.</li></ol><h2 id="需求二-build-mobile-release"><a href="#需求二-build-mobile-release" class="headerlink" title="需求二: build mobile release"></a>需求二: build mobile release</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ./components/cronet/tools/cr_cronet.py gn --release</span><br><span class="hljs-meta">$</span><span class="bash"> ninja -C out/Release cronet_package</span><br></code></pre></td></tr></table></figure><p><img src="/img/cronet_build/mobile_release.png" alt="mobile_release"></p><h2 id="需求三-其他abi"><a href="#需求三-其他abi" class="headerlink" title="需求三: 其他abi"></a>需求三: 其他abi</h2><p>默认不指定参数的情况下,生成的是 ARMv7 32位的库,如果需要其他版本的库,可以通过添加如下参数,进行生成.</p><h3 id="方案一是-修改-cr-cronet-py-文件的-gn-args-变量-按照需求修改成如下的值"><a href="#方案一是-修改-cr-cronet-py-文件的-gn-args-变量-按照需求修改成如下的值" class="headerlink" title="方案一是,修改 cr_cronet.py 文件的 gn_args 变量,按照需求修改成如下的值."></a>方案一是,修改 <a href="https://chromium.googlesource.com/chromium/src/+/refs/heads/main/components/cronet/tools/cr_cronet.py">cr_cronet.py</a> 文件的 gn_args 变量,按照需求修改成如下的值.</h3><p>​</p><ul><li>For ARMv8 64-bit: target_cpu=”arm64”</li><li>For x86 32-bit: target_cpu=”x86”</li><li>For x86 64-bit: target_cpu=”x64”</li></ul><p><img src="/img/cronet_build/cr_cronet.py.png" alt="cr_cronet.py"></p><h3 id="方案二-交互式-不需要修改文件"><a href="#方案二-交互式-不需要修改文件" class="headerlink" title="方案二: 交互式,不需要修改文件"></a>方案二: 交互式,不需要修改文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 交互修改参数</span><br><span class="hljs-meta">$</span><span class="bash"> gn args out/Cronet</span><br><br></code></pre></td></tr></table></figure><p>会弹出输入界面,可以输入需要的参数,比如(这些参数我是参考的默认debug包的参数,只是添加了开头有的target_cpu部分)<br>​</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">target<span class="hljs-emphasis">_cpu=&quot;arm64&quot;</span><br><span class="hljs-emphasis">target_</span>cpu=&quot;arm&quot;<br>target<span class="hljs-emphasis">_cpu=&quot;x86&quot;</span><br><span class="hljs-emphasis">target_</span>os = &quot;android&quot;<br>enable<span class="hljs-emphasis">_websockets = false</span><br><span class="hljs-emphasis">disable_</span>file<span class="hljs-emphasis">_support = true</span><br><span class="hljs-emphasis">disable_</span>ftp<span class="hljs-emphasis">_support = true</span><br><span class="hljs-emphasis">disable_</span>brotli<span class="hljs-emphasis">_filter = false</span><br><span class="hljs-emphasis">is_</span>component<span class="hljs-emphasis">_build = false</span><br><span class="hljs-emphasis">use_</span>crash<span class="hljs-emphasis">_key_</span>stubs = true<br>ignore<span class="hljs-emphasis">_elf32_</span>limitations = true<br>use<span class="hljs-emphasis">_partition_</span>alloc = false<br>include<span class="hljs-emphasis">_transport_</span>security<span class="hljs-emphasis">_state_</span>preload<span class="hljs-emphasis">_list = false</span><br><span class="hljs-emphasis">use_</span>platform<span class="hljs-emphasis">_icu_</span>alternatives = true<br>use<span class="hljs-emphasis">_errorprone_</span>java<span class="hljs-emphasis">_compiler = true</span><br><span class="hljs-emphasis">enable_</span>reporting = true<br>use<span class="hljs-emphasis">_hashed_</span>jni<span class="hljs-emphasis">_names = true</span><br></code></pre></td></tr></table></figure><p>​</p><p>Tip: 其实最终的参数存在 out/Cronet/args.gn 这个文件里,也可以直接修改这个文件.</p><p><img src="/img/cronet_build/args.gn.png" alt="args.gn"></p><p>执行编译操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ninja -C out/Cronet cronet_package</span><br></code></pre></td></tr></table></figure><p>​</p><p><img src="img/cronet_build/abi_success.png" alt="abi_success"></p><p>生成的so文件在 src/out/Cronet/cronet/libs 下,因为我之前编译过 x86的,所以有两个.</p><p><img src="/img/cronet_build/abi_so.png" alt="abi_so"></p><h1 id="其他-iOS编译"><a href="#其他-iOS编译" class="headerlink" title="其他,iOS编译"></a>其他,iOS编译</h1><p>曾经也编译过iOS版本,步骤差不多,按照文档来,但是当时有个问题,在此记录下.</p><ol><li>按照<a href="https://chromium.googlesource.com/chromium/src/+/master/docs/ios/build_instructions.md">iOS编译文档</a> 操作执行,生成需要的文件夹;</li><li>如果当时fetch的时候,参数不是 iOS,则需要确认 .gclient ,最后一行有  target_os = [ “ios” ]   ,然后再执行 gclient sync,下载iOS的依赖; <a href="https://chromium.googlesource.com/chromium/src/+/0e94f26e8/docs/ios_build_instructions.md">文档说明</a></li></ol><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ol><li><a href="https://chromium.googlesource.com/chromium/src/+/HEAD/components/cronet/build_instructions.md">Cronet build instructions</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cronet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OkHttp学习之简介(1)</title>
    <link href="/2021/02/09/okhttp-1/"/>
    <url>/2021/02/09/okhttp-1/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>回顾一下 OKHttp 这个优秀库,画了张思维导图.</p><p><img src="/img/net/OKHttp_summary.png" alt="OKHttp的分解图"></p><p><img src="/img/net/OKHttp_key_class.png" alt="OKHttp的关键路径图"></p>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AOSP编译</title>
    <link href="/2020/09/06/aosp_build/"/>
    <url>/2020/09/06/aosp_build/</url>
    
    <content type="html"><![CDATA[<h1 id="override"><a href="#override" class="headerlink" title="override"></a>override</h1><p>最近给电脑换了块SSD，装了Ubuntu 18.04。之前的aosp也不想copy过来了，直接重新编译一份，顺带看下新的SSD带来的提效。<br>因为手机是 nexus 6p，aosp 最后支持到 8.1. 记录下编译需要的操作。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>open jdk(<a href="https://openjdk.java.net/install/">https://openjdk.java.net/install/</a>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install openjdk-8-jdk<br></code></pre></td></tr></table></figure></li><li><p>repo(<a href="https://gerrit.googlesource.com/git-repo/">https://gerrit.googlesource.com/git-repo/</a>)</p></li></ol><ul><li><p>AUTO</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install repo<br></code></pre></td></tr></table></figure></li><li><p>MANUALLY</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> mkdir -p ~/.bin</span><br><span class="hljs-meta">$</span><span class="bash"> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.bin:<span class="hljs-variable">$&#123;PATH&#125;</span>&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/.bin/repo</span><br><span class="hljs-meta">$</span><span class="bash"> chmod a+rx ~/.bin/repo</span><br><br></code></pre></td></tr></table></figure><ol start="3"><li>AOSP <a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">mirror</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir aosp<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>git config --global user.email &quot;tinggengyan@gmail.com&quot;<br>git config --global user.name &quot;Tinggeng Yan&quot;<br><br>sudo apt install python<br><br>cd aosp<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 切换指定版本分支</span> <br>repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-8.1.0_r52 --depth=1 --repo-url=https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/ --repo-branch=stable<br><br>repo sync --current-branch<br><br></code></pre></td></tr></table></figure><ol start="4"><li>build</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib<br>sudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386<br>sudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386<br>sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev<br>sudo apt-get install git-core gnupg flex bison gperf build-essential<br>sudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib<br>sudo apt-get install libc6-dev-i386<br>sudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev<br>sudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4<br>sudo apt-get install lib32z-dev ccache<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>export LC_ALL=C<br><br>source build/envsetup.sh &amp;&amp; lunch<br><br>make -j 4<br><br></code></pre></td></tr></table></figure><ol start="5"><li>flash into nexus 6p</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/aosp/out/target/product/angler<br><br>adb reboot bootloader<br><br>fastboot devices<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">下面这条命令可选</span><br><span class="hljs-meta">#</span><span class="bash">fastboot flashall -w</span><br><span class="hljs-meta">#</span><span class="bash">-w 选项会清除设备上的 /data 分区；</span><br><span class="hljs-meta">#</span><span class="bash">该选项在您第一次刷写特定设备时非常有用，但在其他情况下则没必要使用。</span><br><br>fastboot flash vendor vendor.img<br>fastboot flash boot boot.img<br>fastboot flash recovery recovery.img<br>fastboot flash system system.img<br>fastboot flash userdata userdata.img<br>fastboot flash cache cache.img<br><br>fastboot reboot<br><br></code></pre></td></tr></table></figure><h2 id="emulator"><a href="#emulator" class="headerlink" title="emulator"></a>emulator</h2><p>需要编译对应的模拟器的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">source build/envsetup.sh<br><br>lunch 2 #这里填序号aosp_arm64-eng为2<br><br>make -j 4<br><br>emulator<br></code></pre></td></tr></table></figure><p>如果编译完成后关闭了终端窗口，则需要用以下方式启动模拟器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>source build/envsetup.sh<br><br>lunch 2 #这里填序号aosp_arm64-eng为2<br><br>emulator<br><br></code></pre></td></tr></table></figure><h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><ol><li>可能出现的错误<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">error: insufficient permissions for device: udev requires plugdev group membership<br></code></pre></td></tr></table></figure></li></ol><p>add group</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo usermod -aG plugdev $LOGNAME<br></code></pre></td></tr></table></figure><p><a href="https://developer.android.com/studio/run/device">ref</a></p><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p><a href="https://developer.sony.com/develop/open-devices/guides/aosp-build-instructions/build-aosp-nougat-8-1-oreo-4-4/#tutorial-step-2">sony developer</a><br><a href="https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds">version branch AOSP tags</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aosp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Activity启动流程概述</title>
    <link href="/2020/07/23/activity-launch-process-1/"/>
    <url>/2020/07/23/activity-launch-process-1/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>花了点时间,debug了一下系统,跟踪了一下Activity的启动流程.画了一张图,作为综述.<br>分析的 <code>compileSdkVersion</code> 为 <strong>28</strong>.<br>用的是 draw.io 画的,<a href="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/source/img/activity_process/AndroidActivitySequenceDiagram.drawio">源文件</a>.</p><p><img src="/img/activity_process/AndroidActivitySequenceDiagram.png" alt="概述图"></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Activity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AndroidStudio调试framework源码</title>
    <link href="/2020/06/23/as-debug-framework/"/>
    <url>/2020/06/23/as-debug-framework/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>debug 是学习流程最快的方式,也是验证想法最好的方法.记录 Androidstudio 如何debug Android framework的代码.</p><span id="more"></span><h2 id="使用无-AOSP-的代码-Java层"><a href="#使用无-AOSP-的代码-Java层" class="headerlink" title="使用无 AOSP 的代码(Java层)"></a>使用无 AOSP 的代码(Java层)</h2><p>这是最简单方便的方式了.</p><ol><li>下载某个版本的 Android Source code</li></ol><p><img src="/img/as_debug_framework/45b1b25e.png" alt="45b1b25e.png"></p><p>确认 <em>Source code</em> 正确下载了.</p><p><img src="/img/as_debug_framework/c974a437.png" alt="c974a437.png"></p><ol start="2"><li>新建项目,所用的 <code>compile SDK </code> 版本为需要调试的代码版本</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    <span class="hljs-comment">// 设置成需要需要分析的,且已下载源码的版本</span><br>    compileSdkVersion <span class="hljs-number">29</span><br>    ......<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>新建并启动对应版本的模拟器.</li></ol><p><img src="/img/as_debug_framework/d0be67cc.png" alt="d0be67cc.png"></p><ol start="4"><li>打断点;</li></ol><p>这里以系统的 <strong>ActivityManagerService</strong> 为例.<br>因为<strong>ActivityManagerService</strong> 并未导出到<strong>Android.jar</strong>,所以无法直接搜索定位到 <strong>.java</strong>文件,所以采用双击<strong>shift</strong>的方式,检索文件.<br><img src="/img/as_debug_framework/ee514167.png" alt="ee514167.png"></p><ol start="5"><li>attach 到对应的进程,运行,查看断点.</li></ol><p><strong>ActivityManagerService</strong>  这个类是在系统 <strong>system_process</strong> 进程中的,所以,需要对<strong>system_process</strong> 进程进行 <strong>attach</strong> 操作.<br><img src="/img/as_debug_framework/9e039bde.png" alt="9e039bde.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此,经过如上操作,就可以对某个类进行debug操作了.对于分析framework代码也是方便的很.</p><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><p>有时候还是会遇到代码行号不匹配,debug定位的代码行号不对,目前原因未知,应该是source code 和生成模拟器镜像的代码有出入.<br>没有好的解决办法,有个替代的方案.</p><ol><li>断点后,有明确的thread stack信息;</li><li>找到最早一个可以定位准备行号的函数;</li><li>针对这个函数进行 findByUsage,在查出的结果中,查找stack信息指引的函数.</li></ol><h1 id="使用-AOSP-的源码进行调试"><a href="#使用-AOSP-的源码进行调试" class="headerlink" title="使用 AOSP 的源码进行调试"></a>使用 AOSP 的源码进行调试</h1><p>上述的方法基本能满足常见的debug需求了.但是有个前提是,debug的设备基本只能是模拟器或者装了官方release镜像的亲儿子.<br>对于有修改ROM需求的情况下,debug 则需要导入 aosp 中framework 的代码. 对应的运行设备得是运行了自定义ROM的设备.</p><h2 id="生成-android-ipr-文件"><a href="#生成-android-ipr-文件" class="headerlink" title="生成 android.ipr 文件"></a>生成 android.ipr 文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 1. 编译 idegen模块<br>mmm development/tools/idegen/<br><br>// 2. 生成<br>./development/tools/idegen.sh<br><br></code></pre></td></tr></table></figure><p>这个文件就代表了AS里的一个project.</p><h2 id="修改-android-iml-文件"><a href="#修改-android-iml-文件" class="headerlink" title="修改 android.iml 文件"></a>修改 android.iml 文件</h2><p>同时还会生成一个 iml文件,代表了project的配置情况,可以用于配置加载哪些配置.<br>AOSP巨大,可以只加载需要关注的模块,如 framework 和 Package 部分.<br>所以需要修改 android.iml 文件,将不需要的文件进行exclude.</p><h2 id="AS-打开-ipr-文件"><a href="#AS-打开-ipr-文件" class="headerlink" title="AS 打开 ipr 文件"></a>AS 打开 ipr 文件</h2><h3 id="可能遇到问题"><a href="#可能遇到问题" class="headerlink" title="可能遇到问题"></a>可能遇到问题</h3><p>导入可能遇到问题 <code>External file changes sync may be slow: The current inotify(7) watch limit is too low.</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim fs.inotify.max_user_watches = 524288<br><br>sudo sysctl -p --system<br><br></code></pre></td></tr></table></figure><p>重启即可;</p><h2 id="代码索引跳转"><a href="#代码索引跳转" class="headerlink" title="代码索引跳转"></a>代码索引跳转</h2><p>为了跳转到aosp的Java文件,而不是android.jar的class文件,需要调整 project struct.</p><ol><li>新建一个 jdk,此处为 jdk_none, 删除所有的path;</li></ol><p><img src="/img/as_debug_framework/create_jdk.png" alt="create_jdk.png"></p><ol start="2"><li><p>新建一个 android sdk,依赖 jdk_none;<br><img src="/img/as_debug_framework/create_sdk_with_jdk.png" alt="create_sdk_with_jdk.png"></p></li><li><p>project 依赖的sdk切换成第2步新建的SDK即可;</p></li></ol><h2 id="让模拟器使用自定义的ROM"><a href="#让模拟器使用自定义的ROM" class="headerlink" title="让模拟器使用自定义的ROM"></a>让模拟器使用自定义的ROM</h2><ol><li>source ./build/envsetup.sh</li><li>lunch ,选择对应的 模拟器需要的API</li><li>emulator</li></ol><blockquote><p>自己编译编译出的ROM位置” ……/aosp/out/target/product/generic_x86_64 </p></blockquote><h3 id="附-我还没试过"><a href="#附-我还没试过" class="headerlink" title="附,我还没试过"></a>附,我还没试过</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> emulator -avd Nexus5-API22 -verbose -no-boot-anim -system (the path of system.img)</span><br></code></pre></td></tr></table></figure><h1 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a>方案对比</h1><ol><li>第一种自然是方便的,要求比较低,对机器的性能要求也不高.有个劣势: 对于AIDL编译生成的Java文件,无法进行索引和导航.但是,可以借助官方的代码搜索网站进行弥补,搜索网站可以索引soong编译期间生成的Java代码: <a href="https://cs.android.com/android/platform/superproject">https://cs.android.com/android/platform/superproject</a> </li><li>AOSP的方式是灵活性更大,中间代码索引也方便. 就是性能要求比较高.</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://www.jianshu.com/p/a19dcb06cd53">导入AOSP</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac下 Understand 的初步配置</title>
    <link href="/2020/06/19/tool-understand/"/>
    <url>/2020/06/19/tool-understand/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>之前一直寻找一款类似于windows上的sourceinsight的软件,后来无意发现 Understand,感觉挺好,熟悉一下,可以用来看代码.体验不错.</p><span id="more"></span><h2 id="导入流程"><a href="#导入流程" class="headerlink" title="导入流程"></a>导入流程</h2><p>和sourceinsight一样,都是新建一个project,在此基础上进行代码的阅读和修改;<br><img src="/img/efficiency_tool_understand/e5d3267c.png" alt="e5d3267c.png"><br><img src="/img/efficiency_tool_understand/e34dd270.png" alt="e34dd270.png"><br><img src="/img/efficiency_tool_understand/4ddef3ef.png" alt="4ddef3ef.png"></p><ol><li>new project </li><li>import project files</li></ol><h2 id="部分实用快捷键"><a href="#部分实用快捷键" class="headerlink" title="部分实用快捷键"></a>部分实用快捷键</h2><ol><li>command + F:</li></ol><ul><li>在侧边的文件栏可以按照文件名进行搜索;</li><li>在打开的文件内可以搜索匹配的关键词;</li></ul><ol start="2"><li>command + G:</li></ol><p>在搜索的基础上可以查找匹配的结果的下一项;</p><ol start="3"><li>command +shift + G:</li></ol><p>在搜索的基础上可以查找匹配的结果的上一项,即反向查找;</p><ol start="4"><li>command + F3</li></ol><p>搜索选中的内容</p><ol start="5"><li>command + option + p/n<br>返回前一个/下一个修改的地方</li></ol><h2 id="部分实用的操作"><a href="#部分实用的操作" class="headerlink" title="部分实用的操作"></a>部分实用的操作</h2><ol><li>绘图能力<br><img src="/img/efficiency_tool_understand/a520cff1.png" alt="a520cff1.png"></li></ol><ul><li>uml 类图<br>在类名上右击,<code>Graphical Views</code> -&gt; <code>UML Class Diagram</code></li><li>查看选中类调用其他类的关系图(单向的调用)<br>在类名上右击,<code>Graphical Views</code> -&gt; <code>Cluster call</code></li><li>查看选中类和其他之间关系图(单向和双向的调用都会列出)<br>在类名上右击,<code>Graphical Views</code> -&gt; <code>Cluster callby Butterfly</code></li><li>查看选中类内部的调用关系<br>在类名上右击,<code>Graphical Views</code> -&gt; <code>Cluster callby Internal</code></li><li>查看选中类被哪些其他的类调用(单向的被调用)<br>在类名上右击,<code>Graphical Views</code> -&gt; <code>Cluster callby</code></li></ul><ol start="2"><li>预览能力,非常好用的功能<br><img src="/img/efficiency_tool_understand/8e21f7d4.png" alt="8e21f7d4.png"></li></ol><p>在类名上,右击 <code>View Information</code> -&gt; <code>Reference by Flat List</code>: 查看类被引用的列表.<br>注: 如果选中的是方法名的话,这里展示的就是方法被引用的列表了.</p><ol start="3"><li>文件搜索能力</li></ol><p><img src="/img/efficiency_tool_understand/aed73fba.png" alt="aed73fba.png"><br>除了直接使用搜索以外,可以在 <code>Entity Filter</code> 里进行过滤文件.</p><ol start="4"><li>收藏夹<br><img src="/img/efficiency_tool_understand/993c3f30.png" alt="993c3f30.png"></li></ol><p>用以将需要分析的文件分组</p><ol start="5"><li>查看调用链<br><img src="/img/efficiency_tool_understand/e2e50df5.png" alt="e2e50df5.png"></li></ol><p>通过选中方法右击 <code>explore</code> -&gt; <code>explore called by/Calls</code>,可以看不到方法被谁调用,自身又调用了谁,非常非常实用.</p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><ol><li>文件的检索,快捷键<br>目前试用,有几个点比较不舒适,文件的检索能力,没有找到对应的快捷键,能迅速的搜索文件.<br>退而求其次,采用为<code>Entity Filter</code> 自定义快捷键的方式,来达到此目的.</li></ol><p><img src="/img/efficiency_tool_understand/5e5424bf.png" alt="5e5424bf.png"></p><p>当前我采用的是 <code>control + e</code>,目前看能满足需求.</p><ol start="2"><li>在 <code>information</code> 里搜索关键词超级慢;</li><li>没有不可编辑的选项<br>阅读代码的时候,有时不小心误触什么键,可能导致代码变更,需要设置全部文件均不可修改. 不过这点可以通过权限控制,或者干脆不设置,小问题.</li><li>没办法快捷键检索类的属性和方法<br>目前可以查看属性只能通过<code>Information</code>. 方法可以通过菜单栏处的<code>scope list</code> 查看.没有快捷键进行关键词搜索,只能鼠标,这点太大的缺陷.关于这点,还是IDE或者VSC 比较方便.目前这个只能通过选中文件,在光标处于选中文件编辑区的情况下, <code>commnand + f</code> 进行检索,检索的顺序还不能模糊匹配.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Understand</tag>
      
      <tag>Tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jdk携带的一个HttpServer实现</title>
    <link href="/2020/04/20/jdk-HttpServer/"/>
    <url>/2020/04/20/jdk-HttpServer/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>记录一个意外发现的一个类 <code>com.sun.net.httpserver.HttpsServer</code>. 一个 Http 的 Server 端.</p><span id="more"></span><h1 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h1><ol><li>适用于泛前端类开发者,在无后端服务的情况下,可以用来mock数据或者mock后端行为,非常灵活.</li><li>适用于网络库的开发者,测试库的行为;</li></ol><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol><li>目前不支持<code>HTTP2</code>协议.</li></ol><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><h3 id="自定义一个-HTTP-服务"><a href="#自定义一个-HTTP-服务" class="headerlink" title="自定义一个 HTTP 服务;"></a>自定义一个 HTTP 服务;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpsServer server = HttpsServer.create(<span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-number">8500</span>), <span class="hljs-number">0</span>);<br>HttpsConfigurator httpsConfigurator = <span class="hljs-keyword">new</span> HttpsConfigurator(SSLContext.getDefault());<br>server.setHttpsConfigurator(httpsConfigurator);<br>HttpContext context = server.createContext(<span class="hljs-string">&quot;/example&quot;</span>);<br>context.setHandler(<span class="hljs-keyword">new</span> CustomHttpHandler());<br>server.start();<br></code></pre></td></tr></table></figure><p>该 Http 服务,是在本机的 <code>8500</code> 端口启动的; 根目录为 <code>example</code>. 所以,直接通过 <code>http://127.0.0.1:8500/example</code> 即可访问.</p><h3 id="Server-的行为定义"><a href="#Server-的行为定义" class="headerlink" title="Server 的行为定义"></a>Server 的行为定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomHttpHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpHandler</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">(HttpExchange exchange)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        URI requestURI = exchange.getRequestURI();<br>        printRequestInfo(exchange);<br>        String response = <span class="hljs-string">&quot;This is the response at &quot;</span> + requestURI;<br><br>        exchange.sendResponseHeaders(<span class="hljs-number">200</span>, <span class="hljs-number">0</span>);<br><br>        OutputStream os = exchange.getResponseBody();<br>        os.write(response.getBytes());<br>        os.close();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printRequestInfo</span><span class="hljs-params">(HttpExchange exchange)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-- headers --&quot;</span>);<br>        Headers requestHeaders = exchange.getRequestHeaders();<br>        requestHeaders.entrySet().forEach(System.out::println);<br><br>        System.out.println(<span class="hljs-string">&quot;-- principle --&quot;</span>);<br>        HttpPrincipal principal = exchange.getPrincipal();<br>        System.out.println(principal);<br><br>        System.out.println(<span class="hljs-string">&quot;-- HTTP method --&quot;</span>);<br>        String requestMethod = exchange.getRequestMethod();<br>        System.out.println(requestMethod);<br><br>        System.out.println(<span class="hljs-string">&quot;-- query --&quot;</span>);<br>        URI requestURI = exchange.getRequestURI();<br>        String query = requestURI.getQuery();<br>        System.out.println(query);<br><br><br>        InputStream requestBody = exchange.getRequestBody();<br>        <span class="hljs-keyword">if</span> (requestBody == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> available = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            available = requestBody.available();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;request body available:&quot;</span> + available);<br>        printMessage(requestBody);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printMessage</span><span class="hljs-params">(InputStream requestBody)</span> </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                <span class="hljs-keyword">int</span> read = requestBody.read(buffer);<br>                <span class="hljs-keyword">if</span> (!(read &gt; <span class="hljs-number">0</span>)) <span class="hljs-keyword">break</span>;<br>                System.out.println(<span class="hljs-string">&quot;body:::::&quot;</span> + <span class="hljs-keyword">new</span> String(buffer));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h2><blockquote><p>生成自签的证书的命令如下:<br>keytool -genkey -alias alias -keyalg RSA -keystore keystore.jks -keysize 2048</p></blockquote><h3 id="自定义一个-Https-服务"><a href="#自定义一个-Https-服务" class="headerlink" title="自定义一个 Https 服务;"></a>自定义一个 Https 服务;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// setup the socket address</span><br>    InetSocketAddress address = <span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-number">8500</span>);<br><br>    <span class="hljs-comment">// initialise the HTTPS server</span><br>    HttpsServer httpsServer = HttpsServer.create(address, <span class="hljs-number">0</span>);<br>    SSLContext sslContext = SSLContext.getInstance(<span class="hljs-string">&quot;TLS&quot;</span>);<br><br>    <span class="hljs-comment">// initialise the keystore</span><br>    <span class="hljs-comment">// 记得替换密码</span><br>    <span class="hljs-keyword">char</span>[] password = <span class="hljs-string">&quot;123456&quot;</span>.toCharArray();<br>    KeyStore ks = KeyStore.getInstance(<span class="hljs-string">&quot;JKS&quot;</span>);<br>    FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;keystore.jks&quot;</span>);<br>    ks.load(fis, password);<br><br>    <span class="hljs-comment">// setup the key manager factory</span><br>    KeyManagerFactory kmf = KeyManagerFactory.getInstance(<span class="hljs-string">&quot;SunX509&quot;</span>);<br>    kmf.init(ks, password);<br><br>    <span class="hljs-comment">// setup the trust manager factory</span><br>    TrustManagerFactory tmf = TrustManagerFactory.getInstance(<span class="hljs-string">&quot;SunX509&quot;</span>);<br>    tmf.init(ks);<br><br>    <span class="hljs-comment">// setup the HTTPS context and parameters</span><br>    sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), <span class="hljs-keyword">null</span>);<br>    httpsServer.setHttpsConfigurator(<span class="hljs-keyword">new</span> HttpsConfigurator(sslContext) &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpsParameters params)</span> </span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// initialise the SSL context</span><br>                SSLContext context = getSSLContext();<br>                SSLEngine engine = context.createSSLEngine();<br>                params.setNeedClientAuth(<span class="hljs-keyword">false</span>);<br>                params.setCipherSuites(engine.getEnabledCipherSuites());<br>                params.setProtocols(engine.getEnabledProtocols());<br><br>                <span class="hljs-comment">// Set the SSL parameters</span><br>                SSLParameters sslParameters = context.getSupportedSSLParameters();<br>                params.setSSLParameters(sslParameters);<br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Failed to create HTTPS port&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br>    httpsServer.createContext(<span class="hljs-string">&quot;/example&quot;</span>, <span class="hljs-keyword">new</span> SimpleHttpsServer.SimpleHandler());<br>    httpsServer.start();<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>    System.out.println(<span class="hljs-string">&quot;Failed to create HTTPS server on port &quot;</span> + <span class="hljs-number">8500</span> + <span class="hljs-string">&quot; of localhost&quot;</span>);<br>    exception.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义Https服务处理"><a href="#自定义Https服务处理" class="headerlink" title="自定义Https服务处理"></a>自定义Https服务处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleHttpsServer</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpHandler</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">(HttpExchange t)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>            printRequestInfo(t);<br>            String response = <span class="hljs-string">&quot;This is the response&quot;</span>;<br>            HttpsExchange httpsExchange = (HttpsExchange) t;<br>            httpsExchange.getResponseHeaders().add(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>            httpsExchange.sendResponseHeaders(<span class="hljs-number">200</span>, response.getBytes().length);<br>            OutputStream os = httpsExchange.getResponseBody();<br>            os.write(response.getBytes());<br>            os.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printRequestInfo</span><span class="hljs-params">(HttpExchange exchange)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-- headers --&quot;</span>);<br>        Headers requestHeaders = exchange.getRequestHeaders();<br>        requestHeaders.entrySet().forEach(System.out::println);<br><br>        System.out.println(<span class="hljs-string">&quot;-- protocol --&quot;</span>);<br>        String protocol = exchange.getProtocol();<br>        System.out.println(protocol);<br><br><br>        System.out.println(<span class="hljs-string">&quot;-- principle --&quot;</span>);<br>        HttpPrincipal principal = exchange.getPrincipal();<br>        System.out.println(principal);<br><br>        System.out.println(<span class="hljs-string">&quot;-- HTTP method --&quot;</span>);<br>        String requestMethod = exchange.getRequestMethod();<br>        System.out.println(requestMethod);<br><br>        System.out.println(<span class="hljs-string">&quot;-- query --&quot;</span>);<br>        URI requestURI = exchange.getRequestURI();<br>        String query = requestURI.getQuery();<br>        System.out.println(query);<br><br><br>        InputStream requestBody = exchange.getRequestBody();<br>        <span class="hljs-keyword">if</span> (requestBody == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> available = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            available = requestBody.available();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;request body available:&quot;</span> + available);<br>        printMessage(requestBody);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printMessage</span><span class="hljs-params">(InputStream requestBody)</span> </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                <span class="hljs-keyword">int</span> read = requestBody.read(buffer);<br>                <span class="hljs-keyword">if</span> (!(read &gt; <span class="hljs-number">0</span>)) <span class="hljs-keyword">break</span>;<br>                System.out.println(<span class="hljs-string">&quot;body content is: &quot;</span> + <span class="hljs-keyword">new</span> String(buffer));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="末尾"><a href="#末尾" class="headerlink" title="末尾"></a>末尾</h1><p>如果知道实现了Http2的,还望告知.</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NDK学习之JNI_Tip</title>
    <link href="/2020/02/13/ndk-jni-tip/"/>
    <url>/2020/02/13/ndk-jni-tip/</url>
    
    <content type="html"><![CDATA[<h1 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h1><p>本篇是对于 <code>Google NDK GUIDES</code> 中 JNI tips 的总结,是关于 JNI <strong>开发过程</strong> 中的一些原则和注意点,没有原理. 所有的内容适用于 Java 和 Kotlin.</p><p class="note note-primary">约定</p>- managed code (Java/kotlin编写的代码)- native code  (C/C++编写的代码)<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><p>整体上大的原则是: 尽量减少 JNI 层的操作. 故而有以下3点注意事项,重要性由高到低依次为:</p><ol><li>JNI 层调用传递的数据尽量少,调用的频率尽量低;</li><li>JNI Java 调用 native 避免异步调用,异步操作都放在 Java 层.这指的是 JNI 调用,不包含 native 库自身有些异步操作;</li><li>JNI 操作涉及到的线程越少越好.即使要用线程池,也是由线程池的管理者负责JNI之间的交互,而不是由工作线程直接负责交互;</li><li>为了方便维护和重构, 保证JNI相关的代码在固定的位置,容易辨认,且接口尽量少;</li></ol><h2 id="JavaVM-amp-JNIEnv"><a href="#JavaVM-amp-JNIEnv" class="headerlink" title="JavaVM &amp; JNIEnv"></a>JavaVM &amp; JNIEnv</h2><ul><li>二者本质上都是指向函数表的<strong>指针的指针</strong>.</li><li>虽然理论上来说,每个进程可以有多个 JavaVM 对象,但是 Android 规定,每个进程只能有一个 JavaVM ;</li></ul><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>JNIEnv 是个<strong>线程局部变量</strong>,线程不可共享,请勿在线程之间共享 JNIEnv 对象; 如若无其他方式获取 JNIEnv,可以采如下方式;<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">JNIEnv* env;<br>vm-&gt;AttachCurrentThread(&amp;env, <span class="hljs-literal">nullptr</span>); <span class="hljs-comment">// 此处的 vm 即为JavaVM 对象,可以处理成全局单例;</span><br></code></pre></td></tr></table></figure></li><li>由于 JavaVM &amp; JNIEnv 在 C 和 C++ 中的定义是不一样(“jni.h” 中包含了二者的不同定义,根据包含”jni.h”的是C还是C++),所以,如果头文件会在 C/C++ 中共享的话,则不能简单的 include,头文件中的方法声明就需要根据C/C++做区分处理;</li></ol><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><ul><li>所有的线程都是 Linux 线程,都归属内核调度<ul><li>Java/kotlin 创建; </li><li>native 创建,然后 <em>AttachCurrentThread</em> 到 JavaVM 上; </li></ul></li><li>创建线程最好的方式是通过 Java/kotlin 创建<ul><li>好处一: 有充足的栈空间;</li><li>好处二: 相对 native 创建线程,可以分配正确的 ThreadGroup;</li><li>好处三: 通过 JNI 调用的 native 代码可以使用和 Java 中相同的 classloader;</li><li>好处四: 相对 native 创建线程,方便设置线程 name,在 debug 的时候很方便;</li></ul></li><li>native 方式创建线程,并 attach<ul><li>在 Java 层相应的创建一个 java.lang.Thread 对象;</li><li>新建的线程添加进 “main” ThreadGroup,debug 时,就可以看到了;</li><li>对一个 AttachCurrentThread 过的线程上再次 AttachCurrentThread 无副作用;</li></ul></li><li>Android 不会挂起正在执行 native 代码的线程<ul><li>GC 或者 debug 的时候,即使发出了挂起的请求,也只会在下次进行 JNI 请求的时候挂起;</li></ul></li><li>已经 attach 过的线程退出时,必须调用 DetachCurrentThread 方法<ul><li>如果调用不方便,可以通过 pthread_key_create 定义一个 析构函数,在线程退出的时候,调用 DetachCurrentThread;</li></ul></li></ul><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h3><ol><li>在 native 层线程在未 attach 之前,是没有 JNIEnv 的,<strong>不能进行 JNI 操作</strong>;</li><li>线程资源优先通过 Java 层创建;</li><li>JNI 调用的 native 方法过于耗时会影响 CPU 调度,间接影响主线程,注意 native 方法的耗时;</li></ol><h2 id="jclass-jmethodID-and-jfieldID"><a href="#jclass-jmethodID-and-jfieldID" class="headerlink" title="jclass, jmethodID, and jfieldID"></a>jclass, jmethodID, and jfieldID</h2><ul><li><p>JNI native 层访问 Java 层的<strong>属性</strong>的时候,则需要以下三个步骤;</p><ul><li>jclass,引用实例对应的 jclass 对象,通过 findclass  获取;</li><li>jfieldID,属性对应的 ID,通过 GetFieldID  获取;</li><li>根据属性的变量类型,通过对应方法获取该对象实例的属性的值,如 GetIntField;</li></ul></li><li><p>JNI native 层访问 Java 层的<strong>方法</strong>的时候,则需要以下三个步骤;</p><ul><li>jclass,引用实例对应的 jclass 对象,通过 findclass  获取;</li><li>jmethodID,方法对应的 ID,通过 GetMethodID  获取;</li><li>根据方法的签名,通过对应方法调用方法,如 CallIntMethod;</li></ul></li><li><p>关于 jfieldID 和 jmethodID 的查找是需要经过字符串比较的,然一旦已经存在 jfieldID 和 jmethodI,获取值/方法调用 是很快的.</p></li><li><p>jfieldID 和 jmethodID 本质上,只是指向内部运行时数据结构的指针;</p></li><li><p>jfieldID 和 jmethodID  只要 class 没有被卸载,是一直有效的; 但是在 Android 上,虽然概率很低,但是 class 也是可能被卸载的,所以,需要做好安全防护工作;</p></li></ul><h3 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h3><ol><li>为了性能考虑,缓存 jfieldID 和 jmethodID; 因为每个进程只有一个 JavaVM,所以在 native 代码中的 static 存储区域中缓存是合适的.</li><li>与 jfieldID 和 jmethodID 不同,jclass 是个 class 的引用,缓存的时候,必须用 <strong>GlobalRef</strong> 进行保护;</li></ol><p>综上,缓存 ID的最佳方式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * We use a class initializer to allow the native code to cache some</span><br><span class="hljs-comment">     * field offsets. This native function looks up and caches interesting</span><br><span class="hljs-comment">     * class/field/method IDs. Throws on failure.</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">nativeInit</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        nativeInit();<br>    &#125;<br></code></pre></td></tr></table></figure><p>在 C/C++ 层面实现 nativeInit 方法,进行 ID 的查找和缓存,这样只会在 class 加载时候调用一次,卸载重新加载也会得到调用,可以保证安全;</p><h2 id="Local-and-global-references"><a href="#Local-and-global-references" class="headerlink" title="Local and global references"></a>Local and global references</h2><p>该特性适用于所有继承了 jobject 类的对象: jclass,jstring,jarray;<br><img src="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/images/types4.gif" alt="jobject的继承关系"><br>如未特殊说明,以下的对象也都是指的 jobject 或者其子类对应的对象;</p><h3 id="Local-references"><a href="#Local-references" class="headerlink" title="Local references"></a>Local references</h3><p>通过 JNI 传递到 native 方法的所有 object 参数以及 native 方法返回的 object 对象,都是 <strong>“local reference”</strong>.<br>特点: 在 <strong>当前线程</strong> 的 <strong>当前 native 方法生命周期内</strong> (条件),该 “local reference” 是有效的.不满足这个条件,即使对象依旧存活,依然是无效的. 换句话说:在 return java 之前都是有效的;</p><h4 id="Local-的限制"><a href="#Local-的限制" class="headerlink" title="Local 的限制"></a>Local 的限制</h4><p>native 函数结束之后, local 引用就会失效,但是有时候需要使用大量的 local 引用.典型的像在遍历数组的时候,需要大量创建 local 引用,这时就需要手动释放(DeleteLocalRef),而不应该依赖 JNI 处理.</p><ul><li>例外:<br>一个 native 创建的线程,执行过 AttachCurrentThread 操作,在 detach 之前,程序并不会自动删除 local 引用,创建的任何local 都需要自己手动删除.</li></ul><h5 id="8-0-之前-和具体版本相关"><a href="#8-0-之前-和具体版本相关" class="headerlink" title="8.0 之前(和具体版本相关)"></a>8.0 之前(和具体版本相关)</h5><p>只预留了 16 个了 local 引用的 slot(槽位),超过的,要自己手动释放,否则会crash.也可以使用 EnsureLocalCapacity/PushLocalFrame 来增加槽位.<br>实测下来: 每个槽位对应 32 个引用,所以,16个槽位,可以存放 512 个 local 引用;</p><h5 id="8-0-之后"><a href="#8-0-之后" class="headerlink" title="8.0 之后"></a>8.0 之后</h5><p>不限制数量.</p><h3 id="global-references"><a href="#global-references" class="headerlink" title="global references"></a>global references</h3><p>global 正好是为了突破 local 所产生的限制: 当前线程 与 当前 native 方法;<br>通过  NewGlobalRef 和 NewWeakGlobalRef (可以接收 local 和 global 引用作为参数) 来创建 global 引用,只有调用在 DeleteGlobalRef 之后才会失效;</p><h3 id="引用的适用范围"><a href="#引用的适用范围" class="headerlink" title="引用的适用范围"></a>引用的适用范围</h3><p>对于接收引用的 native 方法,可以接收 local 引用 和 global 引用,除了生命周期以外,用法一致;</p><h4 id="版本限制"><a href="#版本限制" class="headerlink" title="版本限制"></a>版本限制</h4><p>从 Android4.0 开始,weak global 引用才可像其他的引用一样使用,在此之前,只可用于 NewLocalRef, NewGlobalRef, and DeleteWeakGlobalRef.</p><h3 id="引用之间的比较"><a href="#引用之间的比较" class="headerlink" title="引用之间的比较"></a>引用之间的比较</h3><p>对于指向<strong>相同对象</strong>的<strong>不同引用</strong>的<strong>值是很可能不一样</strong>的.例如,针对同一个对象连续调用 NewGlobalRef 返回的引用,值就可能不同.所以对于两个不同的引用,判断是否指向同一个对象,用 <strong>IsSameObject</strong> 函数判断,千万不要用 <strong>==</strong> .</p><ul><li>特性带来的影响:</li></ul><ol><li>不能假设 native 层中的对象引用是常量或者唯一的; </li><li>同一个方法的两次调用,表示对象的引用可能是不同;</li><li>不同对象的引用可能具有相同的值;</li></ol><p>故而,切勿将 jobject 作为键;</p><h3 id="注意点-3"><a href="#注意点-3" class="headerlink" title="注意点:"></a>注意点:</h3><ol><li>引用仅针对 jobject 及其子类. 而 jfieldID 和  jmethodID 不适用,不应该传递给 NewGlobalRef</li><li>GetStringUTFChars 和 GetByteArrayElements 返回的是原始数据指针,非对象引用,他们可以在线程间传递,在执行对应的 release 之前,一直有效</li><li>总的来说, native 代码中创建的 local 引用,及时的显式 delete</li><li>谨慎使用全局引用,太多的全局引用会导致调试困难</li><li>引用是否指向同一个对象,用 IsSameObject 方法</li><li>典型的使用代码:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">jclass localClass = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;MyClass&quot;</span>);<br>jclass globalClass = <span class="hljs-keyword">reinterpret_cast</span>&lt;jclass&gt;(env-&gt;<span class="hljs-built_in">NewGlobalRef</span>(localClass));<br></code></pre></td></tr></table></figure></li></ol><h2 id="UTF-8-and-UTF-16-strings"><a href="#UTF-8-and-UTF-16-strings" class="headerlink" title="UTF-8 and UTF-16 strings"></a>UTF-8 and UTF-16 strings</h2><h3 id="Java-与-JNI-编码不一致"><a href="#Java-与-JNI-编码不一致" class="headerlink" title="Java 与 JNI 编码不一致"></a>Java 与 JNI 编码不一致</h3><ul><li>Java 中用的字符编码是 UTF-16</li><li>JNI 为了方便起见,采用的是 Modified UTF-8(将 \u0000 编码成 <em>0xc0 0x80</em> ,而不是 <em>0x00</em>,这样得到的字符串,就是一个 C-style 的字符串)</li></ul><h4 id="利弊"><a href="#利弊" class="headerlink" title="利弊"></a>利弊</h4><ul><li>优点: JNI 中可以直接用 libc 字符串相关的函数;</li><li>缺点: 标准的 UTF-8 的数据传递给 JNI 函数时,可能无法正常工作;</li></ul><h2 id="注意点-4"><a href="#注意点-4" class="headerlink" title="注意点"></a>注意点</h2><ol><li>如果可行的话,就全部转成 UTF-16,这样操作的最快.</li><li>GetStringChars:返回的是 UTF-16 的数据,UTF-16 的字符串是没有结尾的符号的,C style 的字符串函数是没法判断结尾的,所以,如果用 UTF-16 的话,需要自己维护一个字符串<strong>长度</strong>和 jchar 指针.</li><li>GetStringUTFChars:返回的是 Modified UTF-8 的数据,可以直接用 C style 的字符串函数.</li><li>GetStringChars 返回值是 jchar 指针,GetStringUTFChars 返回的是 char*,都是原始数据的指针,而不是前一个section里的 reference,在调用对应的 release 方法之前,都是有效的,不用担心作用域问题;相应的,不用时,及时 release;</li><li>NewStringUTF:参数必须是 Modified UTF-8 格式的,切勿将文件流或者网络下载的标准 UTF-8 格式的数据直接传;</li></ol><h2 id="处理建议"><a href="#处理建议" class="headerlink" title="处理建议"></a>处理建议</h2><h3 id="策略一"><a href="#策略一" class="headerlink" title="策略一:"></a>策略一:</h3><p>JNI jstring 通过 Java 层的 String 的 getBytes(“UTF-8”) 方法来获取标准 UTF-8 格式的字符串;<br>当 JNI 返回 Java 层数据时,Java 层可以通过 String 对应的构造方法处理;</p><h3 id="策略二"><a href="#策略二" class="headerlink" title="策略二:"></a>策略二:</h3><p>在 native 层面进行编码的转换,JNI 不变,依旧使用 Modified UTF-8,通过算法处理编码转换.</p><h2 id="Primitive-arrays"><a href="#Primitive-arrays" class="headerlink" title="Primitive arrays"></a>Primitive arrays</h2><p>JNI 提供的数组操作需要一个一个的操作,有些麻烦.原生数组可以使得数组像被 native 中定义的数组一样,可以被直接操作.</p><p>为了高效 Get<PrimitiveType>ArrayElements(array,isCopy) 系列的函数,既可以返回真实数组的指针,也可以分配内存,拷贝到 native;</p><ol><li>无论哪种,指针在调用 release 之前,都是有效的.</li><li>如果未采用复制方式,返回的真实数组指针,那么,数组的对象将会固定不变,即使是在 GC 进行堆压缩的时候.</li><li>get 的数组,需要进行 release,并且不能对一个空指针进行 release.</li></ol><p>release 方法有个 mode 参数,执行的效果取决于 Get<PrimitiveType>ArrayElements 方法返回的指针是指向的原始数据,还是复制的内存拷贝;</p><ol><li>0<ul><li>a. Actual: 数组对象取消固定.</li><li>b. Copy: 数据重新拷贝回去,原先分配的内存空间<strong>释放</strong>.</li></ul></li><li>JNI_COMMIT<ul><li>a. Actual: does nothing.</li><li>b. Copy: 数据重新拷贝回去,原先分配的内存空间<strong>并不释放</strong>.</li></ul></li><li>JNI_ABORT<ul><li>a. Actual: 数组对象取消固定. 之前的写入已经生效.</li><li>b. Copy: 原先分配的内存空间释放,数据操作丢失.</li></ul></li></ol><p>一个常见的错误是: 如果 isCopy 是 false,则可以省略 release 操作,这个是非常错误的做法,因为不进行 release 的话,则原始数据将会一直固定,得不到回收器的回收.<br>其次需要注意: JNI_ABORT 并不会释放数组,需要以其他的 mode 再次调用 release 进行释放,这个是很容易犯错的;比如, JNI_ABORT 之后,再调用 0;</p><h3 id="注意点-5"><a href="#注意点-5" class="headerlink" title="注意点"></a>注意点</h3><ol><li>根据需求,决定 Get<PrimitiveType>ArrayElements 是否 copy 数组到 native </li><li>无论何种方式获取的数组,都需要 release</li><li>release(JNI_ABORT) 并不会释放数组,需要再调用 release(0)</li></ol><h2 id="Region-calls"><a href="#Region-calls" class="headerlink" title="Region calls"></a>Region calls</h2><p>如对 Get<PrimitiveType>ArrayElements 和 GetStringChars 的需求都是 <strong>copy=true</strong> 的话,则 Region call 会是个不错的替代方案,提供了更多的灵活性和更好的性能.</p><h3 id="考虑一个场景-需要字节数组中的-len-长度的部分"><a href="#考虑一个场景-需要字节数组中的-len-长度的部分" class="headerlink" title="考虑一个场景: 需要字节数组中的 len 长度的部分"></a>考虑一个场景: 需要字节数组中的 len 长度的部分</h3><ol><li>采用 Get<PrimitiveType>ArrayElements<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// </span><br>jbyte* data = env-&gt;<span class="hljs-built_in">GetByteArrayElements</span>(array, <span class="hljs-literal">true</span>);<br><span class="hljs-keyword">if</span> (data != <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">memcpy</span>(buffer, data, len); <span class="hljs-comment">// extra,copy part</span><br>    env-&gt;<span class="hljs-built_in">ReleaseByteArrayElements</span>(array, data, JNI_ABORT);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>采用 GetByteArrayRegion <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">env-&gt;<span class="hljs-built_in">GetByteArrayRegion</span>(array, <span class="hljs-number">0</span>, len, buffer);<br></code></pre></td></tr></table></figure></li></ol><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><table><thead><tr><th align="center">方案</th><th align="left">代码书写</th><th align="left">JNI调用次数</th><th align="left">固定Java数组</th></tr></thead><tbody><tr><td align="center">方式一</td><td align="left">复杂,需要执行额外的一次复制操作</td><td align="left">2</td><td align="left">固定</td></tr><tr><td align="center">方式二</td><td align="left">简洁,出错率低</td><td align="left">1</td><td align="left">不固定</td></tr></tbody></table><p>有 Get,也同样有对应的 Set 方法,用于将数据复制回数组或者字符串;</p><h3 id="注意点-6"><a href="#注意点-6" class="headerlink" title="注意点"></a>注意点</h3><ol><li>当需要对数组或者字符串进行<strong>copy</strong>操作时候,优先用对应的 Region 操作</li></ol><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><ol><li>当发生异常的时候,大多数的 JNI 方法将不能调用,只有固定的几个方法能调用,参见 <a href="https://developer.android.com/training/articlesperf-jni#exceptions_1">仍可以调用的方法</a></li><li>由代码中断触发的异常,并不会释放 native 的栈信息,Android 目前也不支持 C++ 的 Exception; JNI 通过 Throw 和 ThrowNew 指令,只是在当前的线程中设置了一个异常的指针,等到 native 方法结束,返回 Java 层的时候,这时候才会被处理.</li><li>JNI 无法持有 Throwable 这个对象,如果需要在 native 层处理异常,需要 findclass Java 层的 Throwable 类,通过相关方法处理.</li></ol><h3 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h3><ol><li>少部分可以通过检查返回值,检查比较简单,比如 NewString,判断返回值是否为 null,进行判断.</li><li>大部分需要主动检查异常,比如 CallObjectMethod 函数,因为一旦抛出异常,此时的返回值是无效的.</li></ol><h3 id="涉及到的-JNI-方法"><a href="#涉及到的-JNI-方法" class="headerlink" title="涉及到的 JNI 方法"></a>涉及到的 JNI 方法</h3><ol start="5"><li>ExceptionCheck 与 ExceptionOccurred, 进行异常的检查和捕获. </li><li>ExceptionClear 可以清除异常,但是清除异常不是一个好的处理手段.</li></ol><h3 id="注意点-7"><a href="#注意点-7" class="headerlink" title="注意点"></a>注意点</h3><ol><li>通过 ExceptionCheck 检测是否有异常,通过 Throw 抛出到 Java 层进行处理.</li><li>如果异常是可以忽略的,先 ExceptionClear,再继续执行其他 JNI 操作,否则会 crash.</li></ol><h2 id="Extended-checking"><a href="#Extended-checking" class="headerlink" title="Extended checking"></a>Extended checking</h2><p>JNI 对错误的检查很少,所以 Android 提供了一种称为 <strong>CheckJNI</strong> 的模式,通过修改 <em>JavaVM</em> 和 <em>JNIEnv</em> 的函数表指针,实现在调用所有的 JNI 函数之前,都会进行一系列的检查.</p><p><a href="https://developer.android.google.cn/training/articles/perf-jni#extended-checking">具体的检查项</a>: </p><h3 id="注意点-8"><a href="#注意点-8" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p>模拟器: 默认开启</p></li><li><p>rooted device</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell stop<br>adb shell setprop dalvik.vm.checkjni true<br>adb shell start<br></code></pre></td></tr></table></figure><p>开启后会在 logcat 里看到 <em>D AndroidRuntime: CheckJNI is ON</em></p></li><li><p>regular device: 不会影响正在运行的App,而且开启时,所有启动的App都会检查.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 设备重启后失效<br>adb shell setprop debug.checkjni 1<br></code></pre></td></tr></table></figure><p>开启后会在 logcat 里看到 <em>D Late-enabling CheckJNI</em></p></li><li><p>针对单个App进行检查<br>android:debuggable 设置为 true 即可,正常的 debug版本不需要手动配置,Android build-tool 会自动设置;</p></li></ol><h2 id="Native-libraries"><a href="#Native-libraries" class="headerlink" title="Native libraries"></a>Native libraries</h2><h3 id="加载动态库的方式"><a href="#加载动态库的方式" class="headerlink" title="加载动态库的方式"></a>加载动态库的方式</h3><p>以下以打包出的动态so文件为: <strong>lib名字.so</strong> 为例.</p><ol><li><p>系统默认方式加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    System.loadLibrary(<span class="hljs-string">&quot;名字&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>官方推荐 ReLinker 方式<br>在旧版本 Android 的 PackageManager 有 bug 在 App 升级时 so 库可能没有成功复制到 /data/data/packageName/lib/ 下,导致 “java.lang.UnsatisfiedLinkError”,故而 Google 推荐用  <a href="https://github.com/KeepSafe/ReLinker">ReLinker</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ReLinker.loadLibrary(context, <span class="hljs-string">&quot;名字&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>Facebook SoLoader<br>ReLinker 不能解决 so 依赖问题, <a href="https://github.com/facebook/SoLoader">SoLoader</a> 可以解决这个问题.<br>PS: 接入复杂,我还没玩过.可以参考 Facebook 的 RN 和 fresco.</p></li></ol><h3 id="确保运行时可以查找-native-方法"><a href="#确保运行时可以查找-native-方法" class="headerlink" title="确保运行时可以查找 native 方法"></a>确保运行时可以查找 native 方法</h3><h4 id="RegisterNatives-显式的注册"><a href="#RegisterNatives-显式的注册" class="headerlink" title="RegisterNatives 显式的注册"></a>RegisterNatives 显式的注册</h4><ol><li>实现  JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved)</li><li>在 JNI_OnLoad 方法中,使用 RegisterNatives 注册所有的 native方法</li><li>加参数 -fvisibility=hidden 可以保证 只有 JNI_OnLoad 被导出,这样的 so 文件更小,更快,且能避免和App中加载的其他so冲突,但是这会带来一个问题,crash的时候,栈信息会更少</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">JNIEXPORT jint <span class="hljs-title">JNI_OnLoad</span><span class="hljs-params">(JavaVM* vm, <span class="hljs-keyword">void</span>* reserved)</span> </span>&#123;<br>    JNIEnv* env;<br>    <span class="hljs-keyword">if</span> (vm-&gt;<span class="hljs-built_in">GetEnv</span>(<span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">void</span>**&gt;(&amp;env), JNI_VERSION_1_6) != JNI_OK) &#123;<br>        <span class="hljs-keyword">return</span> JNI_ERR;<br>    &#125;<br><br>    <span class="hljs-comment">// Find your class. JNI_OnLoad is called from the correct class loader context for this to work.</span><br>    jclass c = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;com/example/app/package/MyClass&quot;</span>);<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> JNI_ERR;<br><br>    <span class="hljs-comment">// Register your class&#x27; native methods.</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> JNINativeMethod methods[] = &#123;<br>        &#123;<span class="hljs-string">&quot;nativeFoo&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>, <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">void</span>*&gt;(nativeFoo)&#125;,<br>        &#123;<span class="hljs-string">&quot;nativeBar&quot;</span>, <span class="hljs-string">&quot;(Ljava/lang/String;I)Z&quot;</span>, <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">void</span>*&gt;(nativeBar)&#125;,<br>    &#125;;<br>    <span class="hljs-keyword">int</span> rc = env-&gt;<span class="hljs-built_in">RegisterNatives</span>(c, methods, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(methods)/<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(JNINativeMethod));<br>    <span class="hljs-keyword">if</span> (rc != JNI_OK) <span class="hljs-keyword">return</span> rc;<br><br>    <span class="hljs-keyword">return</span> JNI_VERSION_1_6;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>优点: </p><ul><li>前端即可检查方法是否存在.</li><li>可以仅导出 JNI_OnLoad 方法,使得共享库更小,更快.</li></ul><h4 id="使用-dlsym-动态查找"><a href="#使用-dlsym-动态查找" class="headerlink" title="使用 dlsym 动态查找"></a>使用 dlsym 动态查找</h4><ol><li>Java 类中声明一个 native 标识的方法.</li><li>借助 AndroidStudio 自动生成对应的 native 方法,方法名的生成规则为: <em>Java_点全部换成下划线的packageName_methodName</em>.<br>目前 AndroidStudio 自动生成这类代码的能力很强了.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT jstring JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_me_ele_wp_ndkstudy_MainActivity_stringFromJNI</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        JNIEnv *env,</span></span><br><span class="hljs-params"><span class="hljs-function">        jobject <span class="hljs-comment">/* this */</span>)</span> </span>&#123;<br>    std::string hello = <span class="hljs-string">&quot;Hello from C++&quot;</span>;<br>    <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-built_in">NewStringUTF</span>(hello.<span class="hljs-built_in">c_str</span>());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>优点:</p><ul><li>优点在于编写的代码较少,尤其借助 AndroidStudio,快捷方便.<br>缺点:</li><li>即使是一个参数的错误,也只能等到运行时调用的时候,才能发现.</li></ul><h3 id="native-中加载-Java-类"><a href="#native-中加载-Java-类" class="headerlink" title="native 中加载 Java 类"></a>native 中加载 Java 类</h3><ul><li><p>JNI_OnLoad 方法中的 FindClass<br>FindClass 函数的调用,用来查找和加载 Java 类所用的 classloader 与加载 so 文件的那个类所用的 classloader 是同一个,也就是说,在哪个类加载 so 文件,就用哪个类的 classloader.</p></li><li><p>其他地方 FindClass 函数的调用</p></li></ul><ol><li>使用的是 Java 栈顶关联的 classloader</li><li>如果不存在 Java 栈(native 线程,attach 到 VM 上),则使用 system classloader.</li></ol><blockquote><p>所以,在 JNI_OnLoad 中,查找出所有的 jclass,并进行缓存,是最好的选择.一旦成功获取 jclass,可以任何线程中共享 jclass;</p></blockquote><h3 id="注意点-9"><a href="#注意点-9" class="headerlink" title="注意点"></a>注意点</h3><ol><li>优先选择 ReLinker 进行 so 文件加载.</li><li>如果只有一个类有 native 的方法,so 文件的加载,则可以选择放在在该类的静态代码块中进行加载;否则,请在 Application 中进行加载,以确保 App 调用native 方法前,so 文件已经得到正确的加载.</li><li>方法的注册,看自己的选择. RegisterNatives 优点相对明显些,如果 native 方法数量不多,二者皆可.</li><li>native 如果用到 jclass,建议在 JNI_OnLoad 方法中进行缓存,避免出错.</li></ol><h2 id="64-bit-considerations"><a href="#64-bit-considerations" class="headerlink" title="64-bit considerations"></a>64-bit considerations</h2><h3 id="注意点-10"><a href="#注意点-10" class="headerlink" title="注意点"></a>注意点</h3><ol><li>为了支持 64 位的架构,Java 层存储 native 层的指针时,需要用 <strong>long</strong> 类型,而不是 <strong>int</strong>类型.</li></ol><h1 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h1><h2 id="UnsatisfiedLinkError-如何处理"><a href="#UnsatisfiedLinkError-如何处理" class="headerlink" title="UnsatisfiedLinkError 如何处理?"></a>UnsatisfiedLinkError 如何处理?</h2><h3 id="Library-名字-not-found"><a href="#Library-名字-not-found" class="headerlink" title="Library 名字 not found"></a>Library 名字 not found</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">java.lang.UnsatisfiedLinkError: Library 名字 <span class="hljs-keyword">not</span> found<br></code></pre></td></tr></table></figure><ol><li>如日志所述,确实没找到 so 文件;</li><li>so 文件存在,App 无权访问;<br>通过 <em>adb shell ls -l <path></em> 检查 so 文件是否存在,并检查App 是否有访问的权限;</li><li>so 库不是通过 NDK 打包的,库中有些函数,在设备上找不到.</li></ol><h3 id="No-implementation-found-for-functionName"><a href="#No-implementation-found-for-functionName" class="headerlink" title="No implementation found for functionName"></a>No implementation found for functionName</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">java.lang.UnsatisfiedLinkError: myfunc<br>        at Foo.<span class="hljs-built_in">myfunc</span>(Native Method)<br>        at Foo.<span class="hljs-built_in">main</span>(Foo.java:<span class="hljs-number">10</span>)<br>W/<span class="hljs-built_in">dalvikvm</span>(  <span class="hljs-number">880</span>): No implementation found <span class="hljs-keyword">for</span> native LFoo;.<span class="hljs-built_in">myfunc</span> ()V<br><br></code></pre></td></tr></table></figure><ol><li>so 库未成功加载,可以通过 logcat 检查加载 so 库的日志;</li><li>方法的名字或者签名不匹配;<br> a. 函数未 <em>extern “C JNIEXPORT</em>;<br> b. 显式注册时,签名不对.<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javap -s JavaClassName<br></code></pre></td></tr></table></figure>这个命令可以检查Java方法的签名.</li></ol><h2 id="FindClass-失败"><a href="#FindClass-失败" class="headerlink" title="FindClass 失败"></a>FindClass 失败</h2><ol><li>检查类名,方法名,签名等字符串是否写错,同时检查是否被混淆;</li><li>classloader 的问题: findclass 想在 native 代码关联的 classloader 中搜索类.如果此时是自己创建的 native 线程,再 attach 到 javavm 上,则会在系统 classloader 中查找,如果是自定义的类,必然失败;</li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>JNI_OnLoad 中执行一次 FindClass 查找，然后缓存类引用,各个线程则可以放心使用,<strong>优先推荐</strong>.</li><li>通过声明 native 方法来获取 Class 参数: 声明一个有 class 参数的 native 方法,Java 层将 class 传入.这个有些麻烦.</li></ol><h2 id="native-层和-Java-层共享原始数据"><a href="#native-层和-Java-层共享原始数据" class="headerlink" title="native 层和 Java 层共享原始数据"></a>native 层和 Java 层共享原始数据</h2><p>存在以下几种方式</p><ol><li><p>数据转换成 byte 数组,两边都处理 byte 数组<br>Java 层处理起来是很快的,但是 native 层是无法保证不进行 copy 操作的. GetByteArrayElements  和 GetPrimitiveArrayCritical 可以返回 Java 堆上的原始数据的指针,然而有时候,是会在 native 的堆上分配一块空间,再将数据 copy 到 native 堆上的这块空间.</p></li><li><p>直接字节缓存.<br>用 java.nio.ByteBuffer.allocateDirect,JNI 中的 NewDirectByteBuffer 函数来创建直接字节缓存,这个不像常规的 Java 字节 buffer 分配,这部分内存不是在 Java 堆上分配,这部分内存空间,可以交由 native 直接访问(通过 GetDirectBufferAddress 方法地址).<br>这个的弊端是: Java 层对这部分数据分访问可能很慢;</p></li></ol><p>使用哪种方法取决于</p><ol><li>大部分的数据访问是否是通过 Java/C++ ?</li><li>这部分数据最终是否需要传给系统 API?这部分 API 接收的数据格式是什么?(例如，如果数据最终传递给采用 byte[] 的函数，则采用 ByteBuffer 就不合适)</li></ol><p>如果二者差不多,优先使用直接字节缓存.</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://developer.android.google.cn/training/articles/perf-jni#top_of_page">Android JNI Tip</a></li><li><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html">Java Native Interface Specification</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NDK</tag>
      
      <tag>JNI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个开源的Java版的mockserver</title>
    <link href="/2019/10/14/mockserver-java-primer/"/>
    <url>/2019/10/14/mockserver-java-primer/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>记录另外一个mockserver的库使用方式. API 更加丰富.</p><span id="more"></span><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy">compile <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;org.mock-server&#x27;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;mockserver-netty&#x27;</span>, <span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;5.6.1&#x27;</span><br>compile <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;log4j&#x27;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;log4j&#x27;</span>, <span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;1.2.17&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="最简单的使用方式-请求-gt-返回mock的response"><a href="#最简单的使用方式-请求-gt-返回mock的response" class="headerlink" title="最简单的使用方式, 请求 -&gt; 返回mock的response"></a>最简单的使用方式, 请求 -&gt; 返回mock的response</h2><ul><li>Server端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MockServerTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 1. 8000端口启动服务</span><br>        ClientAndServer.startClientAndServer(<span class="hljs-number">8000</span>);<br><br>        <span class="hljs-comment">// 2. new 一个操作服务端行为的实例</span><br>        MockServerClient serverClient = <span class="hljs-keyword">new</span> MockServerClient(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8000</span>);<br><br>        <span class="hljs-comment">// 3. 定义服务端的行为</span><br>        serverClient<br>                .when(request()<br>                        .withMethod(<span class="hljs-string">&quot;GET&quot;</span>)<br>                        .withPath(<span class="hljs-string">&quot;/path1/function1&quot;</span>))<br>                .respond(response()<br>                        .withStatusCode(<span class="hljs-number">200</span>)<br>                        .withBody(<span class="hljs-string">&quot;body200&quot;</span>));<br><br><br>        serverClient<br>                .when(request()<br>                        .withMethod(<span class="hljs-string">&quot;GET&quot;</span>)<br>                        .withPath(<span class="hljs-string">&quot;/path2/function2&quot;</span>)<br>                        .withCookies(cookie(<span class="hljs-string">&quot;session&quot;</span>, <span class="hljs-string">&quot;4930456C-C718-476F-971F-CB8E047AB349&quot;</span>))<br>                        .withQueryStringParameters(param(<span class="hljs-string">&quot;cartId&quot;</span>, <span class="hljs-string">&quot;055CA455-1DF7-45BB-8535-4F83E7266092&quot;</span>)))<br>                .respond(response()<br>                        .withStatusCode(<span class="hljs-number">307</span>)<br>                        .withBody(<span class="hljs-string">&quot;body307&quot;</span>));<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Client 端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MockTestClient</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        OkHttpClient client = <span class="hljs-keyword">new</span> OkHttpClient();<br>        Request request = <span class="hljs-keyword">new</span> Request.Builder().url(<span class="hljs-string">&quot;http://localhost:8000/path1/function1&quot;</span>)<br>                .build();<br>        Response response = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            response = client.newCall(request).execute();<br>            System.out.println(response.body().string());<br>        &#125; <span class="hljs-keyword">catch</span> (<br>                IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上先记录最简单的使用,还有forward,callback,verify,retrieve,感觉用的不多,暂不记录,需要的时候再说吧.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/jamesdbloom/mockserver">mockserverRepo</a></li><li><a href="http://www.mock-server.com/#what-is-mockserver">mockserverPage</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>okhttp自带的mockserver教程</title>
    <link href="/2019/10/13/mockserver_primer/"/>
    <url>/2019/10/13/mockserver_primer/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本篇记录okhttp自带的mockserver这个库的使用方式.</p><p>作为一个网络库,okhttp自身也实现了一个mockserver,以方便写测试用例,这个库是独立的,也可以单独使用.</p><p>用作平时简单的mock数据,进行测试,很方便</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>此处以Android为例,Java除了依赖方式有点差异,其他一致;</p><ol><li>添加依赖</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">androidTestImplementation(<span class="hljs-string">&#x27;com.squareup.okhttp3:mockwebserver:3.13.1&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>代码使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MockRes</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> MockWebServer server = <span class="hljs-keyword">new</span> MockWebServer();<br>    <span class="hljs-keyword">public</span> OkHttpClient client = <span class="hljs-keyword">new</span> OkHttpClient();<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleTest</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 构造一个mock的 response</span><br>        MockResponse mockResponse = <span class="hljs-keyword">new</span> MockResponse().setBody(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-comment">// 添加到 server 中,server中将会按照FIFO的方式进行返回</span><br>        <span class="hljs-comment">// enqueue 一个,下次请求就返回队列中最靠前的,是同步的</span><br>        server.enqueue(mockResponse);<br><br>        <span class="hljs-comment">// 同步发起请求,虽然此处添加了path,实则在不自定义dispatcher的请求下,是不会影响前一步mockresponse的返回的</span><br>        Response executeRes = executeSynchronously(<span class="hljs-string">&quot;/a&quot;</span>);<br><br>        <span class="hljs-comment">// 消费mock的结果</span><br>        assertNotNull(executeRes);<br>        <span class="hljs-keyword">try</span> &#123;<br>            assertEquals(<span class="hljs-string">&quot;abc&quot;</span>, executeRes.body().string());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">customDispatch</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 采用自定义 dispatcher 之后,就不能再 调用 server.enqueue(mockResponse) 方法,所有的mock行为均定义在 Dispatcher 类中</span><br>        server.setDispatcher(<span class="hljs-keyword">new</span> Dispatcher() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> MockResponse <span class="hljs-title">dispatch</span><span class="hljs-params">(RecordedRequest request)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/a&quot;</span>.equals(request.getPath())) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MockResponse().setBody(<span class="hljs-string">&quot;A&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MockResponse().setBody(<span class="hljs-string">&quot;O&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 同步发起请求,path 为 /a 怎么应该返回body 是 A</span><br>        Response executeRes = executeSynchronously(<span class="hljs-string">&quot;/a&quot;</span>);<br><br>        <span class="hljs-comment">// 消费mock的结果</span><br>        assertNotNull(executeRes);<br>        <span class="hljs-keyword">try</span> &#123;<br>            assertEquals(<span class="hljs-string">&quot;A&quot;</span>, executeRes.body().string());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// 同步发起请求,path 为 /b 怎么应该返回body 是 O</span><br>        Response bRes = executeSynchronously(<span class="hljs-string">&quot;/b&quot;</span>);<br><br>        <span class="hljs-comment">// 消费mock的结果</span><br>        assertNotNull(bRes);<br>        <span class="hljs-keyword">try</span> &#123;<br>            assertEquals(<span class="hljs-string">&quot;O&quot;</span>, bRes.body().string());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Response <span class="hljs-title">executeSynchronously</span><span class="hljs-params">(String path, String... headers)</span> </span>&#123;<br>        Request.Builder builder = <span class="hljs-keyword">new</span> Request.Builder();<br>        builder.url(server.url(path));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, size = headers.length; i &lt; size; i += <span class="hljs-number">2</span>) &#123;<br>            builder.addHeader(headers[i], headers[i + <span class="hljs-number">1</span>]);<br>        &#125;<br>        Call call = client.newCall(builder.build());<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> call.execute();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/square/okhttp/blob/okhttp_3.13.x/okhttp-tests/src/test/java/okhttp3/CallTest.java">okhttp测试</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工程能力之C4模型</title>
    <link href="/2019/04/13/engineering-c4model/"/>
    <url>/2019/04/13/engineering-c4model/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>刚在InfoQ上看到一篇介绍C4Model的文章,觉得这个模型设计的很赞,很有指导意义,做个简单的记录.</p><span id="more"></span><h1 id="Why-为什么需要架构图"><a href="#Why-为什么需要架构图" class="headerlink" title="Why,为什么需要架构图?"></a>Why,为什么需要架构图?</h1><p><code>ThoughtWorks中国</code> 文章中有几句话我觉得很有道理,这里直接摘抄.</p><blockquote><p>“纸上的不是架构，每个人脑子里的才是” ; “那些精妙的方案之所以落不了地，是因为没有在设计上兼容人类的愚蠢”。</p></blockquote><p>我觉得,软件工程,或者软件中的术语发明的原因就是为了减少沟通的障碍,让大家在一个 <strong>平台</strong> 上对话.</p><p>而架构图可以起到如下作用;</p><ol><li>一方面: 让软件的开发人员自己,以及和软件开发相关的用户,PM等人员都能快速了解一个系统的业务模型;</li><li>另一方面: 利于开发人员相互之间协作,定下方案,因为自然语言是有模糊地带的,难以无歧义的传达;</li><li>利于软件系统的维护,一图胜千言.</li></ol><h1 id="What-C4-是什么呢"><a href="#What-C4-是什么呢" class="headerlink" title="What,C4 是什么呢?"></a>What,C4 是什么呢?</h1><p>详细的讲解,可以参考InfoQ的文章,这里做个总结.</p><blockquote><p><em>C4</em> 4个单词的首字母为C的单词的代表, 分别为: 上下文(Context),容器(Container),组件(Component)和代码(Code);</p></blockquote><p>依据不同的受众,分别抽象出了这四个级别.其中容器（应用程序、数据存储、微服务等,组件和代码来描述一个软件系统的静态结构.</p><h2 id="第-1-层：系统上下文"><a href="#第-1-层：系统上下文" class="headerlink" title="第 1 层：系统上下文"></a>第 1 层：系统上下文</h2><p>显示了正在构建的软件系统，以及构建的系统与用户及其他软件系统之间的关系。<br>这个层级的图,关注的是用户层面看到的关系,注重的是和准备开发的系统与外部系统和交互人之间的关系.</p><p><em>将用户,你的代建系统,已有的其他系统用不同的颜色进行区分;</em></p><h2 id="第-2-层：容器"><a href="#第-2-层：容器" class="headerlink" title="第 2 层：容器"></a>第 2 层：容器</h2><p>将软件系统放大，显示组成该软件系统的容器（应用程序、数据存储、微服务等）。</p><p>在这个层级,已经关注系统本身了,开始关注这个系统有哪些部分组成,不过粒度非常粗.</p><h2 id="第-3-层：组件"><a href="#第-3-层：组件" class="headerlink" title="第 3 层：组件"></a>第 3 层：组件</h2><p>将单个容器放大，以显示其中的组件。这些组件映射到代码库中的真实抽象（例如一组代码）。</p><p>在这个层级,关注的已经是系统中的模块具体的功能了,这部分可能对应了具体的功能模块.</p><h2 id="第-4-层：代码"><a href="#第-4-层：代码" class="headerlink" title="第 4 层：代码"></a>第 4 层：代码</h2><p>如若必要,可以放大个别组件，以显示该组件的实现方式。 一般以UML图的形式展示;</p><p>这个层级,是具体的开发人员关注的实现细节了,用于具体的功能逻辑的分析和展示.</p><h1 id="How-怎能画图呢"><a href="#How-怎能画图呢" class="headerlink" title="How,怎能画图呢?"></a>How,怎能画图呢?</h1><p>在C4官网,下有个<strong>Tooling</strong>节点,讲述了目前已有的几个画图工具.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.infoq.cn/article/C4-architecture-model">用于软件架构的C4模型</a></li><li><a href="https://zhuanlan.zhihu.com/p/55185723">可视化架构设计——C4介绍</a></li><li><a href="https://c4model.com/">C4官网</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Engineering</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Engineering</tag>
      
      <tag>C4</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP2初探</title>
    <link href="/2019/04/09/H2-First/"/>
    <url>/2019/04/09/H2-First/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>HTTP/2 仍是对之前 HTTP 标准的扩展,而非替代.HTTP 的应用语义不变，提供的功能不变,HTTP 方法、状态代码、URI 和标头字段等这些核心概念也不变.</p><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本文是对Google博客上文章的翻译和笔记.以及一些待解决的问题记录. Google 博客上这篇文章的中文版有很多翻译错误.</p><h2 id="HTTP-2-的主要目标是"><a href="#HTTP-2-的主要目标是" class="headerlink" title="HTTP/2 的主要目标是:"></a>HTTP/2 的主要目标是:</h2><ul><li>通过支持完整的请求与响应的多路复用来减少延迟;</li><li>通过有效压缩 HTTP 标头字段将协议开销降至最低;</li><li>增加对请求优先级和服务器推送的支持;</li></ul><h2 id="重要的两点"><a href="#重要的两点" class="headerlink" title="重要的两点"></a>重要的两点</h2><ul><li>HTTP/2 没有改动 HTTP 的应用语义。HTTP 方法、状态代码、URI 和标头字段等核心概念一如往常;</li><li>HTTP/2 修改了<strong>数据格式化(分帧)<strong>以及在客户端与服务器间</strong>传输的方式</strong>;</li></ul><p>这两点统帅全局，通过新的<strong>分帧层</strong>向我们的应用隐藏了所有复杂性。可以实现在同一连接上 进行多个并发交换.</p><h1 id="Binary-framing-layer-二进制分帧层"><a href="#Binary-framing-layer-二进制分帧层" class="headerlink" title="Binary framing layer: 二进制分帧层"></a>Binary framing layer: 二进制分帧层</h1><p>HTTP/2 所有性能增强的核心在于新的二进制分帧层，它定义了如何封装 HTTP 消息并在客户端与服务器之间传输。<br><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/H2_First/H2_first_framinglayer.png?raw=true" alt="二进制分帧层"></p><p>这里所谓的“层”，指的是位于<strong>套接字接口与应用可见的高级HTTP API之间</strong>一个经过优化的新编码机制:HTTP 的语义（包括各种动词、方法、标头）都不受影响，不同的是传输期间对它们的<strong>编码方式变了</strong>。</p><p>HTTP/1.x 协议以换行符作为纯文本的分隔符，而 HTTP/2 将所有传输的信息分割为更小的<strong>消息和帧</strong>，并采用<strong>二进制格式</strong>对它们编码。</p><h1 id="数据流、消息和帧"><a href="#数据流、消息和帧" class="headerlink" title="数据流、消息和帧"></a>数据流、消息和帧</h1><ul><li>数据流：已建立的连接内的<strong>双向</strong>字节流，可以承载一条或多条消息。</li><li>消息：与逻辑请求或响应消息对应的完整的<strong>一系列帧</strong>。</li><li>帧：HTTP/2 通信的<strong>最小单位</strong>，每个帧都包含帧头，至少也会标识出当前帧所属的数据流。</li></ul><h2 id="简单概括一下"><a href="#简单概括一下" class="headerlink" title="简单概括一下:"></a>简单概括一下:</h2><ul><li>所有通信都在一个 TCP 连接上完成，此连接可以承载任意数量的双向数据流。</li><li>每个数据流都有一个<strong>唯一的标识符</strong>和<strong>可选的优先级</strong>信息，用于承载双向消息。</li><li>每条消息<strong>都是</strong>一条逻辑 HTTP 消息(例如请求或响应)，包含一个或多个帧。</li><li>帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载等等.来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装.</li></ul><p><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/H2_First/H2_first_stream_connection.png?raw=true" alt="stream和connection之间的关系"></p><p>HTTP/2 将 HTTP 协议通信分解为二进制编码帧的交换，这些帧对应着特定数据流中的消息。所有这些都在一个 TCP 连接内复用。</p><h1 id="Request-and-response-multiplexing-请求与响应复用"><a href="#Request-and-response-multiplexing-请求与响应复用" class="headerlink" title="Request and response multiplexing: 请求与响应复用"></a>Request and response multiplexing: 请求与响应复用</h1><p>在 HTTP/1.x 中，如果客户端要想发起多个并行请求以提升性能，则必须使用多个 TCP 连接.</p><blockquote><p>即: 多个并行请求 == 多个 TCP 连接;</p></blockquote><p>H2 中客户端和服务端将HTTP消息分解为互不依赖的帧,在<strong>一条TCP连接</strong>上交替发送,在最后一端进行重新组装.这样可以实现请求和相应复用.</p><p><img src="https://raw.githubusercontent.com/tinggengyan/tinggengyan.github.io/source/imgur/H2_First/H2_first_%20multiplexing.png" alt="请求响应多路复用"></p><p>图中展示了三个数据流正在并行传输.   <br>客户端正在向服务器传输一个 DATA 帧（数据流 5）.<br>服务器正向客户端交错发送数据流 1 和数据流 3 的一系列帧。</p><p>优点:显著提高效率;</p><h1 id="Stream-prioritization-数据流优先级"><a href="#Stream-prioritization-数据流优先级" class="headerlink" title="Stream prioritization:数据流优先级"></a>Stream prioritization:数据流优先级</h1><p>将数据分解为帧之后,这些帧就可以实现多路复用,故而,这些帧的顺序就很重要. </p><p>所以H2允许每个数据流都有一个关联的优先级和依赖关系.</p><p>H2 允许:</p><ul><li>每个数据流可以分配一个1到256之间的一个整数,作为权重;</li><li>每个数据流可以和其他的数据流存在明确的依赖关系;</li></ul><p>权重和依赖关系的设定,可以让客户端构造和传达一个优先级树,以表示客户端想要如何接受响应;<br>相对的,服务端可以通过这个优先级树,来控制CPU,内存和其他资源的,以达到设置流优先级的目的;一旦 response 资源可用, 控制带宽的分配可以达到最佳的方式传递高优先级的数据传递到<br>客户端;</p><p>一个流的依赖关系通过引用另外一个流的唯一标识符作为parent,来达到依赖; 如果parent 被省略,则 parent就是root 流;<br>声明流的依赖关系,意味着, parent 流资源分配优先级需要在依赖方之前;</p><p><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/H2_First/H2_first_%20streamprioritization.png?raw=true" alt="权重和依赖关系展示"></p><p>如图:</p><p>图中 D 需要在 C 之前得到处理.</p><p>对于共享一个parent的兄弟节点,则根据他的权重比例进行资源的分配; 图中的A和B,需要按照 12/16 和 4/16 的比例进行资源的分配;</p><p>图中需要解释的有</p><ol><li>D依赖于root stream;</li><li>A 和 B 依赖于 C;</li><li>E 和 C 依赖于 D;</li></ol><p>所以:</p><p>D优先于E和 C得到全部的资源;<br>E和C 优先于AB得到全部的资源; E和C按照等比例拿到资源;<br>C优先于AB 拿到全部资源,此时与权重无关,由依赖关系决定.</p><p>除此之外,优先级和依赖关系还允许客户端在任意的时间点进行修改.这样就允许了浏览器更进一步的优化;换句话中,我们可以在和用户的交互的过程中,修改依赖关系和权重,来达到用户的交互和其他的一些信号.</p><p>PS: 对于权重和依赖关系,只是客户端请求的一个偏好,服务端并不保证一定会按照这个依赖关系和权重进行资源的分配;<br>虽然看上去似乎有违直觉,可是,我们不能因为高优先级的请求block了,而不顾低优先级的任务;</p><h1 id="One-connection-per-origin-每个源-都有个连接"><a href="#One-connection-per-origin-每个源-都有个连接" class="headerlink" title="One connection per origin: 每个源,都有个连接"></a>One connection per origin: 每个源,都有个连接</h1><blockquote><p>即多路复用.</p></blockquote><p>有了新的分帧机制后，HTTP/2 不再依赖多个 TCP 连接去并行复用数据流；<br>每个数据流都拆分成很多帧，而这些帧可以交错，还可以分别设定优先级。<br>因此，所有 HTTP/2 连接都是<strong>持久化</strong>的，而且每个来源仅需一个连接.</p><p>大多数的HTTP连接都是急促而短暂的,但是TCP对于长连和批量数据进行了优化.  通过复用连接,提高了连接的利用率,也降低了协议的开销.</p><p>可以减少占用的内存和处理空间，也可以缩短完整连接路径;</p><p>连接数量减少,可以减少开销较大的 TLS 连接数、提升会话重用率，以及从整体上减少所需的客户端和服务器资源。</p><h1 id="Flow-control-流控制"><a href="#Flow-control-流控制" class="headerlink" title="Flow control: 流控制"></a>Flow control: 流控制</h1><p>流控制是为了防止出现,接收方繁忙,负载较高,或者仅仅只想为特定的数据流分配固定的资源,然而发送方已经不停的发送;</p><p>这和TCP的控制流类似,然而H2的多个数据流在单一的TCP连接上复用,然而TCP的控制不够精细,也为提供应用级别的API来控制单一流的传输控制.</p><p>H2提供了一组简单的构建块, 来允许客户端和服务端各自的<strong>流级别</strong>和<strong>连接级别</strong>的控制;</p><ul><li>流控制是有方向性的. 每个<strong>接收方</strong>都可以为每个流或者整个连接设置自己期望的窗口大小.</li><li>流控制是基于信用的. 每个<strong>接收方</strong>通告自己的初始连接,初始流的控制窗口的大小(以字节为单位). 任何时候,发送方可以通过发射一个 <em>DATA</em> 帧来减少窗口的大小; 接收方可以发送一个 <em>WINDOW_UPDATE</em> 帧来实现窗口的增大;</li><li>流控制是不能禁用的.  当H2的连接建立之后,客户端和服务端相互交换了 <em>SETTINGS</em> 帧,这个帧交换起到了设置双方在两个方向上窗口的大小. 默认的控制窗口的大小是<em>65535字节</em>,但是接收方是可以在收到任何数据时,通过发送<em>WINDOW_UPDATE</em>帧来设置一个大的 <em>“最大窗口大小”</em>: 2^31-1 个字节来维持这一窗口大小.</li><li>流控制是<em>跳到跳</em>的,而<em>不是</em>端到端的. 也就是说,一个<em>中间人</em>可以基于自身的条件和启发式的算法,使用流控制来控制资源使用和实现资源费分配机制.</li></ul><p>H2未指定任何的流控制算法,替代的,提供了构建块将具体的算法实现交给了客户端和服务端,实现自定义的策略,以实现资源分配和资源的使用; 也可以实现自定义的传输能力以提高真实和感知性能.</p><p>举例: 应用层流控制允许浏览器将流控制窗口设置为0 ,以达到暂停一部分流的加载,先加载优先级更高的流,等到适当的时候再通过调整窗口的大小以重新恢复低优先级的资源加载.</p><h1 id="Server-push-服务器推送"><a href="#Server-push-服务器推送" class="headerlink" title="Server push: 服务器推送"></a>Server push: 服务器推送</h1><p>H2可以实现向客户端发送多个响应. 即可实现无需客户端主动请求的情况,实现对客户端的推送.</p><p><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/H2_First/H2_first_%20serverpush.png?raw=true" alt="服务器推送"></p><p>如图所示,除了stream1 是主动请求,其他的都是服务端主动推送的.</p><p>注意: H2打破了原先的请求响应语义;支持一对多和服务器发起的工作流,</p><p>PUSH_PROMISE 101:<br>所有服务器推送数据流都由<strong>PUSH_PROMISE</strong>帧发起，以表明了服务器向客户端推送所述资源的意图，并且需要先于客户端对于该推送资源的请求。</p><p>故而传输顺序非常重要：客户端需要了解服务器打算推送哪些资源，以免对这些资源创建重复请求。 满足此要求的最简单策略是,先于父响应（即,<strong>DATA</strong>帧）发送所有<strong>PUSH_PROMISE</strong>帧，其中包含所承诺资源的 HTTP 标头,这样客户端就知道哪些资源是服务端打算推送的。</p><p>在客户端接收到<strong>PUSH_PROMISE</strong>帧 后，它可以根据自身情况选择拒绝数据流（通过<strong>RST_STREAM</strong>帧）。 （例如，如果资源已经位于缓存中，便可能会发生这种情况。）.  这是一个相对于 HTTP/1.x 的重要提升。 相比之下，使用资源内联（一种受欢迎的 HTTP/1.x“优化”）等同于“强制推送”：客户端无法选择拒绝、取消或单独处理内联的资源。</p><p>使用 HTTP/2，客户端仍然完全掌控服务器推送的使用方式。 客户端可以</p><ul><li>限制并行推送的数据流数量；</li><li>调整初始的流控制窗口以控制在数据流首次打开时推送的数据量；</li><li>或完全停用服务器推送。<br>这些偏好设置在 HTTP/2 连接开始时通过<strong>SETTINGS</strong>帧传输，也可以随时更新。</li></ul><p>推送的每个资源都是一个数据流，客户端可以对推送的流进行多路复用,设定优先级。<br>浏览器强制执行的唯一安全限制是，推送的资源必须符合原点相同这一政策：服务器对所提供内容必须具有权威性。</p><h1 id="Header-compression-header-压缩"><a href="#Header-compression-header-压缩" class="headerlink" title="Header compression: header 压缩"></a>Header compression: header 压缩</h1><p>传统H1的 header 使用的是纯文本,这会对传输过程带来500–800 字节的额外开销.<br>H2使用了 <em>HPACK</em> 压缩方式,对请求头和响应头的元数据进行压缩,进而减少开销.<br>采用两种技术:</p><ol><li>对传输的header进行静态哈夫曼编码,可以有效减少独立传输的大小;</li><li>客户端和服务端同时维护和更新一份之前出现过的header字段的索引表;,随后对之前传输过的值进行编码,这份索引表将会作为参考,以提高效率;</li></ol><p>哈夫曼编码允许对单个值在传输的时候进行压缩, 对传输过的值进行索引,这样可以在传递重复的值时,只需索引值,根据索引值,可以快速的查找和重构完整的header 的 key 和 value.</p><p><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/H2_First/H2_first_%20headercompression.png?raw=true" alt="header压缩"></p><p>作为一个深远的优化,哈夫曼编码包含了动态表和静态表.</p><ul><li>静态表包含了一些常用的HTPP header字段,这些字段是所有连接都可能使用的.</li><li>动态表默认是空的,在不同的连接过程中,根据交换的值不同而进行更新.<br>进而带来的结果是,每次请求,因为对未曾出现过的值使用了静态哈夫曼编码,对在两侧静态或者动态表中都出现的使用了索引值而不是直接的原始值,因而这次请求会因此而减小;</li></ul><p>H2中的请求和相应的header字段的定义保持不变,仅有的一个小例外是: 所有的 header 字段的名字必须是小写, 请求行被分割成独立: <em>:method</em>, <em>:scheme</em>, <em>:authority</em>, 和 <em>:path</em> 等伪header字段.</p><h1 id="读完文章后的待解决问题-需要更进一步的研究"><a href="#读完文章后的待解决问题-需要更进一步的研究" class="headerlink" title="读完文章后的待解决问题,需要更进一步的研究"></a>读完文章后的待解决问题,需要更进一步的研究</h1><ol><li>H2中的request line最终变成的格式是什么样的?</li><li>message被切割成frame,这些frame是按照什么规则切割的?文章中的举例是 header 和 data payload .</li><li>head-of-line blocking 是什么?</li><li>One connection per origin这里的origin指的是什么?</li><li>服务器推送的条件是不是建立客户端和服务端曾经建立过连接的基础上.?同时H2是否是保证了每个连接的持久化?,  H2的连接都是持久化的,可以确认;</li><li>压缩部分: 文中提到,H1的所有head等元数据都是纯文本,会增加传输的开销,那么,gzip呢?是如何工作的?</li><li>HPACK 压缩格式 指的是什么?</li><li>静态霍夫曼代码 又指的是什么?</li><li>客户端和服务器同时维护和更新,那么怎么保证双方的表格和index 的一致性呢?</li><li>文中提到对value进行编码,那么key呢?</li><li>文中提到对重复的内容传递 index values ,指的是什么? 同样的问题,那怎么和对应的key对应上?</li><li>静态表和动态表格式是什么样的?</li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://developers.google.com/web/fundamentals/performance/http2/#top_of_page">Introduction to HTTP/2</a></p>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
      <category>H2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Activity 在横竖屏切换情况下的生命周期变化</title>
    <link href="/2018/04/26/activitylifecycle/"/>
    <url>/2018/04/26/activitylifecycle/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Activity 在横竖屏切换的时候,生命周期是不一样的,本地通过打印 log 的方式,看下区别.测试的机器是 Android6.0 .</p><span id="more"></span><h1 id="不做任何配置的情况下"><a href="#不做任何配置的情况下" class="headerlink" title="不做任何配置的情况下"></a>不做任何配置的情况下</h1><h2 id="第一次启动"><a href="#第一次启动" class="headerlink" title="第一次启动"></a>第一次启动</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console">D/LifeCircleActivity: onCreate() called with: savedInstanceState = [null]Activity对象的地址:cn.steve.activitylifecycle.LifeCircleActivity@de950fc<br>D/LifeCircleActivity: onStart() called<br>D/LifeCircleActivity: onResume() called<br></code></pre></td></tr></table></figure><hr><h2 id="第一次切换成横屏"><a href="#第一次切换成横屏" class="headerlink" title="第一次切换成横屏"></a>第一次切换成横屏</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs console"><br>D/LifeCircleActivity: onPause() called<br>D/LifeCircleActivity: onSaveInstanceState() called with: outState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]<br>D/LifeCircleActivity: onStop() called<br>D/LifeCircleActivity: onDestroy() called<br>D/LifeCircleActivity: onCreate() called with: savedInstanceState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]Activity对象的地址:cn.steve.activitylifecycle.LifeCircleActivity@266fbfb<br>D/LifeCircleActivity: onStart() called<br>D/LifeCircleActivity: onRestoreInstanceState() called with: savedInstanceState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]<br>D/LifeCircleActivity: onResume() called<br><br></code></pre></td></tr></table></figure><hr><h2 id="再切换成竖屏"><a href="#再切换成竖屏" class="headerlink" title="再切换成竖屏"></a>再切换成竖屏</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs console">D/LifeCircleActivity: onPause() called<br>D/LifeCircleActivity: onSaveInstanceState() called with: outState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]<br>D/LifeCircleActivity: onStop() called<br>D/LifeCircleActivity: onDestroy() called<br>D/LifeCircleActivity: onCreate() called with: savedInstanceState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]Activity对象的地址:cn.steve.activitylifecycle.LifeCircleActivity@7e6e82e<br>D/LifeCircleActivity: onStart() called<br>D/LifeCircleActivity: onRestoreInstanceState() called with: savedInstanceState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]<br>D/LifeCircleActivity: onResume() called<br></code></pre></td></tr></table></figure><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>默认情况下，每次旋转屏幕都会销毁当前的Activity对象，同时调用 onSaveInstanceState 方法，保存当前的界面状态；之后重新创建 Activity对象， onCreate 参数不为空，回调  onRestoreInstanceState 方法进行恢复。</p><h1 id="配置-configChanges-”orientation”"><a href="#配置-configChanges-”orientation”" class="headerlink" title="配置 configChanges=”orientation”"></a>配置 configChanges=”orientation”</h1><h2 id="第一次启动-1"><a href="#第一次启动-1" class="headerlink" title="第一次启动"></a>第一次启动</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console">D/LifeCircleActivity: onCreate() called with: savedInstanceState = [null]Activity对象的地址:cn.steve.activitylifecycle.LifeCircleActivity@de950fc<br>D/LifeCircleActivity: onStart() called<br>D/LifeCircleActivity: onResume() called<br></code></pre></td></tr></table></figure><hr><h2 id="第一次切换成横屏-1"><a href="#第一次切换成横屏-1" class="headerlink" title="第一次切换成横屏"></a>第一次切换成横屏</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs console">D/LifeCircleActivity: onPause() called<br>D/LifeCircleActivity: onSaveInstanceState() called with: outState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]<br>D/LifeCircleActivity: onStop() called<br>D/LifeCircleActivity: onDestroy() called<br>D/LifeCircleActivity: onCreate() called with: savedInstanceState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]Activity对象的地址:cn.steve.activitylifecycle.LifeCircleActivity@266fbfb<br>D/LifeCircleActivity: onStart() called<br>D/LifeCircleActivity: onRestoreInstanceState() called with: savedInstanceState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]<br>D/LifeCircleActivity: onResume() called<br></code></pre></td></tr></table></figure><hr><h2 id="再切换成竖屏-1"><a href="#再切换成竖屏-1" class="headerlink" title="再切换成竖屏"></a>再切换成竖屏</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs console">D/LifeCircleActivity: onPause() called<br>D/LifeCircleActivity: onSaveInstanceState() called with: outState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]<br>D/LifeCircleActivity: onStop() called<br>D/LifeCircleActivity: onDestroy() called<br>D/LifeCircleActivity: onCreate() called with: savedInstanceState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]Activity对象的地址:cn.steve.activitylifecycle.LifeCircleActivity@7e6e82e<br>D/LifeCircleActivity: onStart() called <br>D/LifeCircleActivity: onRestoreInstanceState() called with: savedInstanceState = [Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;16908290=android.view.AbsSavedState$1@80a47f5, 2131296581=android.view.AbsSavedState$1@80a47f5, 2131296815=android.view.AbsSavedState$1@80a47f5&#125;&#125;], key=x&#125;]]<br>D/LifeCircleActivity: onResume() called<br></code></pre></td></tr></table></figure><hr><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>配置 orientation 的情况下，和默认情况一致。</p><hr><h1 id="配置-configChanges-”orientation-screenSize”"><a href="#配置-configChanges-”orientation-screenSize”" class="headerlink" title="配置 configChanges=”orientation|screenSize”"></a>配置 configChanges=”orientation|screenSize”</h1><p>根据官方的介绍，这个两个值，在api大于13 之后，应该一起使用</p><h2 id="第一次启动-2"><a href="#第一次启动-2" class="headerlink" title="第一次启动"></a>第一次启动</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console">D/LifeCircleActivity: onCreate() called with: savedInstanceState = [null]Activity对象的地址:cn.steve.activitylifecycle.LifeCircleActivity@de950fc<br>D/LifeCircleActivity: onStart() called<br>D/LifeCircleActivity: onResume() called<br></code></pre></td></tr></table></figure><hr><h2 id="第一次切换成横屏-2"><a href="#第一次切换成横屏-2" class="headerlink" title="第一次切换成横屏"></a>第一次切换成横屏</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">D/LifeCircleActivity: onConfigurationChanged() called with: newConfig = [&#123;1.0 ?mcc?mnc zh_CN ldltr sw360dp w640dp h336dp 320dpi nrml long land finger -keyb/v/h -nav/h s.11 themeChanged=0 themeChangedFlags=0&#125;]<br></code></pre></td></tr></table></figure><hr><h2 id="再切换成竖屏-2"><a href="#再切换成竖屏-2" class="headerlink" title="再切换成竖屏"></a>再切换成竖屏</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">D/LifeCircleActivity: onConfigurationChanged() called with: newConfig = [&#123;1.0 ?mcc?mnc zh_CN ldltr sw360dp w360dp h616dp 320dpi nrml long port finger -keyb/v/h -nav/h s.12 themeChanged=0 themeChangedFlags=0&#125;]<br></code></pre></td></tr></table></figure><hr><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>当配置了 screenSize 。则不会再销毁重建了，而是回调 onConfigurationChanged 方法。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在不做配置默认的情况下,Activity 是被销毁,然后重新启动的.但是在 manifest 中进行相应的配置之后,就表示 Activity 自行处理配置的更改,将阻止 Activity 的销毁重新启动,而是保持运行状态,并且回调 onConfigurationChanged 方法.官方的建议是万不得已的情况下才能使用.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.android.com/guide/topics/manifest/activity-element.html?hl=zh-cn">AndroidDeveloper</a></li><li><a href="https://developer.android.com/guide/topics/resources/runtime-changes?hl=zh-cn">处理运行时变更</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Activity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Service 的生命周期</title>
    <link href="/2018/04/26/ServiceLifecycle/"/>
    <url>/2018/04/26/ServiceLifecycle/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Service 有两种启动方式,一种是 startService ;一种是 bindService.这两种的启动的 Service 的生命周期有些许差异,并且当二者混用的时候,有一些需要注意的地方.这里用打印 log 日志的方式记录下生命周期的差异.</p><span id="more"></span><h1 id="仅-startService"><a href="#仅-startService" class="headerlink" title="仅 startService"></a>仅 startService</h1><h2 id="触发-startService-方法"><a href="#触发-startService-方法" class="headerlink" title="触发 startService 方法"></a>触发 startService 方法</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onCreate() called<br>D/ServiceLifeService: onStartCommand() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;], flags = [0], startId = [1]<br></code></pre></td></tr></table></figure><h2 id="退出APP"><a href="#退出APP" class="headerlink" title="退出APP"></a>退出APP</h2><p>无回调</p><h2 id="再次进入APP，触发startService-方法"><a href="#再次进入APP，触发startService-方法" class="headerlink" title="再次进入APP，触发startService 方法"></a>再次进入APP，触发startService 方法</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onStartCommand() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;], flags = [0], startId = [2]<br></code></pre></td></tr></table></figure><h2 id="杀死-App-进程"><a href="#杀死-App-进程" class="headerlink" title="杀死 App 进程"></a>杀死 App 进程</h2><p>没有回调，直接被系统杀死。只有一些AMS系统回调</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">W/ActivityManager: Scheduling restart of crashed service cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService in 1000ms<br>I/ActivityManager: Force stopping service ServiceRecord&#123;38ffaacf u0 cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService&#125;<br></code></pre></td></tr></table></figure><h2 id="调用-stop-方法"><a href="#调用-stop-方法" class="headerlink" title="调用 stop 方法"></a>调用 stop 方法</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onDestroy() called<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>对于 startService 而言</p><ul><li>当要启动的 Service 没有创建时，就会创建，而后回调 onCreate  和 onStartCommand  方法；</li><li>当要启动的 Service 已经存在，则只会回调  onStartCommand 方法；</li><li>退出 App，Service 依旧存活</li><li>调用 stop 方法，回调 onDestroy</li></ul><h1 id="仅-bindService"><a href="#仅-bindService" class="headerlink" title="仅 bindService"></a>仅 bindService</h1><h2 id="触发-bindService-方法"><a href="#触发-bindService-方法" class="headerlink" title="触发 bindService 方法"></a>触发 bindService 方法</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onCreate() called<br>D/ServiceLifeService: onBind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br>D/ServiceLifeService: onServiceConnected() called with: name = [ComponentInfo&#123;cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService&#125;], service = [ServiceBinder:cn.steve.servicelifecycle.ServiceLifeService$ServiceBinder@4bb38ec]<br></code></pre></td></tr></table></figure><h2 id="多次触发-bindService-方法"><a href="#多次触发-bindService-方法" class="headerlink" title="多次触发 bindService 方法"></a>多次触发 bindService 方法</h2><p>对于同一个 ServiceConnection 只会进行一次 ServiceConnection 中的方法回调。<br>若不同的 ServiceConnection ，则会进行 ServiceConnection 中的 方法回调</p><h2 id="退出APP-1"><a href="#退出APP-1" class="headerlink" title="退出APP"></a>退出APP</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onUnbind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br>D/ServiceLifeService: onDestroy() called<br></code></pre></td></tr></table></figure><h2 id="退出前，主动调用-unbind-方法"><a href="#退出前，主动调用-unbind-方法" class="headerlink" title="退出前，主动调用 unbind 方法"></a>退出前，主动调用 unbind 方法</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onUnbind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br>D/ServiceLifeService: onDestroy() called<br></code></pre></td></tr></table></figure><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>对于 bindService 而言</p><ul><li>当要启动的 Service 没有创建时，就会创建，而后回调 onCreate  和 onBind  方法；</li><li>当要启动的 Service 已经存在，则只会回调  onBind 方法；</li><li>退出 App，Service 将自动解绑，并回调 onDestroy 方法</li><li>退出 App 和主动 unbind 的回调一致</li></ul><h1 id="先-startService-，再-bindService"><a href="#先-startService-，再-bindService" class="headerlink" title="先 startService ，再 bindService"></a>先 startService ，再 bindService</h1><h2 id="触发-startService-方法，再触发-bindService-方法"><a href="#触发-startService-方法，再触发-bindService-方法" class="headerlink" title="触发 startService 方法，再触发  bindService 方法"></a>触发 startService 方法，再触发  bindService 方法</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onCreate() called<br>D/ServiceLifeService: onStartCommand() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;], flags = [0], startId = [1]<br>D/ServiceLifeService: onBind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br>D/ServiceLifeService: onServiceConnected() called with: name = [ComponentInfo&#123;cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService&#125;], service =[ServiceBinder:cn.steve.servicelifecycle.ServiceLifeService$ServiceBinder@598f7d8]<br></code></pre></td></tr></table></figure><h2 id="退出APP-2"><a href="#退出APP-2" class="headerlink" title="退出APP"></a>退出APP</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onUnbind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br></code></pre></td></tr></table></figure><h2 id="调用-unbind-方法"><a href="#调用-unbind-方法" class="headerlink" title="调用  unbind 方法"></a>调用  unbind 方法</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onUnbind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br></code></pre></td></tr></table></figure><h2 id="在-unbind-之前，调用-stop-方法"><a href="#在-unbind-之前，调用-stop-方法" class="headerlink" title="在 unbind 之前，调用 stop 方法"></a>在 unbind 之前，调用 stop 方法</h2><p>无回调</p><h2 id="调用-stop-方法，再调-unbind"><a href="#调用-stop-方法，再调-unbind" class="headerlink" title="调用 stop 方法，再调 unbind"></a>调用 stop 方法，再调 unbind</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onUnbind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br>D/ServiceLifeService: onDestroy() called<br></code></pre></td></tr></table></figure><h2 id="调用-unbind，再调用-stop-方法"><a href="#调用-unbind，再调用-stop-方法" class="headerlink" title="调用 unbind，再调用 stop 方法"></a>调用 unbind，再调用 stop 方法</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onUnbind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br>D/ServiceLifeService: onDestroy() called<br></code></pre></td></tr></table></figure><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>和前面的方式类似，有以下几点需要注意</p><ul><li>bindService 只会导致 Service 回调 onBind 方法，因为 Service本身已经存在，所以，不会再回调 onCreate 方法，也说明 Service 是同一个 Service</li><li>退出 App 后只会让 Service 回调 onUnbind 方法，受 startService 方法的影响， Service 依旧存活，故而不会回调 onDestroy。</li></ul><h1 id="先-bindService-，再-startService"><a href="#先-bindService-，再-startService" class="headerlink" title="先 bindService ，再 startService"></a>先 bindService ，再 startService</h1><h2 id="触发-bindService-方法，再触发-startService-方法"><a href="#触发-bindService-方法，再触发-startService-方法" class="headerlink" title="触发 bindService 方法，再触发  startService 方法"></a>触发 bindService 方法，再触发  startService 方法</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onCreate() called<br>D/ServiceLifeService: onBind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br>D/ServiceLifeService: onServiceConnected() called with: name = [ComponentInfo&#123;cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService&#125;], service = [ServiceBinder:cn.steve.servicelifecycle.ServiceLifeService$ServiceBinder@4bb38ec]<br>D/ServiceLifeService: onStartCommand() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;], flags = [0], startId = [1]<br></code></pre></td></tr></table></figure><h2 id="退出APP-3"><a href="#退出APP-3" class="headerlink" title="退出APP"></a>退出APP</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onUnbind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br></code></pre></td></tr></table></figure><h2 id="调用-unbind-方法-1"><a href="#调用-unbind-方法-1" class="headerlink" title="调用  unbind 方法"></a>调用  unbind 方法</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onUnbind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br></code></pre></td></tr></table></figure><h2 id="在-unbind-之前，调用-stop-方法-1"><a href="#在-unbind-之前，调用-stop-方法-1" class="headerlink" title="在 unbind 之前，调用 stop 方法"></a>在 unbind 之前，调用 stop 方法</h2><p>无回调</p><h2 id="调用-stop-方法，再调-unbind-1"><a href="#调用-stop-方法，再调-unbind-1" class="headerlink" title="调用 stop 方法，再调 unbind"></a>调用 stop 方法，再调 unbind</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onUnbind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br>D/ServiceLifeService: onDestroy() called<br></code></pre></td></tr></table></figure><h2 id="调用-unbind，再调用-stop-方法-1"><a href="#调用-unbind，再调用-stop-方法-1" class="headerlink" title="调用 unbind，再调用 stop 方法"></a>调用 unbind，再调用 stop 方法</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console">D/ServiceLifeService: onUnbind() called with: intent = [Intent &#123; cmp=cn.steve.study/cn.steve.servicelifecycle.ServiceLifeService &#125;]<br>D/ServiceLifeService: onDestroy() called<br></code></pre></td></tr></table></figure><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>和前面的方式类似，有以下几点需要注意</p><ul><li>bindService 调用产生的回调和单独 调用 bindService 一样；</li><li>startService 调用时，因为 Service 对象已经存在，所以只回调 onStartCommand 方法</li><li>退出 App 后只会让 Service 回调 onUnbind 方法，受 startService 方法的影响， Service 依旧存活，故而不会回调 onDestroy。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>已经创建成功的 Service，在运行期间，无论是 start 还是 bind，都不会调用 onCreate；</li><li>Service 在运行期间，每次调用 start 都会触发 onStartCommand 方法；而多次用同一个 ServiceConnection 进行bind 调用时，只会触发一次 onBind ；对于用不同的 ServiceConnection 进行 bind 时，都会触发 ServiceConnection 中的 onServiceConnected 方法，但并不会触发 onBind 方法，所以，相遇于多次触发 onStartCommand 触发，对于 bind 操作来说，onBind 只会触发一次。</li><li>当 start 和 bind 混合调用时，要想停止，必须要调用 unbind 才会回调 onDestory 方法。若先调用 stop，此时没有任何回调，再调用unbind时，会回调onUnbind，同时进行 onDestroy 回调。反之，若先调用 unbind，再调用 stop，回调顺序一致。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Service</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Annotation 使用备忘</title>
    <link href="/2018/01/02/annotation2/"/>
    <url>/2018/01/02/annotation2/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录使用 javapoet 以及 auto-service 进行编译时注解的过程以及注意点. </p><span id="more"></span><p>最近又使用了一次编译时注解,期间产生了不少问题.</p><h1 id="术语的解释"><a href="#术语的解释" class="headerlink" title="术语的解释"></a>术语的解释</h1><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><p>这个代表被注解的元素.这个类有个很重要的方法,getEnclosingElement:这方法的含义是获取 包裹 element 最外围的元素.比如类的最外围的元素是 package.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PackageElement pkgElement = (PackageElement) element.getEnclosingElement();<br></code></pre></td></tr></table></figure><p>其他方法都很简单.</p><h2 id="javapoet-库中一些重要的接口和方法"><a href="#javapoet-库中一些重要的接口和方法" class="headerlink" title="javapoet 库中一些重要的接口和方法"></a>javapoet 库中一些重要的接口和方法</h2><ol><li><p>TypeName: 对应了 java 代码中的一个类型元素,常用于声明一个方法参数,还有一些 collection 范型使用.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用来定一个 ComponentInfo 类的元素类型</span><br>   TypeName mComponentInfoClassName = ClassName.get(ComponentInfo.class);<br></code></pre></td></tr></table></figure></li><li><p>ParameterizedTypeName 用来声明一个方法的参数.有个 get 方法,这个方法第一个参数是声明原生的类型,后面一个可变参数,声明第一个参数的参数.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明一个参数的类型是 Map&lt;String,List&lt;ComponentInfo&gt;&gt;</span><br> <br>ParameterizedTypeName paramListComponent = ParameterizedTypeName.get(ClassName.get(List.class), mComponentInfoClassName);<br> ParameterizedTypeName moduleLoaderParameter = ParameterizedTypeName.get(<br>                ClassName.get(Map.class),<br>                ClassName.get(String.class),<br>                paramListComponent<br>        );<br></code></pre></td></tr></table></figure></li><li><p>ParameterSpec</p></li></ol><p>这个类代表方法的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明一个方法的参数是:final Map&lt;String,List&lt;ComponentInfo&gt;&gt;  targetMap.</span><br> ParameterSpec injectParameterSpec = ParameterSpec.builder(moduleLoaderParameter, <span class="hljs-string">&quot;targetMap&quot;</span>, Modifier.FINAL).build();<br><br></code></pre></td></tr></table></figure><ol start="4"><li>MethodSpec.Builder<br>方法的构造器,用来构造一个方法.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用来构造一个私有方法,名字叫 inject ,参数是 Map&lt;String,List&lt;ComponentInfo&gt;&gt;  targetMap,String group,String pkg,String name,int type</span><br>MethodSpec.Builder injectElementBuilder = MethodSpec.methodBuilder(<span class="hljs-string">&quot;inject&quot;</span>)<br>                .addModifiers(Modifier.PRIVATE)<br>                .addParameter(injectParameterSpec)<br>                .addParameter(String.class, <span class="hljs-string">&quot;group&quot;</span>)<br>                .addParameter(String.class, <span class="hljs-string">&quot;pkg&quot;</span>)<br>                .addParameter(String.class, <span class="hljs-string">&quot;name&quot;</span>)<br>                .addParameter(<span class="hljs-keyword">int</span>.class, <span class="hljs-string">&quot;type&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><p>这个构造还可以继续添加语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">injectElementBuilder.addStatement(<span class="hljs-string">&quot;List&lt;$T&gt; list = targetMap.get(name)&quot;</span>, ComponentInfo.class)<br> .beginControlFlow(<span class="hljs-string">&quot;if( list == null )&quot;</span>)<br>                .addStatement(<span class="hljs-string">&quot;list = new $T&lt;&gt;()&quot;</span>, ArrayList.class)<br>                .addStatement(<span class="hljs-string">&quot;targetMap.put(group, list)&quot;</span>)<br>                .endControlFlow()<br>                .addStatement(<span class="hljs-string">&quot;ComponentInfo info = new ComponentInfo(type, group, pkg, name)&quot;</span>)<br>                .beginControlFlow(<span class="hljs-string">&quot;try&quot;</span>)<br>                .addStatement(<span class="hljs-string">&quot; info.setClazz(Class.forName(pkg + name))&quot;</span>)<br>                .nextControlFlow(<span class="hljs-string">&quot;catch(Exception e)&quot;</span>)<br>                .addStatement(<span class="hljs-string">&quot;e.printStackTrace()&quot;</span>)<br>                .endControlFlow()<br>                .addStatement(<span class="hljs-string">&quot;list.add(info)&quot;</span>);<br></code></pre></td></tr></table></figure><p>注意其中的两个 ControlFlow .</p><ol start="5"><li>TypeSpec<br>用来声明一个类的描述<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明一个类,类名是 className,里面有两个方法</span><br>TypeSpec typeSpec = TypeSpec.classBuilder(<span class="hljs-string">&quot;className&quot;</span>)<br>                .addModifiers(Modifier.PUBLIC)<br>                .addMethod(injectElementMethod)<br>                .addMethod(injectMethodSpec)<br>                .build();<br></code></pre></td></tr></table></figure></li></ol><ol start="6"><li>JavaFile</li></ol><p>代表一个输出的 java 文件.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明一个包名为 : com.steve.pkg 的java 文件.文件描述用的是一个 TypeSpec </span><br>        JavaFile javaFile = JavaFile.builder(<span class="hljs-string">&quot;com.steve.pkg&quot;</span>, typeSpec).build();<br><br></code></pre></td></tr></table></figure><h1 id="使用的注意事项"><a href="#使用的注意事项" class="headerlink" title="使用的注意事项"></a>使用的注意事项</h1><ol><li>新版的 studio 以及不需要 android-apt</li><li>对于注解器的依赖可以通过 annotationProcessor project(‘:processor’) 来对注解器工程进行依赖</li><li>对于注解配置选项可以在 gradle 中进行配置</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs groovy">defaultConfig &#123;<br>        minSdkVersion rootProject.ext.android.minSdkVersion<br>        targetSdkVersion rootProject.ext.android.targetSdkVersion<br>        versionCode rootProject.ext.android.versionCode<br>        versionName rootProject.ext.android.versionName<br><br>        javaCompileOptions &#123;<br>            annotationProcessorOptions &#123;<br>                arguments = [<span class="hljs-attr">moduleName:</span> project.getName()]<br>            &#125;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>对于注解器的注册,@AutoService(Processor.class),不要写错了,写成 process</li><li>注解器的配置项需要在注解器中声明 @SupportedOptions(“moduleName”)</li><li>注解器中的 log 不要随便打 error,不然就会停止解析,这点和 android 中的 log 有些差异.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Annotation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webview中关于服务端重定向的判断</title>
    <link href="/2017/08/10/webview-judge-302/"/>
    <url>/2017/08/10/webview-judge-302/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于 H5 页面打开都比较慢,为了减少返回时候的刷新,所以有时候需要多开,就是每个 url 都是在一个新的 activity 中打开.一般的处理方式是在 shouldOverrideUrlLoading() 方法中进行处理,这个方法按照 SDK 中的说明是当 url 发生变化时就会回调,当遇到服务端重定向的时候,就会出现一个空白页面的情况,所以我们需要判断是否是重定向,对于重定向进行特殊的处理.</p><span id="more"></span><h1 id="困难"><a href="#困难" class="headerlink" title="困难"></a>困难</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldOverrideUrlLoading</span><span class="hljs-params">(WebView view, WebResourceRequest request)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> shouldOverrideUrlLoading(view, request.getUrl().toString());<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 Android7.0 ,新增了 WebResourceRequest 接口,接口中有个判断是否是重定向的方法,但对于低版本的该如何判断呢?<br>可以做如下判断.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">WebViewClient webViewClient = <span class="hljs-keyword">new</span> WebViewClient() &#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> mLoaded = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldOverrideUrlLoading</span><span class="hljs-params">(WebView view, String url)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (mLoaded)&#123;<br>                <span class="hljs-comment">//not redirect</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// is redirect</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onPageFinished</span><span class="hljs-params">(WebView webView, String url)</span> </span>&#123;<br>            mLoaded = <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>    &#125;;<br></code></pre></td></tr></table></figure><p>因为能回调 onPageFinished 方法,都是有渲染页面的操作,说明页面是有内容的,对于服务端重定向而言,是没有内容的,所以就不会走 onPageFinished 方法,通过这个间接的判断页面是否是重定向的.目前还未发现有什么不对的地方.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://stackoverflow.com/questions/3852414/in-a-webview-is-there-a-way-for-shouldoverrideurlloading-to-determine-if-it-is-c/45477862#45477862">stackoverflow</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Webview</tag>
      
      <tag>redirect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPC_Binder_java_2</title>
    <link href="/2017/07/04/IPC-Binder-java-2/"/>
    <url>/2017/07/04/IPC-Binder-java-2/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文作为第一篇的补充,补充一下第一篇遗漏的内容,主要谈一下,缺少的概念,技术背景等内容.</p><span id="more"></span><h1 id="Why为什么需要Binder"><a href="#Why为什么需要Binder" class="headerlink" title="Why为什么需要Binder"></a>Why为什么需要Binder</h1><p>Binder 是 Android 系统进程间通信（IPC）方式之一。Android 是基于 Linux 内核的,Linux 已经有很多 IPC 方式,为何还需要一个新的 IPC 方式.<br>Linux已经拥有</p><ul><li>管道</li><li>system V IPC</li><li>Socket 等IPC手段。</li></ul><p>却还要倚赖Binder来实现进程间通信。</p><ul><li>Binder具有无可比拟的优势。</li><li>或者可以说，Android系统对进程间有什么特殊的需求是传统其他 IPC 无法完成或者无法很好完成。</li></ul><p>基于Client-Server的通信方式广泛应用于从互联网和数据库访问到嵌入式手持设备内部通信等各个领域。</p><p>智能手机平台特别是Android系统中，为了向应用开发者提供丰富多样的功能，这种通信方式更是无处不在，诸如媒体播放，视音频频捕获，到各种让手机更智能的传感器（加速度，方位，温度，光亮度等）都由不同的Server负责管理，应用程序只需做为Client与这些Server建立连接便可以使用这些服务，花很少的时间和精力就能开发出令人眩目的功能。</p><p>Client-Server 方式的广泛采用对进程间通信（IPC）机制是一个挑战。</p><p>只有socket支持Client-Server的通信方式。当然也可以在这些底层机制上架设一套协议来实现Client-Server通信，但这样增加了系统的复杂性，在手机这种条件复杂，资源稀缺的环境下可靠性也难以保证.</p><h2 id="传输性能角度："><a href="#传输性能角度：" class="headerlink" title="传输性能角度："></a>传输性能角度：</h2><ul><li><p>socket作为一款通用接口，其传输效率低，开销大，主要用在跨网络的进程间通信和本机上进程间的低速通信。</p></li><li><p>消息队列和管道采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的缓存区中，然后再从内核缓存区拷贝到接收方缓存区，至少有两次拷贝过程。</p></li><li><p>共享内存虽然无需拷贝，但控制复杂，难以使用。</p></li></ul><h2 id="安全性角度："><a href="#安全性角度：" class="headerlink" title="安全性角度："></a>安全性角度：</h2><p>Android作为一个开放式，拥有众多开发者的的平台，应用程序的来源广泛，确保智能终端的安全是非常重要的。终端用户不希望从网上下载的程序在不知情的情况下偷窥隐私数据，连接无线网络，长期操作底层设备导致电池很快耗尽等等。</p><ol><li> 传统IPC没有任何安全措施，完全依赖上层协议来确保。</li><li> 传统IPC的接收方无法获得对方进程可靠的UID/PID（用户ID/进程ID），从而无法鉴别对方身份。Android为每个安装好的应用程序分配了自己的UID，故进程的UID是鉴别进程身份的重要标志。使用传统IPC只能由用户在数据包里填入UID/PID，但这样不可靠，容易被恶意程序利用。可靠的身份标记只有由IPC机制本身在内核中添加才能确保安全性。</li><li> 传统IPC访问接入点是开放的，无法建立私有通道。比如命名管道的名称，system V的键值，socket的ip地址或文件名都是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。</li></ol><h2 id="效率角度"><a href="#效率角度" class="headerlink" title="效率角度"></a>效率角度</h2><p><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/IPC%E6%96%B9%E5%BC%8F%E6%95%B0%E6%8D%AE%E6%8B%B7%E8%B4%9D%E6%AC%A1%E6%95%B0.png?raw=true" alt="IPC 内存拷贝次数对比"><br>从对比图可以看出,Binder 在效率上是有优势的.</p><h1 id="What-Binder-是什么"><a href="#What-Binder-是什么" class="headerlink" title="What Binder 是什么"></a>What Binder 是什么</h1><p>因为 Binder 也是 CS 架构的一种,而 CS 架构最典型的就是 TCP/IP 请求了.下面做个对比,顺带类比以下 Binder 中的几个关键的概念.<br><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/TCP%252FIP%E8%AE%BF%E9%97%AE%E8%BF%87%E7%A8%8B.png?raw=true" alt="TCP/IP访问过程"></p><p><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/Binder%E7%B1%BB%E6%AF%94TCP%E8%BF%87%E7%A8%8B.png?raw=true" alt="Binder类比TCP请求"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在开发中，经常需要通过 getSystemService 的方式获取一个系统服务,那么这些系统服务的 Binder 引用是如何传递给客户端的呢？要知道，系统服务并不是通过 startService() 启动的。</p><h1 id="ServiceManager-管理的服务"><a href="#ServiceManager-管理的服务" class="headerlink" title="ServiceManager 管理的服务"></a>ServiceManager 管理的服务</h1><p>ServiceManager 是一个独立进程，其作用如名称所示，管理各种系统服务.</p><p>ServiceManager 本身也是一个 Service ，Framework 提供了一个系统函数，可以获取该 Service 对应的 Binder 引用，那就是 BinderInternal.getContextObject().该静态函数返回 ServiceManager 后，就可以通过 ServiceManager 提供的方法获取其他系统 Service 的 Binder 引用。这种涉及模式在日常中是可见的，<br>ServiceManager 就像一个公司的总机，这个号码是公开的，系统中任何进程都可以使用 BinderInternal.getContextObject() 获取该总机的 Binder 对象，而当用户想联系公司中的其他任何人(服务),则要警告总机再获得分机号。这种设计的好处是系统中仅暴露了一个全局 Binder 引用 (ServiceManager),而其他系统服务则可以隐藏起来，从而有助于系统服务的扩展，以及调用系统服务的安全检查。其他系统服务在启动时，首先把自己的 Binder 对象传递给 ServiceManager,即所谓的注册(addService).</p><p>举个具体的例子:</p><ul><li><p>ContextImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getSystemService</span><span class="hljs-params">(String name)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span> (WINDOW_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> WindowManagerImpl.getDefault();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (LAYOUT_INFLATER_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">synchronized</span> (mSync) &#123;<br>               LayoutInflater inflater = mLayoutInflater;<br>               <span class="hljs-keyword">if</span> (inflater != <span class="hljs-keyword">null</span>) &#123;<br>                   <span class="hljs-keyword">return</span> inflater;<br>               &#125;<br>               mLayoutInflater = inflater =<br>                   PolicyManager.makeNewLayoutInflater(getOuterContext());<br>               <span class="hljs-keyword">return</span> inflater;<br>           &#125;<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ACTIVITY_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getActivityManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (INPUT_METHOD_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> InputMethodManager.getInstance(<span class="hljs-keyword">this</span>);<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ALARM_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getAlarmManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ACCOUNT_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getAccountManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (POWER_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getPowerManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (CONNECTIVITY_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getConnectivityManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (THROTTLE_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getThrottleManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (WIFI_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getWifiManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (NOTIFICATION_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getNotificationManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (KEYGUARD_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> KeyguardManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ACCESSIBILITY_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> AccessibilityManager.getInstance(<span class="hljs-keyword">this</span>);<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (LOCATION_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getLocationManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SEARCH_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getSearchManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SENSOR_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getSensorManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (STORAGE_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getStorageManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (VIBRATOR_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getVibrator();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (STATUS_BAR_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">synchronized</span> (mSync) &#123;<br>               <span class="hljs-keyword">if</span> (mStatusBarManager == <span class="hljs-keyword">null</span>) &#123;<br>                   mStatusBarManager = <span class="hljs-keyword">new</span> StatusBarManager(getOuterContext());<br>               &#125;<br>               <span class="hljs-keyword">return</span> mStatusBarManager;<br>           &#125;<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (AUDIO_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getAudioManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TELEPHONY_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getTelephonyManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (CLIPBOARD_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getClipboardManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (WALLPAPER_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getWallpaperManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (DROPBOX_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getDropBoxManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (DEVICE_POLICY_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getDevicePolicyManager();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (UI_MODE_SERVICE.equals(name)) &#123;<br>           <span class="hljs-keyword">return</span> getUiModeManager();<br>       &#125;<br><br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>InputMethodManager.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * Retrieve the global InputMethodManager instance, creating it if it</span><br><span class="hljs-comment">  * doesn&#x27;t already exist.</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@hide</span></span><br><span class="hljs-comment">  */</span><br> <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> InputMethodManager <span class="hljs-title">getInstance</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>     <span class="hljs-keyword">return</span> getInstance(context.getMainLooper());<br> &#125;<br> <br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * Internally, the input method manager can&#x27;t be context-dependent, so</span><br><span class="hljs-comment">  * we have this here for the places that need it.</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@hide</span></span><br><span class="hljs-comment">  */</span><br> <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> InputMethodManager <span class="hljs-title">getInstance</span><span class="hljs-params">(Looper mainLooper)</span> </span>&#123;<br>     <span class="hljs-keyword">synchronized</span> (mInstanceSync) &#123;<br>         <span class="hljs-keyword">if</span> (mInstance != <span class="hljs-keyword">null</span>) &#123;<br>             <span class="hljs-keyword">return</span> mInstance;<br>         &#125;<br>         IBinder b = ServiceManager.getService(Context.INPUT_METHOD_SERVICE);<br>         IInputMethodManager service = IInputMethodManager.Stub.asInterface(b);<br>         mInstance = <span class="hljs-keyword">new</span> InputMethodManager(service, mainLooper);<br>     &#125;<br>     <span class="hljs-keyword">return</span> mInstance;<br> &#125;<br></code></pre></td></tr></table></figure><ul><li>ServiceManager.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns a reference to a service with the given name.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name the name of the service to get</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> a reference to the service, or &lt;code&gt;null&lt;/code&gt; if the service doesn&#x27;t exist</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IBinder <span class="hljs-title">getService</span><span class="hljs-params">(String name)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        IBinder service = sCache.get(name);<br>        <span class="hljs-keyword">if</span> (service != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> service;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> getIServiceManager().getService(name);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;error in getService&quot;</span>, e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过 ServiceManager 获取 InputMethod Service 对应的 Binder 对象 b,然后再将该 Binder 对象作为 IInputMethodManager.Stub.asInterface 的参数，返回一个 IInputMethodManager 的统一接口。</p><p>ServiceManager 的 getService 方法，首先从 sCache 缓存中查看是否有对应的 Binder 对象，有则返回，没有则调用 getIServiceManager().getService().</p><p>getIServiceManager()用于返回系统中唯一的 ServiceManager 对应的 Binder。</p><p>对应的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> IServiceManager <span class="hljs-title">getIServiceManager</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (sServiceManager != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> sServiceManager;<br>        &#125;<br>        <span class="hljs-comment">// Find the service manager</span><br>        sServiceManager = ServiceManagerNative.asInterface(BinderInternal.getContextObject());<br>        <span class="hljs-keyword">return</span> sServiceManager;<br>    &#125;<br></code></pre></td></tr></table></figure><p>BinderInternal.getContextObject() 方法就是用于获取 ServiceManager 对应的全局 Binder  对象。</p><p>至于关于 注册 服务，等到分析 Framework 启动过程的时候描述。</p><h2 id="理解-Manager"><a href="#理解-Manager" class="headerlink" title="理解 Manager"></a>理解 Manager</h2><p>ServiceManager 所管理的所有 Service 都是以相应的 Manager 返回给客户端，所以简述下 Framework 层对于 Manager 的定义。在Android 中，Manager 的含义类似于现实生活中的经纪人，Manager 所 manage 的对象是服务本身，因为每个具体的服务一般都会提供多个 API 接口，而 manager 所 manage 的正式这些 API。客户端一般不能直接通过  Binder  引用去访问具体的服务，而是要警告一个 Manager，相应的 Manager 类对客户端是可见的，而远程的服务端对客户端来说则是隐藏的。</p><p>而这些 Manager 的类内部都会有一个远程服务 Binder 的变量，而且在一般情况下，这些 Manager 的构造函数参数中都会包含这个 Binder  对象。简单讲，即先通过 ServiceManager 获取远程服务的 Binder 引用，然后使用这个 Binder 引用构造一个客户端本地可以访问的经纪人，然后客户端就可以通过该经纪人访问远程的服务了。</p><p>这种设计的作用是屏蔽了直接访问远程服务，从而给应用程序提供灵活的，可控的 API 接口，比如 AMS ，吸引不希望用户直接访问 AMS，而是经过 ActivityManager 类去访问，而 ActivityManager 内部提供了一些更具可操作性的数据结构化，不如 RecentTaskInfo 数据类封装了最近访问过的 Task 列表；MemoryInfo  数据类封装了和内存相关的信息。</p><h1 id="感激-非常感激，万分的感激！"><a href="#感激-非常感激，万分的感激！" class="headerlink" title="感激,非常感激，万分的感激！"></a>感激,非常感激，万分的感激！</h1><ul><li><a href="https://book.douban.com/subject/6811238/">柯元旦</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IPC</tag>
      
      <tag>Binder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录WebView的file协议的cookie跨域问题</title>
    <link href="/2017/03/19/webviewlocalcookie/"/>
    <url>/2017/03/19/webviewlocalcookie/</url>
    
    <content type="html"><![CDATA[<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>在做 hybrid 框架的时候,发现以 file 协议打开的文件,存在 cookie 跨域的问题.以做记录.</p><h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>以 file 协议打开的文件,页面内存在新的跳转,跳转数据通过 cookie 传递,发现cookie 不能正常传递.</p><h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>CookieManager 存在一个静态方法,可以打开 file 协议的 cookie.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">allowFileSchemeCookies</span> <span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>这是个静态方法,打开之后,整个 APP 的 webview 就都打开了.</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://developer.android.com/reference/android/webkit/CookieManager.html#allowFileSchemeCookies(">官方文档</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Webview</tag>
      
      <tag>cookie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一个进程重启的问题</title>
    <link href="/2017/02/25/activitytaskproblem/"/>
    <url>/2017/02/25/activitytaskproblem/</url>
    
    <content type="html"><![CDATA[<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>在项目中，比如推送了一个具体的产品，肯定是打算显示具体的产品详情页，这时候点击返回，也自然打算让用户返回首页,还是让用户留在 APP 内。<br>最近项目在接入华为推送的时候，遇到一个问题,我们的默认启动 Activity 是一个广告页,在从详情页返回到主页的时候,在主页再返回,出现了广告页.</p><p>类似于如图.<br><img src="https://raw.githubusercontent.com/tinggengyan/tinggengyan.github.io/source/imgur/task_desc.png" alt="效果图"></p><span id="more"></span><h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>看到这个现象猜测,是不是当栈中有 Activity 实例的时候,进程是会自动重启.为此做了一个实验，A-&gt;B，在 B 中关闭虚拟机，这时候，虚拟机自动重启。打开了 A 页面。</p><p>A-&gt;B-&gt;C，在 C 中关闭虚拟机。</p><p>这时候,栈中的信息如下.<br><img src="https://raw.githubusercontent.com/tinggengyan/tinggengyan.github.io/source/imgur/task_abc.png" alt="正常栈信息"></p><p>此时在 C 中执行关闭虚拟机的操作,然后进程重启.下图是虚拟机重启之后的栈信息。发现,除了之前栈顶的 C 销往了,栈下的 B,C 都还在.并且 B 的状态信息还是重启之前的,除了 pid 不一样了.<br><img src="https://raw.githubusercontent.com/tinggengyan/tinggengyan.github.io/source/imgur/task_ab.png" alt="进程重启栈信息"></p><p>这时候按下返回,栈信息如下.<br><img src="https://raw.githubusercontent.com/tinggengyan/tinggengyan.github.io/source/imgur/task_a.png" alt="重启按下返回键栈信息"></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><ol><li>为何会出现欢迎页<br>目前发现,华为推送在点击通知的时候,会自动启动 APP 的默认 Activity.</li><li>关于为何进程会重启<br>目前发现的现象是,当栈底还有 Activity 的时候,就会重启. Google 了一些博客,还是未发现有合理的解释.</li><li>为何重启后 task 中原有栈顶的 Activity 的信息和重启之前一模一样?<br>原因是什么?目前不知道怎么下手分析,仅仅是猜测,应该是和 ActivityRecord 有关,系统在重启的时候直接复用了.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Activity</tag>
      
      <tag>Task</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BottomNavigationView 的使用</title>
    <link href="/2017/02/18/BottomNavigationView/"/>
    <url>/2017/02/18/BottomNavigationView/</url>
    
    <content type="html"><![CDATA[<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>BottomNavigationView 这个概念很早之前就被提出,之后出一个第三方库.但是一直未有官方的支持,今天正好看到有官方支持,记录一下.</p><span id="more"></span><h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p><a href="https://material.io/guidelines/components/bottom-navigation.html">BottomNavigationView</a>  是 material design 中的设计的实现，这种设计很早就出现了。</p><h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><ol><li><p>添加依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">compile <span class="hljs-string">&#x27;com.android.support:design:25.1.1&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>在menu下新建 menu配置文件，顺序就是 bottom bar 显示的顺序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/recents&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;Recents&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/ic_recents&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/favorites&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;Favorites&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/ic_favorites&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/nearby&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;Nearby&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/ic_nearby&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 drawable 和 drawable-v21下新建item的背景文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;!-- in drawable for lower then 21 API--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">selector</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:state_pressed</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@android:color/white&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@android:color/transparent&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selector</span>&gt;</span><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;!--in drawable-v21 folder, for greater or equal then 21 API--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ripple</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:color</span>=<span class="hljs-string">&quot;@android:color/white&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ripple</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 layout 下新建布局文件，用来添加 BottomNavigationView</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.support.design.widget.BottomNavigationView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/bottomNavigationView&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_alignParentBottom</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@android:color/holo_blue_bright&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:itemBackground</span>=<span class="hljs-string">&quot;@drawable/navigationbar_item_bg&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:itemIconTint</span>=<span class="hljs-string">&quot;@android:color/white&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:itemTextColor</span>=<span class="hljs-string">&quot;@android:color/white&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:menu</span>=<span class="hljs-string">&quot;@menu/menu_bottom_navigation_view&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 Activity 或者 fragment 中添加监听即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">bottomNavigationView = (BottomNavigationView) findViewById(R.id.bottomNavigationView);<br><span class="hljs-keyword">this</span>.bottomNavigationView.setOnNavigationItemSelectedListener(<span class="hljs-keyword">new</span> BottomNavigationView.OnNavigationItemSelectedListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onNavigationItemSelected</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> MenuItem item)</span> </span>&#123;<br>        Toast.makeText(BottomNavigationViewActivity.<span class="hljs-keyword">this</span>, item.getTitle(), Toast.LENGTH_SHORT).show();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Ｃonclusion"></a>Ｃonclusion</h1><p>官方的这个支持，可扩展性不强，也没什么特别的新意，可参考学习第三方库<a href="https://github.com/roughike/BottomBar/">BottomBar</a>.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BottomNavigationView</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加快 AndroidStudio 编译速度之 build cache</title>
    <link href="/2017/02/07/buildCache/"/>
    <url>/2017/02/07/buildCache/</url>
    
    <content type="html"><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>AndroidStudio 编译速度慢,已经是人神共愤的事情了.本文是一篇译文，讲述如果利用 build cache 技术加快编译速度。分成两部分,一部分是第三方博文,另外一部分是官方文档.援引文章在结尾给出.</p><span id="more"></span><h1 id="Using-build-cache-in-Android-Studio-makes-Gradle-build-faster"><a href="#Using-build-cache-in-Android-Studio-makes-Gradle-build-faster" class="headerlink" title="Using build cache in Android Studio makes Gradle build faster"></a>Using build cache in Android Studio makes Gradle build faster</h1><h2 id="为何关心-build-cache"><a href="#为何关心-build-cache" class="headerlink" title="为何关心 build cache?"></a>为何关心 build cache?</h2><p>因为 build cache 可以加快 clean 和 build 的速度。当你执行 ‘gradle clean build’ 或者类似的命令的时候。</p><h2 id="How-does-it-make-the-build-faster"><a href="#How-does-it-make-the-build-faster" class="headerlink" title="How does it make the build faster?"></a>How does it make the build faster?</h2><p>通过缓存已经分包的 libraries，这个过程是不在 Gradle 的缓存管理范围内的。无论是通过 Android studio 或者 命令行的方式执行 clean 操作，build-cache 内的包都会被保留，等到下次 build apk 的时候，被复用。可以在 build-cache 目录下查看缓存的结构。</p><p><img src="https://zeroturnaround.com/wp-content/uploads/2016/12/android-studio-android-build-cache-dir.png" alt="缓存文件夹"></p><p>这是文件夹下列出的是一系列命名比较奇怪的文件和文件夹。文件大小是 0 字节的文件是用来锁定文件使用的。这个是非常必要的，因为同一个缓存文件可以被不同的项目使用。锁文件，可以防止两个项目同时对一个缓存文件进行读写操作。</p><h2 id="Exploded-aar-caches"><a href="#Exploded-aar-caches" class="headerlink" title="Exploded aar caches"></a>Exploded aar caches</h2><p>aar 缓存以文件夹的形式展现。有两种类型的缓存，一种是 dex 缓存，一种是解压完的 aar 形式的缓存。解压完的 aar 将直接保存在对应的 output 文件夹下。比如 <em>220674f5fc7186b424e032744f0eeb413d469b54</em> 文件夹的  <em>input 文件</em> 包含以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">COMMAND=PREPARE_LIBRARY<br>MAVEN_COORDINATES=com.google.maps.android:android-maps-utils:aar:0.3.4<br></code></pre></td></tr></table></figure><p>文件夹的名字是 <em>input file</em> 的 <em>sha1sum</em> 值。在这个例子里，就是 <em>android-maps-utils</em> 库。解压完的 aar 在依赖的分析过程中（若未被缓存）会被缓存。</p><h2 id="Dexed-caches"><a href="#Dexed-caches" class="headerlink" title="Dexed caches"></a>Dexed caches</h2><p>对于分包缓存，有着和 aar 缓存相似的结构。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">COMMAND=PREDEX_LIBRARY<br>FILE_PATH=/Users/Sten/.android/build-cache/220674f5fc7186b424e032744f0eeb413d469b54/output/jars/classes.jar<br>FILE_HASH=cf251baf39f5c5138224b67b4106eb6331abbd13<br>BUILD_TOOLS_REVISION=25.0.0<br>JUMBO_MODE=false<br>OPTIMIZE=true<br>MULTI_DEX=false<br></code></pre></td></tr></table></figure><p>文件中的 <em>FILE_PATH</em> 指向的就是我们上面所说的文件夹。文件中包含了 <em>android-maps-utils</em> 库的分包版本。<em>input file</em>  中的键值对定义了每个缓存实体。举个例子，<em>build tools revision</em> 是 25.0.0 和 25.0.1 将会有不同的分包缓存，因为 BUILD_TOOLS_REVISION 值不同。但是对于 aar 缓存而言，则会是同一个，因为对于 aar 缓存的 <em>input file</em> 而言，command 未变，maven 地址也没有变，输入文件未变。</p><p>这里的输出是一个文件，而不是一个文件夹。解压之后的文件结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">73  12-06-16 16:07   META-INF/MANIFEST.MF<br>       0  12-06-16 16:07   META-INF/<br>   87000  12-06-16 16:07   classes.dex<br>       0  12-06-16 16:07   com/<br>       0  12-06-16 16:07   com/google/<br>       0  12-06-16 16:07   com/google/maps/<br>       0  12-06-16 16:07   com/google/maps/android/<br>       0  12-06-16 16:07   com/google/maps/android/clustering/<br>       0  12-06-16 16:07   com/google/maps/android/clustering/algo/<br>       0  12-06-16 16:07   com/google/maps/android/clustering/view/<br>       0  12-06-16 16:07   com/google/maps/android/geometry/<br>       0  12-06-16 16:07   com/google/maps/android/heatmaps/<br>       0  12-06-16 16:07   com/google/maps/android/projection/<br>       0  12-06-16 16:07   com/google/maps/android/quadtree/<br>       0  12-06-16 16:07   com/google/maps/android/ui/<br></code></pre></td></tr></table></figure><p>如你所见，这个只是文件夹结构和 classes.dex 文件。</p><h2 id="Multidex-and-API-level-21"><a href="#Multidex-and-API-level-21" class="headerlink" title="Multidex and API level 21"></a>Multidex and API level 21</h2><p>根据 multidex  和 target API 是否高于 21 的不同组合，分包缓存的使用方式也不一样。</p><p>第一种情况是，不使用分包。在这种情况下，API 级别无论是否高于 21 都无关。将会使用分包缓存，也会进行 dex 文件的 merge 操作。在 apk 文件中，我们将会看到只有一个 classes.dex 文件，这个 classes.dex 包含了所有的 application 类和 libraries。</p><p>第二种情况是，minSdkVersion 低于 21 并且 multidex 无法使用 build cache 下的 predex libraries .这是因为兼容包里的 multidex 并不支持 predex.Gradle 插件总是将所有的 application 和 library classes 都放到一个 dex 包里.</p><p>最后一种情况是使用了 multidex 并且 API 级别高于 21.在这种情况下,build-cache文件夹下的分包文件将会被直接打包进 apk 文件中.每个库都将分别拥有一个将被打包进 apk 中的 classes.dex 文件.这也是为什么 API 21 是<a href="https://developer.android.com/studio/build/multidex.html#dev-build">编译时期最佳的选择</a> .</p><h2 id="Performance-measurements"><a href="#Performance-measurements" class="headerlink" title="Performance measurements"></a>Performance measurements</h2><p>针对2015年的 iosched app 在没有 multidex 和 API 最低版本 21 下分别进行测试.打开 Gradle 守护进程,启用和禁用 build cache,分别在命令行下运行 5 次 clean,build 操作.以下是五次运行结果的中位数报告.</p><p><img src="https://zeroturnaround.com/wp-content/uploads/2016/12/android-build-profile-2.png" alt="Clean build without build cache"></p><p><img src="https://zeroturnaround.com/wp-content/uploads/2016/12/android-build-profile-1.png" alt="Clean build with build cache"></p><p>从上图可以看到,编译时间很明显的从 18.7 降到了 6.5秒.从图上也可以很清晰的看到 <em>android:transformClassesWithDexForDebug task</em> 所花的时间,从 12.1 降到了 1.7 秒.节省的时间取决于项目中使用的依赖包数.</p><p>如果还没尝试 Android studio 2.3 ,建议现在尝试.你将会很明显的看到节省的时间.如果你对非正式版的没有兴趣,也可以在 Android studio 2.2 和 Android Gradle plugin 2.2 上实验,通过向项目根目录下的 gradle.properties  文件中添加 <em>android.enableBuildCache=true</em> .</p><!-- more --><hr><p>下面是官方的译文.</p><h1 id="Build-Cache"><a href="#Build-Cache" class="headerlink" title="Build Cache"></a>Build Cache</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在 <em>Android Studio 2.2 Beta3</em> 中介绍了一种可以减少编译时间的新 <em>build cache</em>  缓存特性，这个新特性可以加快包括全量编译，增量编译和 instant run 的编译时间，通过保存和复用前一次由同一个项目或者其他项目 build 产生的文件或者文件夹。<br><em>build cache</em> 目的是为了在所有的 Android 项目中共用。开发者可以通过修改 <em>gradle.properties</em> 文件，实现是否启用 <em>build cache</em> 和指定缓存的位置。当前 <em>build cache</em>  只包含 <em>pre-dexed</em> 库，未来，<em>Android studio</em> 团队会支持其他类型的文件。</p><p><strong>注意</strong>：<em>build cache</em>  的实现是和  <em>gradle cache</em>  管理（例如,reporting up-to-date statuses）是相互独立的。当执行一个 task 的时候，无论是否使用 <em>build cache</em>  对于 Gradle 而言都是未知的（即：即使命中了缓存，Gradle 也不会认为是 up-to-date）。然而，当使用 <em>build cache</em> 的时候，还是希望加快编译速度的。<br>即使目前还未发现有任何问题，我们希望给社区更多的时间以提供更多的反馈。目前这个特性仍旧作为实验性的特性，目前默认还是禁用的。（Android Studio 2.3 Canary 1 开始默认启用）。根据未来的反馈情况，当我们觉得这个特性稳定了，将会在 Android Studio 2.3 或者 2.4 中默认启动。</p><h2 id="How-to-use-the-Build-Cache"><a href="#How-to-use-the-Build-Cache" class="headerlink" title="How to use the Build Cache"></a>How to use the Build Cache</h2><h3 id="Step-0"><a href="#Step-0" class="headerlink" title="Step 0"></a>Step 0</h3><p>确保 <a href="http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.DexOptions.html#com.android.build.gradle.internal.dsl.DexOptions:preDexLibraries">android.dexOptions.preDexLibraries</a>已经设置为 <strong>true</strong>。否则 <em>libraries</em> 不会被 <em>pre-dexed</em>，因而 <em>build cache</em> 并不会被使用。</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>在 Android 项目中打开 <em>gradle.properties</em>，添加以下两个参数</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android.enableBuildCache=<span class="hljs-literal">true</span> # <span class="hljs-attr">true:</span>启用 build cache，反之禁用。如果这个参数未设置，默认是禁用 build cache.<br><br>android.buildCacheDir=&lt;path-to-build-cache-directory&gt; # 这个是个可选项，用来指定 build cache 目录的绝对路径。如果设置成项目路径，那么是项目于项目的根目录而言的。如果这个参数未被设置，那么默认的目录是 &lt;user-home-directory&gt;<span class="hljs-regexp">/.android/</span>build-cache。如果使用相同的缓存目录，那么多个项目可以共用相同的缓存，所以，推荐使用默认的路径或者使用一个项目外的绝对路径。任何情况下，build cache 的路径都不应该放在 <span class="hljs-string">&quot;build&quot;</span> 文件夹下，除非每次运行 clean 之后，都能删除 build cache 。如果 android.enableBuildCache 被设置成 <span class="hljs-literal">false</span>，则这个参数将会被忽略。<br><br></code></pre></td></tr></table></figure><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>build 项目，或者在命令行下执行 <em>./gradlew assemble</em>,检查以下位置，查看 build cache 是否起作用。</p><ul><li>缓存的文件被存储在了上述  android.buildCacheDir 指定的文件夹下。默认情况下，是在 <em><user-home-directory>/.android/build-cache.</em></li><li>最终的 pre-dexed 文件被存储在了 <em>&lt;project-dir/module-dir&gt;/build/intermediates/pre-dexed/debug</em> 和 *&lt;project-dir/module-dir&gt;/build/intermediates/pre-dexed/release.*。可以在命令行下运行指令查看  “pre-dexed” 文件夹。如果点击的是 Android Studio 面板上的 “Run”  按钮，时无法看到这个文件夹的，因为这个文件夹背会被删除。</li></ul><p><strong>注意</strong>:<br>如果使用 Multi-dex 并且 minSdk &gt;= 21 ，那么 dexed files 将会被直接保存在 <em>&lt;project-dir/module-dir&gt;/build/intermediates/transforms/dex</em> 目录下， 而不是在 <em>&lt;project-dir/module-dir&gt;/build/intermediates/pre-dexed</em>.</p><p>** Cleaning the Build Cache<br>如果想要清除 <em>build cache</em>， 可以直接删除 <em>build cache</em> 文件夹内的内容。<br><em>build cache</em> 文件夹在 <em>android.buildCacheDir</em> 指定的目录下,或者在默认的 <em><user-home-directory>/.android/build-cache</em> 文件夹下.</p><p>从 Android Studio 2.3 Canary 1 开始，Gradle task 中新增了一个叫做 <em>cleanBuildCache</em> 的任务，可以更加便利的删除 <em>build cache</em> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./gradlew cleanBuildCache<br></code></pre></td></tr></table></figure><h1 id="感激-非常感激，万分的感激！"><a href="#感激-非常感激，万分的感激！" class="headerlink" title="感激,非常感激，万分的感激！"></a>感激,非常感激，万分的感激！</h1><p>感谢以下的文章以及其作者和翻译的开发者们,排名不分先后</p><ul><li> <a href="http://tools.android.com/tech-docs/build-cache">Build Cache</a></li><li> <a href="https://zeroturnaround.com/rebellabs/using-build-cache-in-android-studio-makes-gradle-build-faster/">Using build cache in Android Studio makes Gradle build faster</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
      <category>Gradle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 内存模型_2</title>
    <link href="/2017/01/28/JavaMemoryModel-2/"/>
    <url>/2017/01/28/JavaMemoryModel-2/</url>
    
    <content type="html"><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>理解 JMM 就需要理解 JVM 中的运行时内存区域分为哪几部分,以及各个部分的区别.</p><h1 id="内存区域是什么"><a href="#内存区域是什么" class="headerlink" title="内存区域是什么?"></a>内存区域是什么?</h1><p>Java 虚拟机在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域.这些区域都有各自的用于,以及创建和销毁的时间,有的区域随着虚拟机进程的启动而存在,有些区域则依赖用户县城的启动和结束而建立和销毁.<br><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/JMM_RunningTimeMemory.png?raw=true" alt="Java 运行时数据区域"></p><p>上图展示了 JVM 虚拟机所管理的几个运行时数据区域.<br>分为两类:</p><ul><li>所有线程都共享的,即 JVM 虚拟机就一份</li><li>线程隔离的数据区,即每个线程所特有的一份,每份线程都会创建一份.它的生命周期与线程相同.</li></ul><span id="more"></span><h2 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1. 程序计数器"></a>1. 程序计数器</h2><p>程序计数器是一块儿较小的内存空间,它可以看做是当前线程所执行的字节码的行号指示器.在虚拟机的概念模型里,字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令,分支,循环,跳转,异常处理,线程恢复等基础功能都需要依赖这个计数器来完成.</p><p>Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的,在任何一个确定的时刻,一个处理器(对于多核处理器来说是一个内核)都会执行一条线程中的指令.因此,为了线程切换之后,能恢复到正确的执行位置,每条线程都需要一个独立的程序计数器,各条线程之间的计数器互不影响,独立存储,我们称这类内存区域为”线程私有”的内存.</p><p>如果线程正在执行的是一个 Java 方法,这个计数器记录的是正在执行的虚拟机字节码指令的地址;如果执行的是 native 方法,这个计数器的值则为空.</p><p>程序计数器是唯一一个在 Java 虚拟机规范中没有规定任何 OOM 情况的区域.</p><h2 id="2-Java-虚拟机栈"><a href="#2-Java-虚拟机栈" class="headerlink" title="2. Java 虚拟机栈"></a>2. Java 虚拟机栈</h2><p>虚拟机栈描述的是 Java 方法执行的内存模型:每个方法在执行的同时都会创建一个栈帧,栈帧是用于存储 <strong>局部变量表,操作数栈,动态链接,方法出口等</strong> 信息.每个方法从调用直至执行完成的过程,就对应着一个栈帧在虚拟机栈中的入栈到出栈的过程.</p><p>局部变量表存放编译器可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double),对象引用(reference类型,它不等同于对象本身,可能是一个指向对象起始地址的引用指针,也可能是指向代表对象的句柄或者其他与次对象相关的位置) 和 returnAddress 类型(指向了一条字节码指令的地址).</p><p>局部变量表所需要的内存空间在编译期完成分配,当进入一个方法时,这个方法需要在帧中分配多大的局部变量空间是完全确定的,在方法运行期间不会改变局部变量的大小.</p><p>这个区域存在两种异常状况:如果线程的栈深度大于虚拟机允许的深度,讲抛出 StackOverflowError 异常;如果虚拟机栈是可以扩展的(当前大部分的 Java 虚拟机都可以动态扩展,只不过 Java 规范也允许固定长度的虚拟机栈),如果扩展时无法申请到足够的内存,就会抛出 OOM 异常.</p><h2 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3. 本地方法栈"></a>3. 本地方法栈</h2><p>本地方法栈的作用与虚拟机栈所发挥的作用是非常相似的,它们之间的区别不过是虚拟机栈为虚拟机执行 Java 方法(字节码) 服务,而本地方法栈则为虚拟机使用到 Native 方法服务.虚拟机规范中并未对本地方法栈中的使用的语言,使用方式与数据结果有强制规定,因此具体的虚拟机可以自由实现,甚至有的虚拟机直接将本地方法栈和虚拟机栈合二为一.</p><p>本地方法栈也会抛出和虚拟机栈一样的异常: StackOverflowError 和 OutOfMemoryError 异常.</p><h2 id="4-Java-堆"><a href="#4-Java-堆" class="headerlink" title="4. Java 堆"></a>4. Java 堆</h2><p>Java 堆是 JVM 虚拟机管理的内存中最大的一块儿.Java 堆是被<strong>所有的线程共享</strong>的一块儿内存区域,在虚拟机创建的时候就创建.这个区域的唯一目的: 存放对象的实例,几乎所有的对象实例都在这里分配.<br>虚拟机规范的描述: 所有的<strong>对象实例</strong>以及<strong>数组</strong>都要在堆上分配.<br>随着 JIT 编译器的发展与逃逸分析技术逐渐成熟,栈上分配,标量替换优化技术将会导致一些微妙的变化发生,所有的对象都在堆上分配也逐渐变得不是那么的”绝对”.</p><p>Java 堆是垃圾收集器管理的主要区域,因此也会称 Java 堆为 “GC堆”.</p><ul><li>从<strong>内存回收</strong>的角度来看,由于现在的收集器基本都采用分代收集算法,所以 Java 堆还可以细分为: 新生代和老年代;再细致一点的有 Eden 空间、From Survivor 空间、To Survivor 空间等。</li><li>从<strong>内存分配</strong>的角度来看,线程共享的 Java 堆中可能换分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB).</li></ul><p>不过无论怎么划分,都与存放内容无关,无论哪个区域,存储的都仍然是对象实例,进一步划分的目的是为了更好的内存回收,或者更快地分配内存.</p><p>根据 Java 虚拟机规范的规定,Java 堆可以处于物理上不连续的内存空间中,只要逻辑上连续即可,就像我们的磁盘空间一样.在实现的时候,既可以实现成固定大小的,也可以是可扩展的,不过当前主流的虚拟机都是按照可扩展的来实现的.</p><p>如果堆中没有内存完成实例分配,并且堆也无法再扩展时,将会抛出 OutOfMemoryError 异常.</p><h2 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5. 方法区"></a>5. 方法区</h2><p>方法区与 Java 堆一样,是各个线程共享的内存区域,它用于存储已被虚拟机加载的类信息,常量,静态变量,即时编译器编译后的代码等数据.虽然虚拟机规范把方法区描述成堆的一个逻辑部分,但是它却有一个叫做 Non-Heap(非堆)的名字,目的应该就是为了与堆区分开来.</p><p>习惯了在 HotSpot 虚拟机上开发,部署程序的开发者来说,很多人都更愿意把方法区成为永久代,本质上两者并不等价,仅仅是因为 HotSpot 虚拟机的设计选择将 GC 分代收集扩展至方法区,或者说使用永久代来实现方法区而已,这样 HotSpot 的垃圾收集器可以像管理 Java 堆一样管理这部分内存,能够省去专门为方法区编写内存管理代码的工作了.对于其他虚拟机来说则是不存在永久代这个概念的.永久代现在看来并非是一个好主意,对于 HotSpot 虚拟机,正在放弃永久代,并逐步采用 Native Memory 来实现方法区的规划了,目前在 JDK1.7 中,,已经将原本放在永久代的字符串常量池移出.</p><p>相对而言,垃圾收集行为在方法区是比较少见的,但并非数据进入方法就如永久代的名字一样,真的是永久的存在.这个区域的内存回收目标主要是针对常量池的回收和堆类型的卸载,一般来说,这个区域的内存回收是难以令人满意的,尤其是类型的卸载,条件相当苛刻,但是这个部分的内存回收却又不是非常必要的.</p><p>方法区无法满足内存分配需求时,将抛出 OutOfMemoryError 异常.</p><h2 id="6-运行时常量池"><a href="#6-运行时常量池" class="headerlink" title="6. 运行时常量池"></a>6. 运行时常量池</h2><p>运行时常量池是<strong>方法区的一部分</strong>! class 文件中除了有类的版本,字段,方法,接口等描述信息外,还有一项信息是常量池,用于存在编译期生成的各种字面量和符号引用,这部分内存将在类加载后进入方法区的运行时常量池中存放.</p><p>Java 虚拟机对 class 文件每一部分的格式都有严格规定,每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可,装载和执行,但对于运行时常量池,Java 虚拟机规范没有做任何细节的要求,不同的虚拟机可以按照自己的需要来实现这个内存区域.一般来说,除了保存 class 文件中描述的<strong>符号引用</strong>外,还会把翻译出来的<strong>直接引用</strong>也存储在运行时常量池中.</p><p>运行时常量池对于 class 文件常量池的另外一个重要特征是具备动态性,Java 语言并不要求敞亮一定只有编译期才能产生,也就是并非预置入 class 文件中常量池的内容才能进入方法区运行时常量池,运行期间也可能将<strong>新的常量</strong>放入常量池中,这种特性被开发人员利用得比较多的便是 String 类的 intern () 方法.</p><p>既然运行时常量池是方法区的一部分,自然受到方法区内存的限制,当常量池无法再申请到内存的时候,就会抛出 OutOfMemoryError 异常.</p><h2 id="7-直接内存"><a href="#7-直接内存" class="headerlink" title="7. 直接内存"></a>7. 直接内存</h2><p>直接内存并非是运行时数据区的一部分,也不是 Java 虚拟机规范中定义的内存区域.但是这部分内存也被频繁的使用,而且可能导致 OutOfMemoryError 异常出现.</p><p>在 Java1.4 之后新加入了 NIO 类,引入了一种基于通道与缓存区的 I/O 方法,它可以使用 Native 函数库直接分配<strong>堆外内存</strong>,然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块<strong>内存的引用</strong>进行操作.这样能在一些场景中显著的<strong>提高性能</strong>,因为<strong>避免</strong>了在 Java 堆中和 Native 堆中来<strong>回复制数据</strong>.</p><p>显然,本机直接内存分配不会受到 Java 堆大小的限制,但是,既然是内存,肯定还是会受到本机总内存的大小和处理器寻址空间的限制.所以,也是会出现 OutOfMemoryError 异常.</p><h2 id="感激-非常感激，万分的感激！"><a href="#感激-非常感激，万分的感激！" class="headerlink" title="感激,非常感激，万分的感激！"></a>感激,非常感激，万分的感激！</h2><p>感谢以下的文章以及其作者和翻译的开发者们,排名不分先后</p><ul><li><a href="https://book.douban.com/subject/24722612/">深入理解Java虚拟机（第2版）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JMM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 内存模型_1</title>
    <link href="/2017/01/15/javaMemoryModel1/"/>
    <url>/2017/01/15/javaMemoryModel1/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="http://www.infoq.com/cn/articles/java-memory-model-1">本文记录 Java 中的内存模型的基础部分1。</a><br>本篇作为学习 Java 内存模型基础部分的笔记,加上些许自己的理解和解释.</p><span id="more"></span><h2 id="为什么需要理解-Java-内存模型"><a href="#为什么需要理解-Java-内存模型" class="headerlink" title="为什么需要理解 Java 内存模型"></a>为什么需要理解 Java 内存模型</h2><p>结论:并发产生的内存可见性问题.</p><p>并发编程中的两个关键问题:</p><ul><li>线程之间如何通行(以何种机制来交换信息)</li><li>线程之间如何同步</li></ul><p>已有的通信机制:</p><ul><li>共享内存: 线程之间共享程序的公共状态,线程之间通过读写内存中的公共状态来隐式进行通信.</li><li>消息传递: 在这种模型中,线程之间没有公共状态,线程之间必须通过发送消息显式地通信.</li></ul><p>同步,指的是控制不同线程之间操作发生的相对顺序的机制:</p><ul><li>在共享内存模型中,程序员必须显式的指定某个方法或者某段代码需要在线程之间互斥执行.</li><li>在消息传递的模型里,由于消息的发送必须在消息的接收之前,因此,同步是隐式进行的.</li></ul><p>java 采用的是共享内存模型,而 java 线程之间的通信总是隐式进行,整个通信过程对程序员完全是透明的.<br>对于 java 程序员而言,如果不了解 java 内存模型,在编写多线程程序的时候,就会遇到各种各样的内存可见性的问题.所以,对 java 的内存模型需要有一定的了解.</p><h2 id="Java-采用的共享内存模型是什么样的"><a href="#Java-采用的共享内存模型是什么样的" class="headerlink" title="Java 采用的共享内存模型是什么样的"></a>Java 采用的共享内存模型是什么样的</h2><blockquote><p>Java 采用的是共享内存模型作为线程间的通信机制.</p></blockquote><p>共享内存: 堆内存,在 java 中,所有的 <strong>实例域,静态域和数组元素</strong> 存储在堆内存中,堆内存在线程之间共享.<br>局部变量,方法定义的参数和异常处理参数,不会在线程之间共享,它们不会有内存可见性问题,也不受内存模型的影响.</p><p>Java 线程之间的通信由 Java内存模型(JMM)控制,JMM 决定了一个线程对共享变量的写入何时对另个线程可见.从抽象的角度来看,JMM 定义了线程和主内存之间的抽象关系:线程之间的<strong>共享变量存储在主内存中</strong>,每个线程都有一个私有的本地内存,本地内存中存储了该线程以读写共享变量的副本.<strong>本地内存是 JMM 的一个抽象概念,并不真实存在</strong>.它涵盖了缓存,写缓冲区,寄存器以及其他的硬件和编译器优化.</p><p><img src="https://static001.infoq.cn/resource/image/b0/9b/b098a84eb7598d70913444a991d1759b.png" alt="Java 内存模型抽象示意图"></p><p>分析: 线程 A 和线程 B 通信过程</p><ol><li>线程 A 将本地内存 A 中更新过的共享变量刷新到主内存中去.</li><li>线程 B 去主内存中读取线程 A 更新过的共享变量.</li></ol><p><img src="https://static001.infoq.cn/resource/image/2c/cb/2c452d147bf0d09b14b770d3990740cb.png" alt="内存模型案例"></p><p>本地内存 A 和本地内存 B 都有主内存中共享的变量 x 的副本.假设初始时,这个三个内存中的 x 的值都是 0.线程 A 在执行时,把已经更新的 x 值(假设为1) 临时存放在自己的本地内存 A 中. 当线程 A 和线程 B 需要通信的时,线程 A 首先会把本地内存中修改后的 x 值刷新到主内存中,此时主内存中的 x 值变为 1.随后,线程 B 到主内存中读取线程 A 更新之后的 x 值,此时线程 B 的本地内存的 x 值也变为 1.</p><p>从整体上看,这两个步骤实质上是线程 A 在向线程 B 发送消息,而且这个通信过程必须经过主内存.JMM 通过控制主内存与每个线程的本地内存之间的交互,来为 java 程序员提供内存可见性保证.</p><h2 id="重排序-即-java-如何实现同步"><a href="#重排序-即-java-如何实现同步" class="headerlink" title="重排序(即 java 如何实现同步)"></a>重排序(即 java 如何实现同步)</h2><h4 id="为什么需要重排序"><a href="#为什么需要重排序" class="headerlink" title="为什么需要重排序"></a>为什么需要重排序</h4><p>在执行程序的时候,为了提高性能,<strong>编译器 和 处理器</strong> 常常会对指令做重排序.有三种重排序.</p><h4 id="什么是重排序"><a href="#什么是重排序" class="headerlink" title="什么是重排序"></a>什么是重排序</h4><ol><li>编译器优化重排序(编译器重排序).编译器在不改变单线程<strong>程序语义</strong>的前提下,重新安排语句的<strong>执行顺序</strong>.</li><li>指令级并行重排序(处理器重排序).现代处理器采用<strong>指令级并行</strong>技术来执行多条指令<strong>重叠执行</strong>.在不存在<strong>数据依赖</strong>的前提下,处理器可以改变语句对应的指令的执行顺序.</li><li>内存系统的重排序(处理器重排序).由于处理器使用缓存和读写缓冲区,这使得加载和存储操作看上去可能是在错乱执行.<br>所以,从 java 源代码到执行阶段,会一次经过三个重排序.以上所述的三个重排序,一个属于编译器重排序,两个属于处理器重排序.</li></ol><h4 id="如何避免重排序带来的问题"><a href="#如何避免重排序带来的问题" class="headerlink" title="如何避免重排序带来的问题"></a>如何避免重排序带来的问题</h4><p>三个重排序,都可能导致多线程出现内存可见性的问题.</p><h5 id="一个例子-说明重排序产生的问题"><a href="#一个例子-说明重排序产生的问题" class="headerlink" title="一个例子,说明重排序产生的问题"></a>一个例子,说明重排序产生的问题</h5><p><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/JMMprocessor_1.png?raw=true" alt="处理器指令"></p><p>假设处理器 A 和处理器 B 按程序的顺序并行执行内存访问，最终却可能得到 x = y = 0 的结果。具体的原因如下图所示：</p><p><img src="https://static001.infoq.cn/resource/image/90/df/9026b8f4b6c1fae4270615e0aadc7cdf.png" alt="程序的顺序"></p><ol><li>这里处理器 A 和处理器 B 可以同时执行赋值操作 A1,B1,将共享变量写入各自的写缓冲区（缓冲区 A ，缓冲区 B）,此时处理器 A 中的写缓冲区中的变量 a 值为1,处理器 B 写缓冲区中的变量 b 值为2,但是还未刷新到内存中;</li><li>然后执行 A2,B2 操作,从内存中读取变量 b 和变量 a 的值(此时的变量 a 和变量 b 的值还是初始状态,都为0),并赋值给 x 和 y,所以,此时的 x 和 y 的值都为 0.</li><li>最后执行 A3 和 B3 操作，把处理器 A  和 处理器 B 写缓存区中保存的脏数据刷新到内存中,此时内存中的变量 a 和变量 b 就是 1 和 2 了。</li><li>执行完所有操作之后, x = y = 0 .</li></ol><p>从内存操作实际发生的顺序来看，直到处理器 A 执行 A3 来刷新自己的写缓存区，写操作 A1 才算真正执行了。虽然处理器 A 执行内存操作的顺序为：A1-&gt;A2，但内存操作实际发生的顺序却是：A2-&gt;A1。此时，处理器 A 的<strong>内存操作顺序</strong>被重排序了（处理器 B 的情况和处理器 A 一样，这里就不赘述了）。</p><p>这里的关键是，由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写-读操作重排序。<br>对于编译器, JMM 的编译器重排序规则会禁止特定类型的<strong>编译器重排序</strong>(并不是所有的编译器重排序都需要被禁止的).<br>对于处理器, JMM 的处理器重排序规则会要求 java 编译器在生成指令序列的时候,插入指定类型的<strong>内存屏障指令</strong>,通过内存屏障指令来禁止特定类型的处理器重排序(不是所有的处理器重排序都要禁止的).</p><h5 id="处理器重排序"><a href="#处理器重排序" class="headerlink" title="处理器重排序"></a>处理器重排序</h5><blockquote><p>现代处理器使用写缓冲区来临时保存向内存写入的数据.写缓冲区可以保障指令流水线持续运行,它可以避免由于处理器停顿下来等待向内存写入数据而产生延迟.同时通过以批处理的方式刷新写缓冲区,以及合并写缓冲区中对同一个内存地址的多次写,可以减少对内存总线的占用.</p></blockquote><p>缓冲区的这一特性是可以加速程序的运行,然而每个处理器的写缓冲区,仅仅对它所在的处理器可见.这个特性会对内存操作的执行顺序产生重要的影响:处理器对内存的读写操作的执行顺序,不一定与内存实际发生的读写顺序一致.</p><p><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/JMM_ReOrder.png?raw=true" alt="重排序类型"></p><p>上表单元格中的 “N” 表示处理器不允许两个操作重排序，“Y” 表示允许重排序。<br>从上表我们可以看出：常见的处理器都允许 Store-Load 重排序；常见的处理器都不允许对存在数据依赖的操作做重排序。sparc-TSO 和 x86 拥有相对较强的处理器内存模型，它们仅允许对写-读操作做重排序（因为它们都使用了写缓冲区）。</p><ol><li>注1：sparc-TSO 是指以 TSO(Total Store Order) 内存模型运行时，sparc 处理器的特性。</li><li>注2：上表中的 x86 包括 x64 及 AMD64。</li><li>注3：由于 ARM 处理器的内存模型与 PowerPC 处理器的内存模型非常类似，本文将忽略它。</li><li>注4：数据依赖性后文会专门说明。</li></ol><h5 id="内存屏障指令"><a href="#内存屏障指令" class="headerlink" title="内存屏障指令"></a>内存屏障指令</h5><p>为了保证内存可见性，java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM 把内存屏障指令分为下列四类：<br><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/JMM_Barriers.png?raw=true" alt="内存屏障"></p><p>StoreLoad Barriers 是一个“全能型”的屏障，它同时具有其他三个屏障的效果。现代的多处理器大都支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（buffer fully flush）。</p><h6 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h6><p>从 JDK5 开始，java 使用新的 JSR -133 内存模型,JSR-133 使用 happens-before 的概念来阐述操作之间的内存可见性。在 JMM 中，如果一个操作执行的<strong>结果</strong>需要对另一个操作可见，那么这两个操作之间必须要存在 happens-before 关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。<br>与程序员密切相关的 happens-before 规则如下：</p><ul><li>程序顺序规则：一个线程中的每个操作，happens-before 于该线程中的任意后续操作。（注解：如果只有一个线程的操作，那么前一个操作的结果肯定会对后续的操作可见。)</li><li>监视器锁规则：对一个监视器锁的<strong>解锁</strong>，happens-before 于随后对这个监视器锁的<strong>加锁</strong>。</li><li>volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。</li><li>传递性：如果 A happens-before B，且 B happens-before C，那么 A happens-before C。</li></ul><p><strong>注意</strong>，两个操作之间具有 happens-before 关系，并不意味着前一个操作必须要在后一个操作之前执行！happens-before 仅仅要求前一个操作（<strong>执行的结果</strong>）对后一个操作可见，且前一个操作按顺序排在第二个操作之前(the first is visible to and ordered before the second).</p><p><img src="http://ifeve.com/wp-content/uploads/2013/01/552.png" alt="happens-before与JMM的关系"><br>happens-before 与 JMM 的关系.</p><p>如上图所示，一个 happens-before 规则通常对应于多个编译器和处理器重排序规则。对于 java 程序员来说，happens-before 规则简单易懂，它避免 java 程序员为了理解 JMM 提供的内存可见性保证而去学习复杂的重排序规则以及这些规则的具体实现。</p><h2 id="感激-非常感激，万分的感激！"><a href="#感激-非常感激，万分的感激！" class="headerlink" title="感激,非常感激，万分的感激！"></a>感激,非常感激，万分的感激！</h2><p>感谢以下的文章以及其作者和翻译的开发者们,排名不分先后</p><ul><li><a href="http://www.infoq.com/cn/articles/java-memory-model-1">深入理解Java内存模型（一）——基础</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JMM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPC_Binder_java_1</title>
    <link href="/2017/01/03/IPC-Binder-java-1/"/>
    <url>/2017/01/03/IPC-Binder-java-1/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于 Binder 很复杂,这个分多篇展开,目前先将零碎的知识整合,在后面几篇进行总结.</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h1><p>Binder 用于进程间通信，而 Handler 消息机制用于同进程的线程间通信。<br>Binder 的英文涵义是别针，回形针的意思。<br>在 Android 中 Binder 的存在是为了完成进程间的通信，将进程”别” 在一起。比如说：普通应用可以调用播放器提供的服务：播放、暂停、停止等功能。<br>Binder 是工作在 Linux 层面，属于一个驱动，只是这个驱动是不需要硬件的，或者说是基于操作系统的一小块内存。从线程的角度来讲，Binder 驱动的代码是运行在内核态的，客户端程序调用 Binder 是通过系统调用完完成。</p><span id="more"></span><h2 id="Binder-框架：一种架构"><a href="#Binder-框架：一种架构" class="headerlink" title="Binder 框架：一种架构"></a>Binder 框架：一种架构</h2><p>Binder 框架提供 服务端接口、Binder 驱动、客户端接口 三个模块。<br><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/Binder%E6%A1%86%E6%9E%B6%E5%9B%BE.png?raw=true" alt="Binder架构"></p><ol><li><p>从服务端的角度来说，一个 Binder 服务端实际上就是一个 Binder 类的对象，该类一旦创建，内部就会启动一个隐藏线程。该线程接下来就用于接收 Binder 驱动发送来的消息，收到消息之后，会执行到 Binder 对象中的 onTransact 方法，在这个方法中，根据不同的参数，执行不同的服务代码。因此，要实现一个 Binder 服务，就必须重载 onTransact 方法。<br>在 onTransact 方法中，会获取传递进来的参数，将其转换成服务函数的参数。onTransact  参数的来源于 客户端的调用  transact 方法。所以，如果  transact 方法的参数有固定的格式输入，那么 onTransact 就会有相应的固定格式输出。</p></li><li><p>从 Binder 驱动的角度来说。任何一个服务端的 Binder 对象被创建的时候，都同时会在 Binder 驱动中创建一个 mRemote 对象，这个对象也是 Binder 类。客户端想要访问远程服务的时候，都是通过这个 mRemote 对象。</p></li><li><p>从客户端的角度来说。要想访问远程服务，必须先获取远程服务在 Binder 驱动中对应的 mRemote 引用，在获取该对象之后，就可以调用 transact 方法，而在 Binder 驱动中，mRemote  对象也重载了 transact 方法。</p></li></ol><ul><li>以线程间消息通信的模式，向服务端发送客户端传递过来的参数。</li><li>挂起当前的线程，当前线程正是客户端线程，并等待服务端线程执行完指定服务函数之后通知。</li><li>接收服务端线程的通知，然后继续执行客户端线程，并返回客户端代码区。</li></ul><p>从以上的叙述中，可以看出，对应用开发者来说，客户端似乎是在直接调用了远程服务对应的 Binder ，而事实上，则是通过 Binder 驱动中的 Binder 对象，不同的是， Binder 驱动中的对象不会额外产生一个线程。</p><ul><li>简言之:<br>客户端将消息发至 -&gt; Binder 驱动 ，向服务端发送调用信息，驱动挂起当前线程 ，等待返回-&gt; 服务端 ，处理完消息，返回给驱动-&gt; 驱动接到完成的通知，继续客户端的线程 - &gt;返回结果给客户端。<br>连接他们的是一个叫 mRemote 的引用，这个引用存在于 Binder 驱动当中，每个服务端的都需要向 Binder 驱动注册，生成这个 mRemote 引用。<br>客户端利用这个引用去发送消息给驱动，驱动利用这个引用去发送消息给服务端， 整个过程像客户端直接调用了服务端，事实上是通过 Binder 驱动中转了，存在两个 Binder 对象，一个是服务端的 Binder 对象， 一个是 驱动中的 Binder  对象，区别中，Binder 驱动中不会产生额外的线程，而服务端的 Binder 在创建之初就有一个隐含的线程。</li></ul><h2 id="设计-Server-端"><a href="#设计-Server-端" class="headerlink" title="设计 Server 端"></a>设计 Server 端</h2><p>设计 server 端只需要新建一个继承 Binder 的 service 即可，当启动这个 service 的时候，在 ddms 中的 thread 会发现多了一个 Binder thread 。<br>定义完  service ，接下来需要重载 onTrasact 方法，并从 data 变量中读取客户端传递进来的参数。 假如，这里有很多参数，那么怎么知道参数的顺序呢？所以，这个需要一个双方的约定。<br>方法的第一个参数 code 是用来标记不同的服务端函数的。<br>如果想要返回结果，则在 reply 中调用相关的函数写入即可。</p><h2 id="设计-Binder-客户端"><a href="#设计-Binder-客户端" class="headerlink" title="设计 Binder  客户端"></a>设计 Binder  客户端</h2><p>对于客户端要想使用服务端的服务函数，则必须先获取服务端在 Binder 驱动中对应的 mRemote 对象。在获取到该对象之后，就可以调用该变量的 transact 方法。<br>public final boolean transact(int code, Parcel data, Parcel reply,  int flags)<br>data 是传递给服务端的数据，远程服务函数的参数，都是从这个 data  中取的。<br>data  中能放的类型都是常用的原子类型，String，int ，long 等，当然也包括实现了 Parcelable接口的类。<br>这里向 data 写入的数据的顺序，必须和 onTransact  取参数的顺序保持一致，需要实现约定好。<br>当调用客户端调用远程方法，经由 mRemote 调用 transact 的时候，客户端线程进入 Binder 驱动， Binder 驱动就会挂起当前线程，并向远程服务发送一个消息，消息中包含了客户端传进来的包裹数据。<br>当服务端 service 执行 onTrasact  的时候，就可以对包裹 data 进行拆解，然后根据参数执行相应的 服务函数，执行完之后，会将执行的结果放入 reply 中。<br>当这一切都执行完之后，服务端会向 Binder 驱动发送一个 notify 的消息（客户端线程在调用 transact 的时候，客户端线程会被挂起），从使得客户端线程从 Binder 驱动代码区返回到客户端代码区。<br>对于最后一个参数 flags ，表示的是 IPC 调用的模式，分为：双向，用0 表示，含义是服务端执行完之后会返回一定的数据；还有一种是单向，用1 表示，含义是不返回任何数据。<br>同样的，返回到结果都是在 reply 中，客户端从这个 reply 中取的数据，这部分顺序也必须实现约定好。</p><h2 id="使用-service"><a href="#使用-service" class="headerlink" title="使用 service"></a>使用 service</h2><p>在编写 Binder 服务端和客户端的过程中，会伴随着两个问题。</p><ul><li>客户端如何获得服务端的 Binder 对象引用</li><li>客户端和服务端约定关于顺序的顺序和服务函数的 int 标志。</li></ul><p>使用 Binder 的原因是想提供一个全局的服务，所谓的全局，意思是系统中的任何程序都可以访问 。很明显，这个应该属于操作系统需要提供的基本功能之一，所以有个方法就是 service。</p><p>无论是否使用 service类，都需要解决上面的两个问题。</p><p>当然完全可以不使用 service 类，而是仅仅基于 Binder 类编写服务程序，然而这个只是一部分。具体来说，可以仅仅使用 Binder 类扩展系统服务，对于客户端服务则必须是基于 service 类来编写的。系统服务是指那些通过 getSystemService 方法获取的服务，而客户端服务是指应用程序提供的自定义服务。<br>也就是说，扩展系统服务的时候，可以完全只使用 Binder 类；而对于客户端的服务则必须基于 service。</p><h3 id="获取-Binder-对象"><a href="#获取-Binder-对象" class="headerlink" title="获取 Binder 对象"></a>获取 Binder 对象</h3><p>看下几个启动 service 相关的方法，这些方法在 android.app.ContextWrapper 类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ComponentName <span class="hljs-title">startService</span><span class="hljs-params">(Intent service)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> mBase.startService(service);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法很熟悉，就是一个 启动服务的方法，然后启动之后，客户端并不能拿到服务端的 Binder 引用，因此并不能调用服务端的任何服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">bindService</span><span class="hljs-params">(Intent service, ServiceConnection conn,   <span class="hljs-keyword">int</span> flags)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> mBase.bindService(service, conn, flags);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ServiceConnection</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onServiceConnected</span><span class="hljs-params">(ComponentName name, IBinder service)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onServiceDisconnected</span><span class="hljs-params">(ComponentName name)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>bindService 方法第一个参数是启动 service 的intent ，第二个参数是一个接口，接口中有个方法叫 onServiceConnected 这个方法含有两个参数，第二个参数就是 Binder 。<br>具体的运行过程中，当客户端请求启动 service 的时候，请求就会通过 Ams 发出，若 service 正常去懂了，那么 Ams 就会远程调用 ActivityThread 类中的 ApplicationThread 对象，调用的参数就包含了 service 的 Binder  对象的引用，然后在 ApplicationThread  中回调 bindService 的第二个参数 ServiceConnection  的方法 onServiceConnected ，将 Binder 引用传递回客户端，这样客户端就拿到了远程服务的 Binder  对象引用，在实际操作中，常常可以这个 Binder 对象引用设置成一个全局变量，可以在客户端的任何地方都可以访问到。</p><p><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/Binder%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B.png?raw=true" alt="Binder客户端和服务端的调用过程"></p><h2 id="保证参数顺序的工具-AIDL"><a href="#保证参数顺序的工具-AIDL" class="headerlink" title="保证参数顺序的工具-AIDL"></a>保证参数顺序的工具-AIDL</h2><p>在数据传递的过程中，需要实现约定好服务函数所对应的 code 的 int 值，需要约定好参数的写入顺序。在 Android 中的 AIDL 就是这么个工具。<br>AIDL 可以将一个 AIDL 文件转换成一个 Java  类文件，同时重载 transact 和 onTransact 方法。关于服务函数对应的 int 值和参数的读写书序，都统一做了处理。这样，开发者只需要专注于服务代码本身了。<br>可以看得出来，AIDL 并非是必须的，只是一个工具。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICompute</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">basicTypes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> anInt, <span class="hljs-keyword">long</span> aLong, <span class="hljs-keyword">boolean</span> aBoolean, <span class="hljs-keyword">float</span> aFloat,<span class="hljs-keyword">double</span> aDouble, String aString)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般情况下，第一个字母是 I，这样是为了程序风格的统一，后面的 Compute 是服务的类名，AIDL 工具会以这个服务的名字生成 Java 类。( 当然这个是默认的，相应的也是可以修改的，具体的另行参照说明。 )<br>aidl 文件中可以引用其他的 Java 类，但是需要遵循以下要求：</p><ul><li> Java 原子类型，int，long，String 等。</li><li> Binder 引用。</li><li> 实现了 parcelable 接口的对象。</li></ul><p>运行 AIDL 工具之后，生成的文件中，包含了 Java interface，proxy，stub类。</p><ul><li> Java interface 是以 aidl 文件命名的。比如 ICompute 。产生的 interface就是 ICompute 。并且该类继承了 IInterface 接口，即，需要实现 asBinder 方法。</li><li> 在 Stub 内部还有一个内部静态类 proxy ， 该类具体实现了 AIDL 生成的接口，按照约定的顺序写入参数，可以注意到这里的顺序和 Stub 中重载的 onTransact  中读取的顺序是一致的。proxy 类中持有了一个 IBinder mRemote 对象，这个对象就是远程服务端的引用，Proxy 该类作为客户端访问服务端的代理，该类的代理产生的原因：主要是为了解决约定写入参数的顺序。</li><li> 内部有一个静态内部抽象类 Stub，这个类主要是由服务端使用 ，之所以是抽象类，因为具体的服务函数必须由程序员自己去实现。该类继承 Binder 类，并且实现 AIDL 生成的接口，但是没有具体的实现这个接口。该类也重载了 onTransact 方法，这个方法是去按照约定的顺序取参数中的值，因为是 ADIL 自己生成的，所以顺序，它自己很清楚；并且定义了服务函数对应的 int 值。asBinder 方法返回的就是 Stub 自身。它内部还有个非常重要的方法  asInterface ，这个方法根据参数 IBinder 对象是否是自身进程中的对象，返回不同的对象。因为我们知道，服务端的服务函数，不仅仅是别的进程可以使用，与 服务端在一个进程内部也可以调用，这种场景下，显然是不需要 IPC 的，而是直接调用。反之，则返回一个 proxy，交由跨进程的客户端引用。在 Binder 内部提供了 queryLocalInterface 方法根据描述符判断当前的 Binder 对象时不是本地的 Binder 引用。因为每当新创建一个 Binder 对象的时候，服务端进程内部会创建一个 Binder 对象，同时在 Binder 驱动中也会创建一个 Binder 对象。如若是跨进程调用，远程访问的时候，返回的 Binder 就会是 Binder 驱动中的 Binder 对象，如若是进程内部获取 Binder 对象，则会是服务端本身的 Binder 对象。所以，asInterface  是对外提供了一个 统一的接口，保证无论进程内还是进程外都能访问，返回的对象就两种，一个是 Proxy 类对象，一个就直接使用 Stub 本身，强制类型转换成 接口类型。</li></ul><p><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/Binder_3.png?raw=true" alt="Binder架构"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇最后,放一张图进行总结.<br><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/Binder%E7%BB%91%E5%AE%9A%E7%9A%84%E6%B5%81%E7%A8%8B.png?raw=true" alt="Binder绑定的流程"></p><h1 id="感激-非常感激，万分的感激！"><a href="#感激-非常感激，万分的感激！" class="headerlink" title="感激,非常感激，万分的感激！"></a>感激,非常感激，万分的感激！</h1><p>感谢以下的文章以及其作者和翻译的开发者们,排名不分先后</p><ul><li><a href="https://book.douban.com/subject/6811238/">柯元旦</a></li><li><a href="http://gityuan.com/2015/12/26/handler-message-framework/">gityuan</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IPC</tag>
      
      <tag>Binder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android消息机制_Java层</title>
    <link href="/2016/12/17/MessgaeMechanism/"/>
    <url>/2016/12/17/MessgaeMechanism/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录 Android 的消息机制在 java 层的原理分析.</p><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在学习 Binder,IPC 的时候,涉及到消息机制,顺带整理一下.</p><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>进程:系统进行资源分配和调度的基本单位.<br>在 Andrid 中,对于每个 App 运行时前,系统都会为其创建一个进程，App 就运行在一个进程中.</p><p>线程: 作为程序执行的最小单元。<br>该线程与 App 所在进程之间资源共享，从 Linux 角度来说进程与线程除了是否共享资源外，并没有本质的区别，都是一个 task_struct 结构体，在 CPU 看来进程或线程无非就是一段可执行的代码.</p><p>Android 主线程: 一个进程中就一个主线程,这个主线程负责更新 UI.</p><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>目前对为什么需要消息机制,还没认真的研究,个人觉得系统的运转和程序的运行说到底都是消息的传递,如何让这些程序的消息传递高效地的运转,于是产生了消息机制一说.</p><h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>什么是消息机制?消息机制的三大要素:</p><ul><li>消息队列 </li><li>消息循环</li><li>消息类型</li></ul><h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>在 Android 中是如何使用消息机制的? Android 中典型的消息机制就是 Handler.<br>以下是我们平时使用 Handler 经常使用的方式.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Handler mHandler = <span class="hljs-keyword">new</span> Handler(<span class="hljs-keyword">new</span> Callback() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(Message msg)</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;截断消息&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;) &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(Message msg)</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;再处理消息&quot;</span>);<br>        &#125;<br>    &#125;;<br><br>mHandler.post(<span class="hljs-keyword">new</span> Runnable() &#123;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;second&quot;</span> + Thread.currentThread());<br>    textView.setText(<span class="hljs-string">&quot;upate&quot;</span>);<br>     &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>前面的概述中说到,对于系统而言,无论是线程还是进程,对其而言,都是一段可执行的代码而已,没有那么既然是可执行的代码,执行完,线程生命周期也就结束了.<br>在 Android 中,对于主线程，我们是绝不希望会被运行一段时间就结束了，我们希望它能一直的运行下去,直到用户主动的退出 APP 或者出现其他意外.<br>那如何才能实现这样的效果呢?不就是为了能一直运行吗?死循环便能保证不会被退出.</p><p>但这里可能又引发了另一个问题，既然是死循环又如何去处理其他事务呢？通过创建新线程的方式。<br>我们看下在 ActivityThread 中的 main 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>....<br>Looper.prepareMainLooper();<br><br>ActivityThread thread = <span class="hljs-keyword">new</span> ActivityThread();<br><br>thread.attach(<span class="hljs-keyword">false</span>);<br><br>Looper.loop();<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Main thread loop unexpectedly exited&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>ActivityThread 并不是线程，并没有真正继承 Thread 类，只是运行在主线程，其实承载 ActivityThread 的主线程就是由 Zygote fork 而创建的进程。</p><p>从这里的代码可以看到,主线程是一个死循环,主线程的死循环一直运行是不是特别消耗 CPU 资源呢？ 其实不然，这里就涉及到 Linux pipe/epoll 机制.下面分析 loop 函数的时候遇到再说.<br>下面分别看下消息机制的三个要素.</p><h2 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h2><p>对于 looper 的典型例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Looper.prepare();<br>mHandler = <span class="hljs-keyword">new</span> Handler() &#123;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(Message msg)</span> </span>&#123;<br>          <span class="hljs-comment">// handle message</span><br>     &#125;<br>&#125;;<br>Looper.loop();<br><br>上面就是一个典型的 Looper 的使用步骤<br>- 调用 prepare 方法<br>- 创建 Handler 对象<br>- 调用 loop 方法<br><br></code></pre></td></tr></table></figure><p>对于 prepare 方法，每个线程只能执行一次，当检测到当前的线程已经执行过这个方法，则会抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="hljs-keyword">new</span> ThreadLocal&lt;Looper&gt;();<br><span class="hljs-comment">// ..............</span><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepare</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> quitAllowed)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (sThreadLocal.get() != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Only one Looper may be created per thread&quot;</span>);<br>    &#125;<br>    sThreadLocal.set(<span class="hljs-keyword">new</span> Looper(quitAllowed));<br>&#125;<br></code></pre></td></tr></table></figure><p>对于 ThreadLocal 类，这个称为线程本地存储，以线程为单位，实现资源的共享。每个线程有自己的私有区域，线程间是不能互相访问的。有的地方也能看到用 ThreadLocal 实现线程内的单例。</p><p>其中对应的 set 和 get 方法，这样就能实现一个线程只有一个 looper ，检查的时候只要判断当前的线程本地存储是否有 looper 就能确定当前的线程是否执行过 prepare 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T value)</span> </span>&#123;<br>    Thread t = Thread.currentThread();<br>    ThreadLocalMap map = getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>)<br>        map.set(<span class="hljs-keyword">this</span>, value);<br>    <span class="hljs-keyword">else</span><br>        createMap(t, value);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>    Thread t = Thread.currentThread();<br>    ThreadLocalMap map = getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>) &#123;<br>        ThreadLocalMap.Entry e = map.getEntry(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> (T)e.value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> setInitialValue();<br>&#125;<br></code></pre></td></tr></table></figure><p>Looper 的构造方法中需要传递一个 boolean 值的参数，表示创建的这个 looper 是否可以被取消，直观上说就是是否可以调用 quit 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Looper</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> quitAllowed)</span> </span>&#123;<br>    mQueue = <span class="hljs-keyword">new</span> MessageQueue(quitAllowed);<br>    mThread = Thread.currentThread();<br>&#125;<br></code></pre></td></tr></table></figure><p>对于默认的 looper 构造传的是 true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** Initialize the current thread as a looper.</span><br><span class="hljs-comment">  * This gives you a chance to create handlers that then reference</span><br><span class="hljs-comment">  * this looper, before actually starting the loop. Be sure to call</span><br><span class="hljs-comment">  * &#123;<span class="hljs-doctag">@link</span> #loop()&#125; after calling this method, and end it by calling</span><br><span class="hljs-comment">  * &#123;<span class="hljs-doctag">@link</span> #quit()&#125;.</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepare</span><span class="hljs-params">()</span> </span>&#123;<br>    prepare(<span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>有个 looper 之后，就可以创建熟知的 handler 对象了。handler 在创建的时候，都是会检查当前的线程是否有 looper ，如果没有，则会抛出异常，不能正常的创建，毕竟这是一个消息机制必不可少的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Handler</span><span class="hljs-params">(Callback callback, <span class="hljs-keyword">boolean</span> async)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;<br>        <span class="hljs-keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();<br>        <span class="hljs-keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;<br>                (klass.getModifiers() &amp; Modifier.STATIC) == <span class="hljs-number">0</span>) &#123;<br>            Log.w(TAG, <span class="hljs-string">&quot;The following Handler class should be static or leaks might occur: &quot;</span> +<br>                klass.getCanonicalName());<br>        &#125;<br>    &#125;<br><br>    mLooper = Looper.myLooper();<br>    <span class="hljs-keyword">if</span> (mLooper == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<br>            <span class="hljs-string">&quot;Can&#x27;t create handler inside thread that has not called Looper.prepare()&quot;</span>);<br>    &#125;<br>    mQueue = mLooper.mQueue;<br>    mCallback = callback;<br>    mAsynchronous = async;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来就可以调用 loop 方法进入循环模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Looper me = myLooper();<br>    <span class="hljs-keyword">if</span> (me == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;No Looper; Looper.prepare() wasn&#x27;t called on this thread.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">final</span> MessageQueue queue = me.mQueue;<br><br>    <span class="hljs-comment">// Make sure the identity of this thread is that of the local process,</span><br>    <span class="hljs-comment">// and keep track of what that identity token actually is.</span><br>    Binder.clearCallingIdentity();<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> ident = Binder.clearCallingIdentity();<br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        Message msg = queue.next(); <span class="hljs-comment">// might block</span><br>        <span class="hljs-keyword">if</span> (msg == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// No message indicates that the message queue is quitting.</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// This must be in a local variable, in case a UI event sets the logger</span><br>        <span class="hljs-keyword">final</span> Printer logging = me.mLogging;<br>        <span class="hljs-keyword">if</span> (logging != <span class="hljs-keyword">null</span>) &#123;<br>            logging.println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt; Dispatching to &quot;</span> + msg.target + <span class="hljs-string">&quot; &quot;</span> +<br>                    msg.callback + <span class="hljs-string">&quot;: &quot;</span> + msg.what);<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> traceTag = me.mTraceTag;<br>        <span class="hljs-keyword">if</span> (traceTag != <span class="hljs-number">0</span>) &#123;<br>            Trace.traceBegin(traceTag, msg.target.getTraceName(msg));<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            msg.target.dispatchMessage(msg);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (traceTag != <span class="hljs-number">0</span>) &#123;<br>                Trace.traceEnd(traceTag);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (logging != <span class="hljs-keyword">null</span>) &#123;<br>            logging.println(<span class="hljs-string">&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot;</span> + msg.target + <span class="hljs-string">&quot; &quot;</span> + msg.callback);<br>        &#125;<br><br>        <span class="hljs-comment">// Make sure that during the course of dispatching the</span><br>        <span class="hljs-comment">// identity of the thread wasn&#x27;t corrupted.</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> newIdent = Binder.clearCallingIdentity();<br>        <span class="hljs-keyword">if</span> (ident != newIdent) &#123;<br>            Log.wtf(TAG, <span class="hljs-string">&quot;Thread identity changed from 0x&quot;</span><br>                    + Long.toHexString(ident) + <span class="hljs-string">&quot; to 0x&quot;</span><br>                    + Long.toHexString(newIdent) + <span class="hljs-string">&quot; while dispatching to &quot;</span><br>                    + msg.target.getClass().getName() + <span class="hljs-string">&quot; &quot;</span><br>                    + msg.callback + <span class="hljs-string">&quot; what=&quot;</span> + msg.what);<br>        &#125;<br><br>        msg.recycleUnchecked();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直观上我们就可以看到这是一个死循环，不断的通过 queue.next() 取出消息，而后通过 msg.target.dispatchMessage(msg); 去分发，处理消息。最后会通过 msg.recycleUnchecked(); 回收消息以备循环使用。<br>上面的消息处理是一个死循环，我们知道在主线程也有个 looper 这样不停的死循环执行，怎么就不会卡死呢？CPU 怎么不会爆表呢。<br>注意 Message msg = queue.next(); // might block 这里的注释，说可能产生 block （阻塞）。这个涉及到 MessageQueue，native 层 和 epoll 机制，当队列中没有消息的时候，这个时候，就会被阻塞挂起，直到下个消息到达,或者被唤醒,这个下面分析队列的时候再看,这时候 CPU 就会被释放，去做其他任务，这样就不会浪费 CPU 资源。</p><h2 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue:"></a>MessageQueue:</h2><p>对于期初构造 looper 的时候传递了一个参数，表示了是否可以退出，在构造 looper 的时候 ，这个参数，也会传递到 MessageQueue  的构造方法中。<br>looper 中的 quit 方法最终调用的是 MessageQueue 中的 quit 方法，在 quit 方法中，假如当初传递的参数是 false，则会抛出异常，即表示不能退出的含义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">MessageQueue(<span class="hljs-keyword">boolean</span> quitAllowed) &#123;<br>    mQuitAllowed = quitAllowed;<br>    mPtr = nativeInit();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quit</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> safe)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!mQuitAllowed) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;Main thread not allowed to quit.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>        <span class="hljs-keyword">if</span> (mQuitting) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        mQuitting = <span class="hljs-keyword">true</span>;<br><br>        <span class="hljs-keyword">if</span> (safe) &#123;<br>            removeAllFutureMessagesLocked();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            removeAllMessagesLocked();<br>        &#125;<br><br>        <span class="hljs-comment">// We can assume mPtr != 0 because mQuitting was previously false.</span><br>        nativeWake(mPtr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在quit 方法中也区分了 safe 和 unsafe。安全的方式只移除那些还未开始的消息，非安全的方式是移除所有的消息。</p><p>再细看 MessageQueue 的构造方法中有个 nativeInit();说明这里有涉及 native 方法。这里注下,在整个消息机制中 只有 MessageQueue 是涉及 Java 层和 Native 层的。<br>当 MessageQueue 没有消息的时候,便阻塞在 nativePollOnce() 方法里，此时主线程会释放 CPU 资源进入休眠状态，直到下个消息到达或者有事务发生，通过往 pipe 管道写端写入数据来唤醒主线程工作,看 native 代码的话,是一个 “w” 字符.上面说过,这叫做 epoll 机制，是一种 IO 多路复用机制，可以同时监控多个描述符，当某个描述符就绪(读或写就绪)，则立刻通知相应程序进行读或写操作，本质同步 I/O，即读写是阻塞的。所以,当消息队列中没有消息的时候,主线程就会释放 CPU ,不会继续占用 CPU ,这里就解释了为什么主线程是个死循环,还能继续处理其他事情.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">Message <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Return here if the message loop has already quit and been disposed.</span><br>    <span class="hljs-comment">// This can happen if the application tries to restart a looper after quit</span><br>    <span class="hljs-comment">// which is not supported.</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> ptr = mPtr;<br>    <span class="hljs-keyword">if</span> (ptr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> pendingIdleHandlerCount = -<span class="hljs-number">1</span>; <span class="hljs-comment">// -1 only during first iteration</span><br>    <span class="hljs-keyword">int</span> nextPollTimeoutMillis = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">if</span> (nextPollTimeoutMillis != <span class="hljs-number">0</span>) &#123;<br>            Binder.flushPendingCommands();<br>        &#125;<br><br>        nativePollOnce(ptr, nextPollTimeoutMillis);<br><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>            <span class="hljs-comment">// Try to retrieve the next message.  Return if found.</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> now = SystemClock.uptimeMillis();<br>            Message prevMsg = <span class="hljs-keyword">null</span>;<br>            Message msg = mMessages;<br>            <span class="hljs-keyword">if</span> (msg != <span class="hljs-keyword">null</span> &amp;&amp; msg.target == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span><br>                <span class="hljs-keyword">do</span> &#123;<br>                    prevMsg = msg;<br>                    msg = msg.next;<br>                &#125; <span class="hljs-keyword">while</span> (msg != <span class="hljs-keyword">null</span> &amp;&amp; !msg.isAsynchronous());<br>            &#125;<br>            <span class="hljs-keyword">if</span> (msg != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (now &lt; msg.when) &#123;<br>                    <span class="hljs-comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span><br>                    nextPollTimeoutMillis = (<span class="hljs-keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Got a message.</span><br>                    mBlocked = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">if</span> (prevMsg != <span class="hljs-keyword">null</span>) &#123;<br>                        prevMsg.next = msg.next;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        mMessages = msg.next;<br>                    &#125;<br>                    msg.next = <span class="hljs-keyword">null</span>;<br>                    <span class="hljs-keyword">if</span> (DEBUG) Log.v(TAG, <span class="hljs-string">&quot;Returning message: &quot;</span> + msg);<br>                    msg.markInUse();<br>                    <span class="hljs-keyword">return</span> msg;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// No more messages.</span><br>                nextPollTimeoutMillis = -<span class="hljs-number">1</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Process the quit message now that all pending messages have been handled.</span><br>            <span class="hljs-keyword">if</span> (mQuitting) &#123;<br>                dispose();<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// If first time idle, then get the number of idlers to run.</span><br>            <span class="hljs-comment">// Idle handles only run if the queue is empty or if the first message</span><br>            <span class="hljs-comment">// in the queue (possibly a barrier) is due to be handled in the future.</span><br>            <span class="hljs-keyword">if</span> (pendingIdleHandlerCount &lt; <span class="hljs-number">0</span><br>                    &amp;&amp; (mMessages == <span class="hljs-keyword">null</span> || now &lt; mMessages.when)) &#123;<br>                pendingIdleHandlerCount = mIdleHandlers.size();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// No idle handlers to run.  Loop and wait some more.</span><br>                mBlocked = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (mPendingIdleHandlers == <span class="hljs-keyword">null</span>) &#123;<br>                mPendingIdleHandlers = <span class="hljs-keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="hljs-number">4</span>)];<br>            &#125;<br>            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);<br>        &#125;<br><br>        <span class="hljs-comment">// Run the idle handlers.</span><br>        <span class="hljs-comment">// We only ever reach this code block during the first iteration.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;<br>            <span class="hljs-keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];<br>            mPendingIdleHandlers[i] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// release the reference to the handler</span><br><br>            <span class="hljs-keyword">boolean</span> keep = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                keep = idler.queueIdle();<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                Log.wtf(TAG, <span class="hljs-string">&quot;IdleHandler threw exception&quot;</span>, t);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!keep) &#123;<br>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>                    mIdleHandlers.remove(idler);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Reset the idle handler count to 0 so we do not run them again.</span><br>        pendingIdleHandlerCount = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// While calling an idle handler, a new message could have been delivered</span><br>        <span class="hljs-comment">// so go back and look again for a pending message without waiting.</span><br>        nextPollTimeoutMillis = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里稍微记录下这个方法，怎么看这个方法可能都是消息机制在 Java 层相对难以理解的一个。</p><ol><li>MessageQueue 通过 next 方法从消息队列中取出 消息执行，nativePollOnce 可以看出这里又牵扯到 native 方法 ，nativePollOnce  是一个阻塞操作，为什么会这样呢？因为在 native 层也有消息机制，从这里能看出 Android 系统中，native 层的消息优先级比 Java 层的高。注意: native 层的消息机制和 Java 层的<strong>没有任何关系</strong>。顺带说下参数 mPtr 是在构造参数里调用 native 方法初始化的，这个参数是 NativeMessageQueue 的指针。nextPollTimeoutMillis 代表了超时的时间，这个是用来描述当消息队列中没有新的消息需要处理的时候，当前线程需要进入睡眠等待状态的时间。</li></ol><ul><li>这个可以取值 -1 ，代表了队列中没有消息需要处理，需要一直休眠阻塞下去，直到被其他线程唤醒为止。</li><li>取值为0，表示当前的线程不需要进入等待状态，即使当前的消息队列中没有新的消息需要处理。</li><li>取值为大于0，表示当消息队列中没有新的消息的时候，等待大于0的时间就返回。</li></ul><ol start="2"><li>mMessages 表示当前处理的消息， 通过循环取出有 Handler 并且是异步的消息然后返回。如果没有找到就将  nextPollTimeoutMillis 置为 -1 表示队列中没有消息，需要一直休眠了。</li><li>mIdleHandlers 表示的是空闲处理器，当消息队列中没有需要处理的消息的时候，做的一些工作，例如垃圾回收等，完成这部分操作之后就会重置 pendingIdleHandlerCount 的值为0，保证整个循环中只执行一次，这个值为 0 还对 nextPollTimeoutMillis 有影响，在上半部分有个 nextPollTimeoutMillis  的判断。同时 nextPollTimeoutMillis 也被置为 0 ，表示不需要进入等待状态，立即检查消息队列。</li></ol><p>在这里，nextPollTimeoutMillis 置为 0 可能会造成一定的干扰，理解立即检查不难，似乎每次都会被置为 0 ，那么 -1 是不是就没有意义了呢？注意另外一个值  pendingIdleHandlerCount 也被置为了0 ，注意取消息的时候关于这个 pendingIdleHandlerCount 的检查，当为 0 的时候，是直接 continue 了。</p><p>看下往队列中添加消息的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">enqueueMessage</span><span class="hljs-params">(Message msg, <span class="hljs-keyword">long</span> when)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (msg.target == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Message must have a target.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (msg.isInUse()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(msg + <span class="hljs-string">&quot; This message is already in use.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>        <span class="hljs-keyword">if</span> (mQuitting) &#123;<br>            IllegalStateException e = <span class="hljs-keyword">new</span> IllegalStateException(<br>                    msg.target + <span class="hljs-string">&quot; sending message to a Handler on a dead thread&quot;</span>);<br>            Log.w(TAG, e.getMessage(), e);<br>            msg.recycle();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        msg.markInUse();<br>        msg.when = when;<br>        Message p = mMessages;<br>        <span class="hljs-keyword">boolean</span> needWake;<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-keyword">null</span> || when == <span class="hljs-number">0</span> || when &lt; p.when) &#123;<br>            <span class="hljs-comment">// New head, wake up the event queue if blocked.</span><br>            msg.next = p;<br>            mMessages = msg;<br>            needWake = mBlocked;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Inserted within the middle of the queue.  Usually we don&#x27;t have to wake</span><br>            <span class="hljs-comment">// up the event queue unless there is a barrier at the head of the queue</span><br>            <span class="hljs-comment">// and the message is the earliest asynchronous message in the queue.</span><br>            needWake = mBlocked &amp;&amp; p.target == <span class="hljs-keyword">null</span> &amp;&amp; msg.isAsynchronous();<br>            Message prev;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                prev = p;<br>                p = p.next;<br>                <span class="hljs-keyword">if</span> (p == <span class="hljs-keyword">null</span> || when &lt; p.when) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;<br>                    needWake = <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125;<br>            msg.next = p; <span class="hljs-comment">// invariant: p == prev.next</span><br>            prev.next = msg;<br>        &#125;<br><br>        <span class="hljs-comment">// We can assume mPtr != 0 because mQuitting is false.</span><br>        <span class="hljs-keyword">if</span> (needWake) &#123;<br>            nativeWake(mPtr);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法的目的是找到当前加入的这个消息在消息队列中合适的位置，是立即执行，亦或者插入到消息队列中。<br>其中会根据当前的消息循环 next 是否被阻塞，决定是否执行唤醒操作。</p><h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler:"></a>Handler:</h2><p>看下 Handler 的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Handler</span><span class="hljs-params">(Callback callback, <span class="hljs-keyword">boolean</span> async)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;<br>        <span class="hljs-keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();<br>        <span class="hljs-keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;<br>                (klass.getModifiers() &amp; Modifier.STATIC) == <span class="hljs-number">0</span>) &#123;<br>            Log.w(TAG, <span class="hljs-string">&quot;The following Handler class should be static or leaks might occur: &quot;</span> +<br>                klass.getCanonicalName());<br>        &#125;<br>    &#125;<br><br>    mLooper = Looper.myLooper();<br>    <span class="hljs-keyword">if</span> (mLooper == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<br>            <span class="hljs-string">&quot;Can&#x27;t create handler inside thread that has not called Looper.prepare()&quot;</span>);<br>    &#125;<br>    mQueue = mLooper.mQueue;<br>    mCallback = callback;<br>    mAsynchronous = async;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Handler</span><span class="hljs-params">(Looper looper, Callback callback, <span class="hljs-keyword">boolean</span> async)</span> </span>&#123;<br>    mLooper = looper;<br>    mQueue = looper.mQueue;<br>    mCallback = callback;<br>    mAsynchronous = async;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是这两种构造函数，第一种可以可以指定回调函数和消息的处理方式(是否是异步处理)。第二种可以指定 Looper ，回调函数 和消息的处理方式。</p><p>上面说到 Looper 的 loop 方法在循环取出消息和处理的时候提到一个  msg.target.dispatchMessage(msg); 分发处理。平时的使用经验让我们知道这个 target 其实是个 Handler 。<br>所以接下来看下这个 dispatchMessage 分发消息的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dispatchMessage</span><span class="hljs-params">(Message msg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (msg.callback != <span class="hljs-keyword">null</span>) &#123;<br>        handleCallback(msg);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (mCallback != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (mCallback.handleMessage(msg)) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        handleMessage(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从代码中可以，假如 Message 有回调的情况下， 优先执行的是 Message 的回调方法。其次，如果没有回调的情况下，检查 Handler 构造的时候是否有设置回调，如果有优先调用这个回调。再次，才会去调用子类覆写的 handleMessage 方法。我们平时使用的时候，常常就是使用的这个再次的方式。</p><p>上面有说过消息队列是负责消息的排队的，接下来看下到底是怎么产生消息，怎么进入队列的。<br>首先看下几个常用的产生消息的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Message <span class="hljs-title">obtainMessage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> Message.obtain(<span class="hljs-keyword">this</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(Message msg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> sendMessageDelayed(msg, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">sendEmptyMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> what)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> sendEmptyMessageDelayed(what, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">post</span><span class="hljs-params">(Runnable r)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>平时常用的就这四种种方式产生消息并且发送消息，对于 Message 的 sendToTarget 方法，本质上还是调用的 sendMessage 这个后面再说，这个几个方法最后都会走 sendMessageAtTime 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">sendMessageAtTime</span><span class="hljs-params">(Message msg, <span class="hljs-keyword">long</span> uptimeMillis)</span> </span>&#123;<br>    MessageQueue queue = mQueue;<br>    <span class="hljs-keyword">if</span> (queue == <span class="hljs-keyword">null</span>) &#123;<br>        RuntimeException e = <span class="hljs-keyword">new</span> RuntimeException(<br>                <span class="hljs-keyword">this</span> + <span class="hljs-string">&quot; sendMessageAtTime() called with no mQueue&quot;</span>);<br>        Log.w(<span class="hljs-string">&quot;Looper&quot;</span>, e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">enqueueMessage</span><span class="hljs-params">(MessageQueue queue, Message msg, <span class="hljs-keyword">long</span> uptimeMillis)</span> </span>&#123;<br>    msg.target = <span class="hljs-keyword">this</span>;<br>    <span class="hljs-keyword">if</span> (mAsynchronous) &#123;<br>        msg.setAsynchronous(<span class="hljs-keyword">true</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);<br>&#125;<br></code></pre></td></tr></table></figure><p>在  sendMessageAtTime 方法中进行了一些检查，检查是否已经有  MessageQueue ，如果没有则抛出异常， 毕竟 MessageQueue 也是消息机制不可或缺的元素。<br>检查通过之后就会进入  enqueueMessage  方法， 这个方法中会调用 MessageQueue  的 enqueueMessage  方法将消息添加入队列中(这个方法后面详细再说)，同时会根据构造 Handler 的时候设置的消息处理方式来为 message 设置相应的属性。</p><p>从分析中可以看出，Handler 本身没有太多实质性的操作，都是借助于 Meesage ，MessageQueue ，Looper 这个几个类。说明 Handler 只是一个很强的辅助类而已，方便开发者 产生消息-&gt;发送消息-&gt;处理消息。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h2><h3 id="IdleHandler"><a href="#IdleHandler" class="headerlink" title="IdleHandler:"></a>IdleHandler:</h3><p>空闲时处理器，这个只有在 looper 执行消息循环的第一次会执行。</p><h3 id="Message："><a href="#Message：" class="headerlink" title="Message："></a>Message：</h3><p>作为消息的封装类，是消息的载体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Message</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> what;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> arg1;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> arg2;<br><span class="hljs-keyword">public</span> Object obj;<br><span class="hljs-keyword">public</span> Messenger replyTo;<br><span class="hljs-keyword">long</span> when;<br>Handler target;<br>Runnable callback;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Message sPool;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_POOL_SIZE = <span class="hljs-number">50</span>;<br></code></pre></td></tr></table></figure><p>以上是 Message 的构造方法和比较重要的属性。<br>静态变量 sPool 的数据类型为 Message，通过 next 成员变量，维护一个消息池；静态变量 MAX_POOL_SIZE 代表消息池的可用大小；消息池的默认大小为50。</p><p>看下几个比较重要的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Message <span class="hljs-title">obtain</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (sPoolSync) &#123;<br>        <span class="hljs-keyword">if</span> (sPool != <span class="hljs-keyword">null</span>) &#123;<br>            Message m = sPool;<br>            sPool = m.next;<br>            m.next = <span class="hljs-keyword">null</span>;<br>            m.flags = <span class="hljs-number">0</span>; <span class="hljs-comment">// clear in-use flag</span><br>            sPoolSize--;<br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Message();<br>&#125;<br></code></pre></td></tr></table></figure><p>还有其他几个带参 的 obtain 方法，但是都需要调用这个无参的，可以看到 从静态变量 sPool  中取出一个 Message 即返回，若是 sPool 为空，则新建一个 Message 返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">recycle</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isInUse()) &#123;<br>        <span class="hljs-keyword">if</span> (gCheckRecycle) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;This message cannot be recycled because it &quot;</span><br>                    + <span class="hljs-string">&quot;is still in use.&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    recycleUnchecked();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recycleUnchecked</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Mark the message as in use while it remains in the recycled object pool.</span><br>    <span class="hljs-comment">// Clear out all other details.</span><br>    flags = FLAG_IN_USE;<br>    what = <span class="hljs-number">0</span>;<br>    arg1 = <span class="hljs-number">0</span>;<br>    arg2 = <span class="hljs-number">0</span>;<br>    obj = <span class="hljs-keyword">null</span>;<br>    replyTo = <span class="hljs-keyword">null</span>;<br>    sendingUid = -<span class="hljs-number">1</span>;<br>    when = <span class="hljs-number">0</span>;<br>    target = <span class="hljs-keyword">null</span>;<br>    callback = <span class="hljs-keyword">null</span>;<br>    data = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">synchronized</span> (sPoolSync) &#123;<br>        <span class="hljs-keyword">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123;<br>            next = sPool;<br>            sPool = <span class="hljs-keyword">this</span>;<br>            sPoolSize++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当调用回收方法的时候，就会将当前的消息插入到静态变量 sPool 的头部，实现循环利用。</p><h2 id="期待"><a href="#期待" class="headerlink" title="期待"></a>期待</h2><p>下次总结 Binder 在 Java 层的知识.</p><h1 id="感激-非常感激，万分的感激！"><a href="#感激-非常感激，万分的感激！" class="headerlink" title="感激,非常感激，万分的感激！"></a>感激,非常感激，万分的感激！</h1><p>感谢以下的文章以及其作者和翻译的开发者们,排名不分先后</p><ul><li><a href="https://book.douban.com/subject/6811238/">柯元旦</a></li><li><a href="http://gityuan.com/2015/12/26/handler-message-framework/">gityuan</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Message</tag>
      
      <tag>Handler</tag>
      
      <tag>消息机制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Annotation 使用备忘</title>
    <link href="/2016/11/16/annotation/"/>
    <url>/2016/11/16/annotation/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录注解 Annotation 的概念和使用. </p><span id="more"></span><h1 id="Annotation-注解"><a href="#Annotation-注解" class="headerlink" title="Annotation 注解"></a>Annotation 注解</h1><h2 id="Why-需要注解"><a href="#Why-需要注解" class="headerlink" title="Why 需要注解"></a>Why 需要注解</h2><p>在代码中常有些重复的代码，这些代码纯手工太耗时。可以通过一定的标记，然后处理即可。</p><h2 id="What-是注解-Annotation-分类"><a href="#What-是注解-Annotation-分类" class="headerlink" title="What 是注解? Annotation 分类"></a>What 是注解? Annotation 分类</h2><ol><li>标准 Annotation<br>包括 Override, Deprecated, SuppressWarnings，是 java 自带的几个注解，他们由编译器来识别，不会进行编译，不影响代码运行。</li><li>元 Annotation<br>@Retention, @Target, @Inherited, @Documented，它们是用来定义 Annotation 的 Annotation。也就是当我们要自定义注解时，需要使用它们。</li><li>自定义 Annotation<br>自定义的 Annotation。</li></ol><h3 id="自定义的注解也分为三类，通过元Annotation-Retention-定义："><a href="#自定义的注解也分为三类，通过元Annotation-Retention-定义：" class="headerlink" title="自定义的注解也分为三类，通过元Annotation - @Retention 定义："></a>自定义的注解也分为三类，通过元Annotation - @Retention 定义：</h3><blockquote><ul><li>@Retention(RetentionPolicy.SOURCE)</li></ul></blockquote><pre><code class="hljs">源码时注解，一般用来作为编译器标记。如 Override, Deprecated, SuppressWarnings。</code></pre><blockquote><ul><li>@Retention(RetentionPolicy.RUNTIME)</li></ul></blockquote><pre><code class="hljs">运行时注解，在运行时通过反射去识别的注解，这种注解最大的缺点就是反射消耗性能。</code></pre><blockquote><ul><li>@Retention(RetentionPolicy.CLASS)</li></ul></blockquote><pre><code class="hljs">编译时注解，在编译时被识别并处理的注解，相当于自动生成代码，没有反射，和正常的手写代码无二。</code></pre><h2 id="Annotation-的工作原理"><a href="#Annotation-的工作原理" class="headerlink" title="Annotation 的工作原理"></a>Annotation 的工作原理</h2><p>APT(Annotation Processing Tool)<br>根据不同类型的注解，采取不同的处理方式，对于 SOURCE 类型的注解，它只会存在代码中，当进行编译成 class 的时候，就会被抛弃了。<br>RUNTIME 类型的则一直存到 class 文件中，一直存在虚拟机的运行期。CLASS 类型的注解只存到编译期，会根据 处理器的要求进行处理，生成代码或者其他处理方式，处理完只会，就不会存在了，而如果生成了文件，则会一直存在，被打包。</p><h3 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h3><ul><li>Element:<br>表示一个程序元素，比如包、类或者方法。每个元素都表示一个静态的语言级构造（不表示虚拟机的运行时构造）。 元素应该使用 equals(Object)方法进行比较。不保证总是使用相同的对象表示某个特定的元素。要实现基于 Element 对象类的操作，可以使用 visitor 或者使用 getKind() 方法的结果。使用 instanceof 确定此建模层次结构中某一对象的有效类未必可靠，因为一个实现可以选择让单个对象实现多个 Element 子接口。</li></ul><p>在 JDK 1.6 新增的 javax.lang.model 包中定义了16类 Element，包括了 Java 代码中最常用的元素，如：“包（PACKAGE）、枚举（ENUM）、类（CLASS）、注解（ANNOTATION_TYPE）、接口（INTERFACE）、枚举值（ENUM_CONSTANT）、字段（FIELD）、参数（PARAMETER）、本地变量（LOCAL_VARIABLE）、异常（EXCEPTION_PARAMETER）、方法（METHOD）、构造函数（CONSTRUCTOR）、静态语句块（STATIC_INIT，即static{}块）、实例语句块（INSTANCE_INIT，即{}块）、参数化类型（TYPE_PARAMETER，既泛型尖括号内的类型）和未定义的其他语法树节点（OTHER）”。</p><ul><li>TypeElement ：<br>TypeElement 表示一个类或接口程序元素。提供对有关类型及其成员的信息的访问。注意，枚举类型是一种类，而注释类型是一种接口.<br>TypeElement 代表了一个 class 或者 interface 的 element 。 DeclaredType 表示一个类或接口类型，后者(DeclaredType)将成为前者(TypeElement)的一种使用（或调用）。这种区别对于一般的类型是最明显的，对于这些类型，单个元素可以定义一系列完整的类型。 例如，元素 java.util.Set 对应于参数化类型 java.util.Set<String> 和 java.util.Set<Number>（以及其他许多类型），还对应于原始类型 java.util.Set。</li></ul><h4 id="TypeElement-DeclaredType"><a href="#TypeElement-DeclaredType" class="headerlink" title="TypeElement,DeclaredType"></a>TypeElement,DeclaredType</h4><ul><li><p>为什么需要 <a href="http://docs.oracle.com/javase/7/docs/api/javax/lang/model/element/TypeElement.html">TypeElement</a> 呢？<br>TypeElement 表示一个类或接口程序元素,重点它是一个 element ，是类或者接口的 element。<br>我们知道 element 有多达16种类型，这些 element 形式各异。各有各的特点，TypeElement 表示的是类或者接口，对于类或者接口，他有很多独有的信息，比如全路径名，超类等等，而对于 method 就没有这个，方法也有个特有的 element ExecutableElement，出现的原因就同理可得了。</p></li><li><p>为什么需要 <a href="http://docs.oracle.com/javase/7/docs/api/javax/lang/model/type/DeclaredType.html">DeclaredType</a> 呢？<br>DeclaredType 表示一个类或接口类型，重点它是一个具体的类型。<br>DeclaredType 有个方法，asElement()方法，这个方法返回的是一个 element，通过这个方法我们就可以获取一些作为 element 才能获取的信息。比如 MirroredTypeException  异常会携带回 TypeMirror，可以强制转换成 DeclaredType，就可以获取一些信息。</p></li></ul><p>根据目前已有的数据和自身的理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">TypeMirror typeMirror = element.asType();<br><br>DeclaredType declaredType = (DeclaredType) typeMirror;<br><br>messager.printMessage(Diagnostic.Kind.NOTE, <span class="hljs-string">&quot;Annotation class : typeMirror instanceof DeclaredType = &quot;</span> + (typeMirror <span class="hljs-keyword">instanceof</span> DeclaredType));<br><span class="hljs-comment">// 这里的输出为 true</span><br><br></code></pre></td></tr></table></figure><p>这也就解释了为什么 oracle 文档上说的前者调用后者的意思。</p><h2 id="How-使用，自定义注解"><a href="#How-使用，自定义注解" class="headerlink" title="How 使用，自定义注解"></a>How 使用，自定义注解</h2><p>前提：自定义注解一定要是 Java library，不能用 Android library。<br>IDE： AS 新建一个 Android Project<br>插件：此外我们还需要另外一个库，这个库是为了在 Android 上只用注解而使用的: android-apt。 这个插件可以自动的帮你为生成的代码创建目录, 让生成的代码编译到APK 里面去, 而且它还可以让最终编译出来的APK里面不包含注解处理器本身的代码。</p><ul><li>允许配置只在编译时作为注解处理器的依赖，而不添加到最后的 APK 或 library</li><li>设置源路径，使注解处理器生成的代码能被 Android Studio 正确的引用</li></ul><h3 id="编译时注解"><a href="#编译时注解" class="headerlink" title="编译时注解"></a>编译时注解</h3><p>对于编译时注解，在编译项目之前执行的代码，可以生成代码或者生成其他文件，生成的文件将会被打包进项目，但是之前的注解将会被删除，不会进入 class 文件。</p><h4 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h4><ol><li><p> 新建一个 Java module，设置该 module 的 gradle 文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;java&#x27;</span><br>dependencies &#123;<br>    compile fileTree(<span class="hljs-attr">dir:</span> <span class="hljs-string">&#x27;libs&#x27;</span>, <span class="hljs-attr">include:</span> [<span class="hljs-string">&#x27;*.jar&#x27;</span>])<br>&#125;<br>sourceCompatibility = <span class="hljs-string">&quot;1.7&quot;</span><br>targetCompatibility = <span class="hljs-string">&quot;1.7&quot;</span><br></code></pre></td></tr></table></figure><p>同时设置 project 的 gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy">buildscript &#123;<br>    repositories &#123;<br>        jcenter()<br>    &#125;<br>    dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;com.android.tools.build:gradle:2.2.2&#x27;</span><br>        classpath <span class="hljs-string">&#x27;com.neenbedankt.gradle.plugins:android-apt:1.8&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p> 新建一个注解 NameGenerate</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.CLASS)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> NameGenerate &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>接下来就是重点了，需要编写注解的处理器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameGenerateProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProcessor</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CLASSNAME = <span class="hljs-string">&quot;NameGeneateList&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PACKAGENAME = <span class="hljs-string">&quot;com.lvmama.router&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">process</span><span class="hljs-params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env)</span> </span>&#123;<br>        Messager messager = processingEnv.getMessager();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 以新建文件的文件名为参数新建一个 JavaFileObject 对象</span><br>            JavaFileObject f = processingEnv.getFiler().createSourceFile(CLASSNAME);<br>            Writer w = f.openWriter();<br>            PrintWriter pw = <span class="hljs-keyword">new</span> PrintWriter(w);<br><span class="hljs-comment">// 将新建文件的内容就以拼接的方式输入即可。</span><br>            pw.println(<span class="hljs-string">&quot;package &quot;</span> + PACKAGENAME + <span class="hljs-string">&quot;;&quot;</span>);<br>            pw.println(<span class="hljs-string">&quot;\npublic class &quot;</span> + CLASSNAME + <span class="hljs-string">&quot; &#123; &quot;</span>);<br><br>            <span class="hljs-keyword">for</span> (Element element : env.getElementsAnnotatedWith(NameGenerate.class)) &#123;<br>                PackageElement packageElement = (PackageElement) element.getEnclosingElement();<br>                String packageName = packageElement.getQualifiedName().toString();<br>                TypeElement classElement = (TypeElement) element;<br>                String className = classElement.getSimpleName().toString();<br>                String fullClassName = classElement.getQualifiedName().toString();<br>                pw.print(<span class="hljs-string">&quot;public String &quot;</span> + className + <span class="hljs-string">&quot;=\&quot;&quot;</span> + fullClassName + <span class="hljs-string">&quot;\&quot;;&quot;</span>);<br>            &#125;<br><br>            pw.println(<span class="hljs-string">&quot;&#125;&quot;</span>);<br>            pw.flush();<br>            pw.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException x) &#123;<br>            processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, x.toString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title">getSupportedAnnotationTypes</span><span class="hljs-params">()</span> </span>&#123;<br>        Set&lt;String&gt; types = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;();<br>        types.add(NameGenerate.class.getCanonicalName());<br>        <span class="hljs-keyword">return</span> types;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/tinggengyan/tinggengyan.github.io/source/imgur/annotation_tradition_step1.png" alt="传统的结构第一步"><br><img src="https://raw.githubusercontent.com/tinggengyan/tinggengyan.github.io/source/imgur/annotation_tradition_step2.png" alt="传统的结构第二步"></p><h3 id="关键方法-process-解释"><a href="#关键方法-process-解释" class="headerlink" title="关键方法 process 解释"></a>关键方法 process 解释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">process</span><span class="hljs-params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;<br><br>    <span class="hljs-comment">// annotations 当前注解器需要处理的注解的集合</span><br>    <span class="hljs-comment">// roundEnv 可以用来访问当前的 Round 中的语法树的节点，每个语法树中的节点都表示为一个 element。</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>“processingEnv”<br>它是 AbstractProcessor 中的一个 protected 变量，在注解处理器初始化的时候（init（）方法执行的时候）创建，继承了 AbstractProcessor 的注解处理器代码可以直接访问到它。它代表了注解处理器框架提供的一个上下文环境，要创建新的代码、向编译器输出信息、获取其他工具类等都需要用到这个实例变量。</p></li><li><p>@SupportedAnnotationTypes 和 @SupportedSourceVersion</p></li></ul><p>前者代表了这个注解处理器对哪些注解感兴趣，可以使用星号“*”作为通配符代表对所有的注解都感兴趣，后者指出这个注解处理器可以处理哪些版本的 Java 代码。</p><ul><li>方法返回值的含义<br>每一个注解处理器在运行的时候都是单例的，如果不需要改变或生成语法树的内容，process（）方法就可以返回一个值为 false 的布尔值，通知编译器这个 Round 中的代码未发生变化，无须构造新的 JavaCompiler 实例。</li></ul><h3 id="对于注解循环引起的错误的解释"><a href="#对于注解循环引起的错误的解释" class="headerlink" title="对于注解循环引起的错误的解释"></a>对于注解循环引起的错误的解释</h3><p>不做任何处理，直接运行上面的程序的话，就会在控制台输出一个错误。</p><ul><li>Attempt to recreate a file for type com.steve.RouterList *<br>此处解释引用自《深入Java虚拟机_JVM高级特性与最佳实践》P307。<br>将插入式注解处理器看做一个插件，如果这些插件在处理注解期间对语法树进行了修改，编译器将回到解析及填充符号表的过程重新处理，直到所有插入式注解处理器都没有再对语法树进行修改为止，每一次的循环称为一个 round。</li></ul><ol start="4"><li><p>注册处理器<br>在 src/main 目录下，新建一个和 Java  文件夹平级的文件夹 “resources”, 在 resources 文件夹下新建 META-INF 文件夹，在 META-INF 文件夹下新建 services 文件夹， 在 services 文件夹下新建 javax.annotation.processing.Processor 文件，文件夹的内容就是刚刚编写的处理的全路径名，例如 com.steve.NameGenerateProcessor</p></li><li><p>使用<br>有两种方式，一是直接在 gradle 中依赖 注解项目。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>    compile fileTree(<span class="hljs-attr">dir:</span> <span class="hljs-string">&#x27;libs&#x27;</span>, <span class="hljs-attr">include:</span> [<span class="hljs-string">&#x27;*.jar&#x27;</span>])<br>    compile project(<span class="hljs-string">&#x27;:lib_processor&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>另外一种方式就是直接将注解的项目打出 jar 文件，让 app 依赖这个 jar  文件。</p></li></ol><p>build app 项目，就会生成对应的文件。文件的路径:\app\build\generated\source\apt\debug</p><p>想在代码中使用生成的 java 文件很简单，像正常自己写的文件一样，直接引用即可。</p><h4 id="借助-Google-和-square-的库"><a href="#借助-Google-和-square-的库" class="headerlink" title="借助 Google 和 square 的库"></a>借助 Google 和 square 的库</h4><p>传统的方式，过程比较繁琐，借助 Google  的 auto-service 和 square 的 javapoet 可以省一些事。</p><ul><li>Auto<br>用来注解 Processor 类，生成对应的 META-INF 的配置信息，省去注册处理器这一步，只要在自定义的 Processor 上面加上 @AutoService(Processor.class)</li><li>javapoet<br>只是一个方便生成代码的一个库，比起简单的字符串拼接，这个看上去更加友好。</li></ul><p>总体来说，和传统的方式区别不大，只是修改编写注解的 module 的依赖即可。</p><ol><li>修改 Processor 所在 Java module 的 gradle 依赖。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">apply plugin: <span class="hljs-string">&#x27;java&#x27;</span><br><br>dependencies &#123;<br>    <span class="hljs-function">compile <span class="hljs-title">fileTree</span><span class="hljs-params">(dir: <span class="hljs-string">&#x27;libs&#x27;</span>, include: [<span class="hljs-string">&#x27;*.jar&#x27;</span>])</span></span><br><span class="hljs-function">    compile &#x27;com.google.auto.service:auto-service:1.0-rc2&#x27;</span><br><span class="hljs-function">    compile &#x27;com.squareup:javapoet:1.7.0&#x27;</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function">sourceCompatibility </span>= <span class="hljs-string">&quot;1.7&quot;</span><br>targetCompatibility = <span class="hljs-string">&quot;1.7&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>借助 javapoet 生成 Java 代码<br>有一点需要说清楚，在 AndroidStudio 中用 javapoet 有问题，并不能完全的支持。<a href="https://github.com/square/javapoet/issues/139">这个 jake 在 github 上有解释</a>。如果想要完整的使用，最好能使用 intellij idea。<br>所以这里我们切换到 intellij idea 去开发。</li></ol><p><img src="https://raw.githubusercontent.com/tinggengyan/tinggengyan.github.io/source/imgur/annotation_error.png" alt="AdnroidStudio上的报错"></p><ol start="3"><li>重点还是在注解处理器的处理<br>需要注意一点的时，即使在注解处理这个看似特别的程序上，依旧是个 Java 程序，也就必然符合面向对象的原则。我将每个注解我需要的信息封装成一个对象，交给一个工具类，由工具类统一完成代码的生成。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameGenerateAnnotatedClass</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> TypeElement annotatedClassElement;<br>    <span class="hljs-keyword">private</span> String packageName;<br>    <span class="hljs-keyword">private</span> String className;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NameGenerateAnnotatedClass</span><span class="hljs-params">(TypeElement annotatedClassElement)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.annotatedClassElement = annotatedClassElement;<br>        className = annotatedClassElement.getSimpleName().toString();<br>        packageName = annotatedClassElement.getQualifiedName().toString();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPackageName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> packageName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getClassName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> className;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>这个类很简单，就单纯的记录了每个被注解元素的类名和包名，因为待会儿我自动生成的代码，我只需要这个两样。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProcessorUtil</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CLASSNAME = <span class="hljs-string">&quot;RouterList&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PACKAGENAME = <span class="hljs-string">&quot;com.lvmama.router&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProcessorUtil</span><span class="hljs-params">(Messager messager)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.messager = messager;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Messager messager;<br>    <span class="hljs-keyword">private</span> ArrayList&lt;NameGenerateAnnotatedClass&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(Element e, String msg, Object... args)</span> </span>&#123;<br>        messager.printMessage(Diagnostic.Kind.ERROR, String.format(msg, args), e);<br>    &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generateCode</span><span class="hljs-params">()</span> </span>&#123;<br>        TypeSpec.Builder builder = TypeSpec.classBuilder(CLASSNAME).addModifiers(Modifier.PUBLIC);<br>        <span class="hljs-keyword">for</span> (NameGenerateAnnotatedClass annotatedClass : list) &#123;<br>            FieldSpec fieldSpec = FieldSpec.builder(String.class, annotatedClass.getClassName())<br>                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)<br>                    .initializer(<span class="hljs-string">&quot;$S&quot;</span>, annotatedClass.getPackageName())<br>                    .build();<br>            builder.addField(fieldSpec);<br>        &#125;<br>        TypeSpec typeSpec = builder.build();<br>        JavaFile.Builder javaFileBuilder = JavaFile.builder(PACKAGENAME, typeSpec);<br>        JavaFile javaFile = javaFileBuilder.build();<br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//            javaFile.writeTo(System.out); //输出到控制台</span><br>            javaFile.writeTo(filer); <span class="hljs-comment">//输出到默认的目录</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNameGenerateAnnotatedClass</span><span class="hljs-params">(NameGenerateAnnotatedClass item)</span> </span>&#123;<br>        list.add(item);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>        list.clear();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类是负责生成代码的，在获取到每个被注解的元素的时候，都会添加到这个类的 list 中，在 generateCode() 方法中生成的代码。<br>这里用的就是 javapoet 来生成的代码。</p><ul><li>TypeSpec 代表的是一个类。</li><li>FieldSpec 代表了一个类中的字段。</li><li>JavaFile 代表了一个 Java 文件。<br>javaFile.writeTo 就是将我们自身组装的这些元素输出，javaFile.writeTo(System.out); 是输出到控制台。<br>javaFile.writeTo(filer); 输出到默认的目录下。</li></ul><p>和传统方式一样，运行 build 命令，在生成的目录下就可以看到生成的文件。</p><p><img src="https://raw.githubusercontent.com/tinggengyan/tinggengyan.github.io/source/imgur/annotation_withautoservice.png" alt="采用 auto-service和javapoet的结构图"></p><h3 id="运行时注解"><a href="#运行时注解" class="headerlink" title="运行时注解"></a>运行时注解</h3><p>对于运行时注解都是通过反射来实现的。</p><h3 id="源码注解"><a href="#源码注解" class="headerlink" title="源码注解"></a>源码注解</h3>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Annotation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 常用语法</title>
    <link href="/2016/10/17/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <url>/2016/10/17/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录 Markdown 写作时常用的一些语法.</p><span id="more"></span><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>平时人们都会进行一些简单的笔记记录，这些文字如果用 Word 就会感觉太复杂，用 txt 又显得单薄，一点格式都没有，不利于书写。自然人们希望有一种方法，能消除这两个缺点的方法，既能有常用的格式，又能方便记忆，简单快捷.<br>Markdown 是满足这种需要的，所以记录总结一些常用的 Markdown 符号，方便记忆.</p><h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>Markdown 是一种轻量级的「标记语言」，Markdown 简单快捷，导出格式也随心所欲，你可以导出 HTML 格式的文件用来网站发布，也可以十分方便的导出 PDF 格式，方便阅读。</p><h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><h2 id="1-标题级别的"><a href="#1-标题级别的" class="headerlink" title="1. 标题级别的"></a>1. 标题级别的</h2><p><strong>语法：</strong></p><blockquote><p># 一级标题<br>  ## 二级标题<br>  ### 三级标题<br>  #### 四级标题<br>  ##### 五级标题<br>  ###### 六级标题</p></blockquote><p>标题的级别根据#的个数来区分。正常的文本内容不需要取管，直接输入即可。</p><p><strong>效果:</strong></p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="2-序列效果"><a href="#2-序列效果" class="headerlink" title="2. 序列效果"></a>2. 序列效果</h2><p><strong>无序序列语法：</strong></p><blockquote></blockquote><p>* 包含的要点<br>* 包含的要点<br>- 包含的要点<br>- 包含的要点</p><p><strong>无序序列效果:</strong></p><ul><li>包含的要点</li><li>包含的要点</li></ul><ul><li>包含的要点</li><li>包含的要点</li></ul><p><strong>有序序列语法：</strong></p><blockquote></blockquote><p>\1. 第一点<br>\2. 第二点<br>\1. 第三点</p><p><strong>无序序列效果:</strong></p><ol><li>第一点</li><li>第二点</li><li>第三点</li></ol><p>对于想输入一些知识点的结构的情况，需要以列表的形式展示的时候，可以采用这种标记。可以根据具体的情况才有无序的列表和有序的列表。<br>对于无序的情况，可以输入“-”也可以输入“*”，都可以。对于有序的情况，输入对于的数字加上英文符号的点，加上空格，紧跟文本内容。其中的数字可以随意,解析的时候自动累加哪怕都写的1，根据具体的解析平台可能存在差异，故而最好能按照顺序写这个数字。</p><h2 id="3-强调文字"><a href="#3-强调文字" class="headerlink" title="3. 强调文字"></a>3. 强调文字</h2><p><strong>斜体语法:</strong></p><blockquote></blockquote><p> *斜体文字,加载这两个星花之间都将以斜体的形式展现*</p><p><strong>斜体效果:</strong></p><p><em>斜体文字,加载这两个星花之间都将以斜体的形式展现</em></p><p><strong>加粗语法:</strong></p><blockquote></blockquote><p>*<em>需要加粗的文字写在这里</em>*</p><p><strong>加粗效果:</strong></p><p><strong>需要加粗的文字写在这里</strong></p><p>文本中需要加粗来强调的内容和需要以斜体展示的内容，用星号包裹，区别就是星号的个数。</p><h2 id="4-引用内容"><a href="#4-引用内容" class="headerlink" title="4. 引用内容"></a>4. 引用内容</h2><p><strong>引用语法:</strong></p><blockquote></blockquote><p>&gt; 引用的内容，对于一些需要标注了引用了别人的信息的情况下需要以这种形式展示，可以写在这个大于号的后面即可。</p><p><strong>引用效果:</strong></p><blockquote><p>引用的内容，对于一些需要标注了引用了别人的信息的情况下需要以这种形式展示，可以写在这个大于号的后面即可。</p></blockquote><h2 id="5-超链接"><a href="#5-超链接" class="headerlink" title="5. 超链接"></a>5. 超链接</h2><p><strong>超链接语法:</strong></p><blockquote></blockquote><p>[展示的文本]( <a href="http://www.baidu.com/">www.baidu.com</a> )</p><p><strong>超链接效果:</strong></p><p><a href="www.baidu.com">展示的文本</a></p><p>对于文本需要有超链接的情况下，可以采用这种方式。</p><h2 id="6-引用外部图片"><a href="#6-引用外部图片" class="headerlink" title="6. 引用外部图片"></a>6. 引用外部图片</h2><p><strong>引用外部图片语法:</strong></p><blockquote></blockquote><p>![图片说明展示的文本](<a href="http://pic.lvmama.com/img/v6/lv_jbr.png">http://pic.lvmama.com/img/v6/lv_jbr.png</a>)</p><p><strong>引用外部图片效果:</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/706636-d83548cdf2353f55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片说明展示的文本"></p><p><strong>引用外部图片外加超链接语法:</strong></p><blockquote></blockquote><p>[![图片说明展示的文本](<a href="http://pic.lvmama.com/img/v6/lv_jbr.png)]/(http://www.lvmama.com)">http://pic.lvmama.com/img/v6/lv_jbr.png)]\(http://www.lvmama.com)</a></p><p><strong>引用外部图片外加超链接效果:</strong><br><a href="http://www.lvmama.com/"><img src="http://upload-images.jianshu.io/upload_images/706636-d83548cdf2353f55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片说明展示的文本"></a></p><h2 id="7-分割线"><a href="#7-分割线" class="headerlink" title="7. 分割线"></a>7. 分割线</h2><p><strong>分割线语法:</strong></p><blockquote></blockquote><p>\ —-<br>\ ****</p><p>三个横线和三个星号都表示分割线</p><p><strong>分割线效果：</strong></p><p>横线分割线</p><hr><p>星号分割线</p><hr><p>分割线可以用来分割段落和大的模块内容。</p><h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8. 表格"></a>8. 表格</h2><p><strong>表格语法：</strong></p><blockquote></blockquote><p>| tab1 | tab2 | tab3 |<br>|-|-|-|<br>|内容1|内容2|内容3|</p><p><strong>表格效果：</strong><br>| tab1 | tab2 | tab3 |<br>|-|-|-|<br>|内容1|内容2|内容3|</p><p>用竖直的线和减号进行标示，就可以插入一个简单的表格。</p><h2 id="9-引入代码块"><a href="#9-引入代码块" class="headerlink" title="9. 引入代码块"></a>9. 引入代码块</h2><p><strong>引入代码的语法：</strong></p><blockquote></blockquote><p>```java<br>public class MainActivity extends Activity{<br>protected void onCreate(Bundle save){<br>}<br>}<br>```</p><p><strong>引入代码的效果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Activity</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle save)</span></span>&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对于想输入代码的时候，直接替换上面的java-即可实现代码的高亮。"><a href="#对于想输入代码的时候，直接替换上面的java-即可实现代码的高亮。" class="headerlink" title="对于想输入代码的时候，直接替换上面的java 即可实现代码的高亮。"></a>对于想输入代码的时候，直接替换上面的java 即可实现代码的高亮。</h2>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
      <category>Editor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git实践笔记</title>
    <link href="/2016/10/15/git%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/"/>
    <url>/2016/10/15/git%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录常用 git 的功能和命令.</p><span id="more"></span><h1 id="Git实践笔记"><a href="#Git实践笔记" class="headerlink" title="Git实践笔记"></a>Git实践笔记</h1><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>一年多前一边工作一边学,做的笔记,后来换了工作,改用SVN,git也就生疏了,最近公司打算换git了,正好重新整理一下笔记.</p><h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>git是目前最好的版本控制工具,是一种动态异步的版本控制工具,对于版本控制的发展历程,可以参考别的文章.目前各个开源管理平台基本上都是用的git,git是必备的技能.</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git!大写的牛逼!一个月之内，Linux系统的源码已经由Git管理了!<br>起初的git只能在linux和Unix上运行。</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ul><li> 在Linux上安装Git</li></ul><p>命令行下输入,<em>sudo apt-get install git</em>,直接安装.</p><ul><li>在Windows上安装<br>从<a href="http://msysgit.github.io/%E4%B8%8B%E8%BD%BD%E3%80%82">http://msysgit.github.io/下载。</a></li></ul><p>在bash下输入以下命令，设置账号和邮箱。是全局的，在之后的所有git操作，都是以这个账号.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span></span><br></code></pre></td></tr></table></figure><p>** 注意：**<br>git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global --list查看当前的所有设置清单列表。</span><br></code></pre></td></tr></table></figure><h2 id="创建版本库（repository）"><a href="#创建版本库（repository）" class="headerlink" title="创建版本库（repository）"></a>创建版本库（repository）</h2><p>如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。<br>一共三步：初始化，添加文件，提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git init</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> git add readme.txt</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&quot;提交的信息&quot;</span></span><br></code></pre></td></tr></table></figure><h2 id="查看仓库的修改状态"><a href="#查看仓库的修改状态" class="headerlink" title="查看仓库的修改状态"></a>查看仓库的修改状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git status</span><br>这个命令会告诉我们修改了哪些文件，在知道了修改的文件之后，通过<br><span class="hljs-meta">$</span><span class="bash"> git diff readme.txt</span><br>这个命令可以查看修改的具体内容。<br></code></pre></td></tr></table></figure><h2 id="版本回退："><a href="#版本回退：" class="headerlink" title="版本回退："></a>版本回退：</h2><p>每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为 <em>commit</em>。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --pretty=oneline</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard HEAD^（表示head指向回退到上一个版本）</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> cat readme.txt</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard 3628164</span><br></code></pre></td></tr></table></figure><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向改变了。然后顺便把工作区的文件更新了。所以你让HEAD指向哪个版本号，你就把当前版本定位在哪。</p><p>找不到新版本的commit id怎么办？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reflog</span><br></code></pre></td></tr></table></figure><p><strong>总之：</strong><br>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset     –hard commit_id。<br>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。<br>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p><h2 id="工作区和暂存区："><a href="#工作区和暂存区：" class="headerlink" title="工作区和暂存区："></a>工作区和暂存区：</h2><ul><li>工作区：就是在电脑上能看到的目录；一般就是项目文件的根目录；</li><li>版本库：工作区有一个隐藏目录.git文件夹，属于仓库文件，不属于工作区，是Git的版本库；</li></ul><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。<br>把文件往Git版本库里添加的时候，是分两步执行的：</p><ol><li>第一步是用git add把文件从工作区添加到暂存区，实际上就是把文件修改添加到暂存区；</li><li>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</li></ol><h3 id="管理修改："><a href="#管理修改：" class="headerlink" title="管理修改："></a>管理修改：</h3><p>工作区的内容，必须add到暂存区以后才会在提交的时候被提交到库里。每次修改，如果不add到暂存区，那就不会加入到commit中</p><h3 id="撤销修改："><a href="#撤销修改：" class="headerlink" title="撤销修改："></a>撤销修改：</h3><p>git checkout – file可以丢弃工作区的修改.把file文件在工作区的修改全部撤销，这里有两种情况：</p><ul><li>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li><li>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li><li>总之，就是让这个文件回到最近一次<em>git commit</em>或<em>git add</em>时的状态。</li></ul><p>git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区<br>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p><ul><li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <em>git checkout – file</em>。</li><li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <em>git reset HEAD file</em>，就回到了场景1，第二步按场景1操作。</li></ul><h3 id="删除文件："><a href="#删除文件：" class="headerlink" title="删除文件："></a>删除文件：</h3><p>在Git中，删除也是一个修改操作</p><p>直接在文件管理器中把没用的文件删了，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了。</p><ol><li> 用命令git rm删掉，并且git commit，用来从版本库中删除该文件.</li><li> 用命令git checkout – file ，这样实现用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</li></ol><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>生成公私密钥：$ ssh-keygen -t rsa -C “<a href="mailto:&#121;&#x6f;&#x75;&#x72;&#101;&#x6d;&#97;&#x69;&#108;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;">&#121;&#x6f;&#x75;&#x72;&#101;&#x6d;&#97;&#x69;&#108;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;</a>“<br>在用户目录下有.ssh目录，id_rsa和id_rsa.pub这两个文件。<br>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><ul><li>在github上新建一个仓库。</li><li>GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote add origin git@github.com:tinggengyan/study.git</span><br></code></pre></td></tr></table></figure><ul><li>添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</li><li>下一步，就可以把本地库的所有内容推送到远程库上： <em>$ git push -u origin master</em>,把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。</li><li>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</li></ul><p>从现在起，只要本地作了提交，就可以通过命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push origin master</span><br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>要关联一个远程库，使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin git@server-name:path/repo-name.git<br></code></pre></td></tr></table></figure><p>关联后，使用命令<em>git push -u origin master</em>第一次推送master分支的所有内容；此后，每次本地提交后，只要有必要，就可以使用命令<em>git push origin master</em>推送最新修改；</p><h2 id="远程克隆"><a href="#远程克隆" class="headerlink" title="远程克隆"></a>远程克隆</h2><p>git clone <a href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#x6d;</a>:michaelliao/gitskills.git</p><h2 id="分支创建与合并"><a href="#分支创建与合并" class="headerlink" title="分支创建与合并"></a>分支创建与合并</h2><p>Git里，有个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。<br>Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点。<br>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上。<br>当创建一个新的分支的时候，新分支的指针和旧的指针指向是同一个，同时将head的指向修改到当前的新分支的指针上，之后提交就可以提交到新的分支了。<br>当在新的分支上将工作完成之后，只要合并这两个分支就可以了，简单的就是讲master指向新的分支的指向。然后删除旧的分支的指针即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -b dev===&#123;$ git branch dev；$ git checkout dev&#125;创建一个Dev分支并切换到Dev分支。</span><br><span class="hljs-meta">$</span><span class="bash"> git branch查看当前的分支。git branch命令会列出所有分支，当前分支前面会标一个*号。</span><br><span class="hljs-meta">$</span><span class="bash"> git merge dev 命令用于将当前的分支和dev分支合并。</span><br></code></pre></td></tr></table></figure><h2 id="变基操作"><a href="#变基操作" class="headerlink" title="变基操作"></a>变基操作</h2><p>对于merge操作，会合并两个分支，并且产生一个新的提交，这对于整体的 log 查看并不美观。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout experiment</span><br><span class="hljs-meta">$</span><span class="bash"> git rebase master</span><br><span class="hljs-meta">$</span><span class="bash"> git checkout master</span><br><span class="hljs-meta">$</span><span class="bash"> git merge experiment</span><br></code></pre></td></tr></table></figure><p>它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近<em>共同祖先</em>，然后对比当前分支相对于该<em>祖先</em>的<em>历次提交</em>，<br>提取相应的修改并存为<em>临时文件</em>，然后将当前分支指向目标基底, 最后以此将之前另存为临时文件的修改依序应用。<br>一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁才需要这么做。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git rebase --onto master server client</span><br></code></pre></td></tr></table></figure><p>以上命令的意思是：“取出 client 分支，找出处于 client 分支和 server 分支的共同祖先之后的修改，然后把它们在 master 分支上重演一遍”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout master</span><br><span class="hljs-meta">$</span><span class="bash"> git merge client</span><br></code></pre></td></tr></table></figure><p>切换到master分支进行合并。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git rebase master server</span><br></code></pre></td></tr></table></figure><p>这样就可以省的切换到sever分支，直接指定rebase。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout master</span><br><span class="hljs-meta">$</span><span class="bash"> git merge server</span><br></code></pre></td></tr></table></figure><p>快速合并。</p><p>Git鼓励大量使用分支：</p><ul><li>查看分支：git branch</li><li>创建分支：git branch <name></li><li>切换分支：git checkout <name></li><li>创建+切换分支：git checkout -b <name></li><li>合并某分支到当前分支：git merge <name></li><li>删除分支：git branch -d <name></li></ul><h2 id="冲突处理"><a href="#冲突处理" class="headerlink" title="冲突处理"></a>冲突处理</h2><p>Git用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>标记出不同分支的内容，通过status命令，找到冲突的内容，手动修改，处理之后，再重新提交.<br>用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log --graph --pretty=oneline --abbrev-commit<br></code></pre></td></tr></table></figure><p>命令，查看一下分支合并.</p><p><a href="https://app.yinxiang.com/Home.action#n=f311ba79-a871-47a5-bea1-0fbcb2277ea8&amp;b=403e83c5-7d1d-4991-bc1b-9a6d80235d0b&amp;ses=4&amp;sh=1&amp;sds=5&amp;">https://app.yinxiang.com/Home.action#n=f311ba79-a871-47a5-bea1-0fbcb2277ea8&amp;b=403e83c5-7d1d-4991-bc1b-9a6d80235d0b&amp;ses=4&amp;sh=1&amp;sds=5&amp;</a></p><h2 id="分支管理策略："><a href="#分支管理策略：" class="headerlink" title="分支管理策略："></a>分支管理策略：</h2><p>合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。<br>如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge --no-ff 方式就能实现禁用fast forward模式。<br></code></pre></td></tr></table></figure><p><strong>策略：</strong><br>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p><h3 id="Bug分支："><a href="#Bug分支：" class="headerlink" title="Bug分支："></a>Bug分支：</h3><p>当出现bug的时候需要修复BUG，但是此时的工作区还有文件没有提交，此时的文件又不能提交，此时可以使用git的暂存功能。Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。 执行完stash之后的工作区就是一个干净的工作区。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git stash list<br></code></pre></td></tr></table></figure><p>可以查看储藏的内容列表。接着就是恢复储藏的现场。<br>有两个办法：</p><ul><li>一是用<em>git stash apply</em>恢复，但是恢复后，stash内容并不删除，你需要用 <em>git stash drop</em>来删除；</li><li>另一种方式是用git stash pop，恢复的同时把stash内容也删了：</li></ul><p>可以多次stash，恢复的时候，先用 <em>git stash list</em> 查看，然后恢复指定的stash，用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">git stash apply stash@&#123;0&#125;</span><br></code></pre></td></tr></table></figure><h3 id="feature分支："><a href="#feature分支：" class="headerlink" title="feature分支："></a>feature分支：</h3><p>新增一个功能的生活，最好新建一个分支，之后再合并。没有和和分支在删除的时候，git会给出友情提醒，所以删除的时候，需要使用git branch -D <name>强行删除。</p><h3 id="多人协作开发："><a href="#多人协作开发：" class="headerlink" title="多人协作开发："></a>多人协作开发：</h3><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。要查看远程库的信息，用 <em>git remote</em>；<br>用git remote -v显示更详细的信息；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote -v</span><br>origin  git@github.com:michaelliao/learngit.git (fetch)<br>origin  git@github.com:michaelliao/learngit.git (push)<br></code></pre></td></tr></table></figure><p>显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。<br>推送分支</p><ul><li> 推送分支，就是把该分支上的所有本地提交推送到远程库。</li><li> 推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git push origin master 把master分支推送。</span><br><span class="hljs-meta">$</span><span class="bash"> git push origin dev    把dev分支进行推送。</span><br></code></pre></td></tr></table></figure><p>在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p><h3 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h3><p>git pull把最新的提交从origin下相应的分支抓下来。<br>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用git push origin branch-name推送自己的修改；如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；如果合并有冲突，则解决冲突，并在本地提交；没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令 <em>git branch –set-upstream branch-name origin/branch-name</em>。</li></ol><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>查看远程库信息，使用git remote -v；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</li><li>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</li></ul><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p>git tag <name>就可以打一个新标签；<br>git tag 查看所有标签；<br>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，可以通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --pretty=oneline --abbrev-commit 找到历史提交的commit id。</span><br><span class="hljs-meta">$</span><span class="bash"> git tag   tagname    commit id来为历史提交打上tag。</span><br>git show &lt;tagname&gt;查看标签信息.<br></code></pre></td></tr></table></figure><p>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：<br>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git tag -a v0.1 -m <span class="hljs-string">&quot;version 0.1 released&quot;</span> 3628164</span><br></code></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</li><li>git tag -a <tagname> -m “blablabla…”可以指定标签信息；</li><li>git tag -s <tagname> -m “blablabla…”可以用PGP签名标签；</li><li>命令git tag可以查看所有标签。</li></ul><h4 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h4><ul><li>命令git push origin <tagname>可以推送一个本地标签；</li><li>命令git push origin –tags可以推送全部未推送过的本地标签；</li><li>命令git tag -d <tagname>可以删除一个本地标签；</li><li>先在本地删除一个标签，再命令git push origin :refs/tags/<tagname>可以删除一个远程标签。</li></ul><h2 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h2><p>忽略某些文件时，需要编写.gitignore；.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！</p><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global alias.st status</span><br></code></pre></td></tr></table></figure><p>是在全局，整个电脑上的所有仓库都使用st来表示status。执行 <em>git st</em>=<em>git status</em>.<br>加上*–global*是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。<br>单个仓库的Git配置文件都放在.git/config文件中。<br>当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中。<br>别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。</p><h2 id="搭建git服务器"><a href="#搭建git服务器" class="headerlink" title="搭建git服务器"></a>搭建git服务器</h2><p>后加.</p><h2 id="感激-非常感激，万分的感激！"><a href="#感激-非常感激，万分的感激！" class="headerlink" title="感激,非常感激，万分的感激！"></a>感激,非常感激，万分的感激！</h2><p>感谢以下的文章以及其作者和翻译的开发者们,排名不分先后</p><ul><li><a href="https://git-scm.com/book/zh/v1/">Pro Git</a></li><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程 - 廖雪峰的官方网站</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JsBridge分析</title>
    <link href="/2016/10/13/JsBridge%E5%88%86%E6%9E%90/"/>
    <url>/2016/10/13/JsBridge%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>本篇分析大头鬼的 <a href="https://github.com/lzyzsd/JsBridge">JsBridge</a> 库.</p><span id="more"></span><h2 id="js-bridge-分析大头鬼的-JS-库"><a href="#js-bridge-分析大头鬼的-JS-库" class="headerlink" title="js bridge 分析大头鬼的 JS 库"></a>js bridge 分析大头鬼的 JS 库</h2><p>主要的任务都交给了 JS 库去执行，整个框架的主要过程分为三个过程，native 通过发送消息调用 JS 方法，在 JS 层的消息处理,将消息处理完成之后返回。</p><h3 id="Java调用JS-方法"><a href="#Java调用JS-方法" class="headerlink" title="Java调用JS 方法"></a>Java调用JS 方法</h3><p>对于 native 想要调用 JS 代码的时候，会调用自定义的 BridgeWebView 的 send 方法进行发送消息，对于消息，我们可以自定义处理器和回调处理方法，发出去的消息不是立即处理的，而是将其进行封装，成 Message 对象，如果该消息后续有回调，需要记录回调等待后续的处理，而后添加到队列中。进行排队，等待处理。</p><h3 id="Java-消息的分发"><a href="#Java-消息的分发" class="headerlink" title="Java 消息的分发"></a>Java 消息的分发</h3><p>这个消息的分发是指的 native 层面的消息分发，当页面加载 finish 之后，会调用 dispatch 方法对刚刚进入队列中的 Message 对象进行分发。解析出 Message 携带的内容，按照约定，生成对应的 JS 脚本，交由 JS 库处理。</p><h3 id="加载-JS-库"><a href="#加载-JS-库" class="headerlink" title="加载 JS 库"></a>加载 JS 库</h3><p>按照流程的事件顺序上讲，这个过程应该是第一个被执行的，在加载完 HTML 页面的同时需要加载 JS 库，但是 JS 库的加载和页面的加载谁先成功，这个可能出现先后差异，所以需要在 HTML 中判断 JS 库是否加载成功，如果加载成功则进行消息处理；如果加载还未成功，则监听加载 JS 库的事件，等到加载成功之后，再进行消息的处理。这些事件的处理需要在 HTML 中处理.</p><h3 id="JS-库对消息的处理"><a href="#JS-库对消息的处理" class="headerlink" title="JS 库对消息的处理"></a>JS 库对消息的处理</h3><p>这里处理的其实是一个 URL ，在 JS 库层面会调用相应的 JS 方法。当 Java 层调用了消息的分发命令，会通过执行 JS 脚本的方式将消息交给 JS 层，JS 层面会将需要处理的消息，添加到队列中，等待处理，这个过程又有点像 Java 层的处理方式，_handleMessageFromNative ，会将消息存入 receiveMessageQueue 中，等待处理。</p><p>当 JS 库加载成功，需要 HTML 层面可以主动的调用JS层的消息处理的方法 _dispatchMessageFromNative，遍历 receiveMessageQueue，对消息进行处理。</p><p>对于消息的业务处理，都在 JS 层面完成，JS 处理完成之后，如果有需要进行为 Java 层提供返回值的，则进行重定向，通知 Java 层返回值队列中有数据，Java 层拦截 URL 进行主动拉去数据的 JS 脚本执行，JS 层方法将返回值放入 URL 中，进行重定向，Java 层会拦截 url，根据一定的规则，从 url 中截取出数据，数据中携带了唯一的请求 ID，根据这个 ID 查找出对应的回调方法。</p><h3 id="JS-向-native-发送消息"><a href="#JS-向-native-发送消息" class="headerlink" title="JS 向 native 发送消息"></a>JS 向 native 发送消息</h3><p>当 JS 想主动向 native 发送消息的时候，会主动调用 JS 库中的 send 方法，将消息放入 JS 中的 sendMessageQueue 队列中。然后像给 native 层提供返回值一样，进行 url 的重定向,然后依旧是 Java 层拦截 URL,然后主动去拉取数据。</p><h3 id="native-处理-JS-发来的消息"><a href="#native-处理-JS-发来的消息" class="headerlink" title="native 处理 JS 发来的消息"></a>native 处理 JS 发来的消息</h3><p>当 JS 向 native 发出消息,native 收到消息后，解析成 Message 对象，根据 callid 去判断是否有特定的 handler，是否有回调,这些 handler 和 回调都是刚刚封装 Message 对象时保存的。</p><h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><p>对于一般的具体应用，都是 JS 层调用 Java 层提供的方法。这时候，对于平时普通的常规调用，都是需要提前约定的，可以定义在 DefaultHandler 中。也可以根据不同的业务需要定义不同的 BridgeHandler。匿名实现 BridgeHandler 的方式只适合 java 层调用 JS 方法，这种方式不方便维护。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>native 层提供一些基础的方法，类似于分享操作，登录等功能。具体的业务类执行还是交由 JS 层执行，需要 native 协助的功能，以重定向 URL 的方式进行。JS 不直接调用 Java 方法，也就是没有 @JavascriptInterface 注解的方法，所有的约定,包括返回的数据,都在 URL 中。<br>这里会有一个缺点，虽然 http1.1 中声明 url 是没有长度的限制的，但是一般而言，服务端或者浏览器都有有长度的限制，所以，将所有的数据都通过 URL 来传递还是有不妥之处。</p>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JsBridge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习备忘</title>
    <link href="/2016/10/07/Linux%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/"/>
    <url>/2016/10/07/Linux%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录学习 Linux 的记录.</p><span id="more"></span><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="deb-文件安装"><a href="#deb-文件安装" class="headerlink" title="deb 文件安装"></a>deb 文件安装</h3><p>直接双击,安装,ubuntu 上会自动调用软件管理器安装.</p><h3 id="zip文件安装"><a href="#zip文件安装" class="headerlink" title="zip文件安装"></a>zip文件安装</h3><p>这种是包含了源码的,通过命令解压,设置环境变量.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zip zipFileName.zip<br></code></pre></td></tr></table></figure><h3 id="tar-gz-源代码安装"><a href="#tar-gz-源代码安装" class="headerlink" title="tar.gz 源代码安装"></a>tar.gz 源代码安装</h3><p>在终端中进行解压操作;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf ****.tar.gz<br>tar -jxvf ****.tar.bz(或bz2) <br></code></pre></td></tr></table></figure><p>看是否需要设置环境变量,亦或是有.sh启动文件.</p><ul><li>设置环境变量的方法</li></ul><p>有三种环境变量的设置方法,一种是临时性的,只在本次的命令行中有效,一种是针对当前用户的,还有一种就是全局性的,针对所有用的.</p><h3 id="rpm-文件安装"><a href="#rpm-文件安装" class="headerlink" title="rpm 文件安装"></a>rpm 文件安装</h3><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><ul><li><p>apt-get autoclean:<br>如果你的硬盘空间不大的话，可以定期运行这个程序，将已经删除了的软件包的.deb安装文件从硬盘中删除掉。如果你仍然需要硬盘空间的话，可以试试apt-get clean，这会把你已安装的软件包的安装包也删除掉，当然多数情况下这些包没什么用了，因此这是个为硬盘腾地方的好办法。</p></li><li><p>apt-get clean:<br>类似上面的命令，但它删除包缓存中的所有包。这是个很好的做法，因为多数情况下这些包没有用了。但如果你是拨号上网的话，就得重新考虑了。</p></li><li><p>apt-get autoremove:<br>删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包。</p></li></ul><p>其它：</p><ul><li>apt-get remove 软件包名称：<br>删除已安装的软件包（保留配置文件）。</li><li>apt-get –purge remove 软件包名称：<br>删除已安装包（不保留配置文件)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>ComputerFoundation</category>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu下SublimeText3中文输入法修复</title>
    <link href="/2016/10/07/Ubuntu%E4%B8%8BSublimeText3%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E4%BF%AE%E5%A4%8D/"/>
    <url>/2016/10/07/Ubuntu%E4%B8%8BSublimeText3%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E4%BF%AE%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录在 ubuntu 如何修复 Sublime Text 不能输入中文的问题.</p><span id="more"></span><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在 ubuntu 下安装完 Sublime Text之后,发现不能输入中文,也不能正常的切换成中文输入法.google 了一圈之后,看到网上的解决方案,记录下来,方便日后使用.</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="1-编译一段C代码-保存以下的代码-并将文件命名为-sublime-imfix-c"><a href="#1-编译一段C代码-保存以下的代码-并将文件命名为-sublime-imfix-c" class="headerlink" title="1. 编译一段C代码.保存以下的代码,并将文件命名为 sublime-imfix.c"></a>1. 编译一段C代码.保存以下的代码,并将文件命名为 <code>sublime-imfix.c</code></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">sublime-imfix.c</span><br><span class="hljs-comment">Use LD_PRELOAD to interpose some function to fix sublime input method support for linux.</span><br><span class="hljs-comment">By Cjacker Huang</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">gcc -shared -o libsublime-imfix.so sublime-imfix.c `pkg-config --libs --cflags gtk+-2.0` -fPIC</span><br><span class="hljs-comment">LD_PRELOAD=./libsublime-imfix.so subl</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> </span><br><span class="hljs-keyword">typedef</span> GdkSegment GdkRegionBox;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">GdkRegion</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">long</span> size;<br>  <span class="hljs-keyword">long</span> numRects;<br>  GdkRegionBox *rects;<br>  GdkRegionBox extents;<br>&#125;;<br><br>GtkIMContext *local_context;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span></span><br><span class="hljs-function"><span class="hljs-title">gdk_region_get_clipbox</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> GdkRegion *region,</span></span><br><span class="hljs-params"><span class="hljs-function">            GdkRectangle    *rectangle)</span></span><br><span class="hljs-function"></span>&#123;<br>  g_return_if_fail (region != <span class="hljs-literal">NULL</span>);<br>  g_return_if_fail (rectangle != <span class="hljs-literal">NULL</span>);<br><br>  rectangle-&gt;x = region-&gt;extents.x1;<br>  rectangle-&gt;y = region-&gt;extents.y1;<br>  rectangle-&gt;width = region-&gt;extents.x2 - region-&gt;extents.x1;<br>  rectangle-&gt;height = region-&gt;extents.y2 - region-&gt;extents.y1;<br>  GdkRectangle rect;<br>  rect.x = rectangle-&gt;x;<br>  rect.y = rectangle-&gt;y;<br>  rect.width = <span class="hljs-number">0</span>;<br>  rect.height = rectangle-&gt;height;<br>  <span class="hljs-comment">//The caret width is 2;</span><br>  <span class="hljs-comment">//Maybe sometimes we will make a mistake, but for most of the time, it should be the caret.</span><br>  <span class="hljs-keyword">if</span>(rectangle-&gt;width == <span class="hljs-number">2</span> &amp;&amp; GTK_IS_IM_CONTEXT(local_context)) &#123;<br>        gtk_im_context_set_cursor_location(local_context, rectangle);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//this is needed, for example, if you input something in file dialog and return back the edit area</span><br><span class="hljs-comment">//context will lost, so here we set it again.</span><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> GdkFilterReturn <span class="hljs-title">event_filter</span> <span class="hljs-params">(GdkXEvent *xevent, GdkEvent *event, gpointer im_context)</span></span><br><span class="hljs-function"></span>&#123;<br>    XEvent *xev = (XEvent *)xevent;<br>    <span class="hljs-keyword">if</span>(xev-&gt;type == KeyRelease &amp;&amp; GTK_IS_IM_CONTEXT(im_context)) &#123;<br>       GdkWindow * win = g_object_get_data(G_OBJECT(im_context),<span class="hljs-string">&quot;window&quot;</span>);<br>       <span class="hljs-keyword">if</span>(GDK_IS_WINDOW(win))<br>         gtk_im_context_set_client_window(im_context, win);<br>    &#125;<br>    <span class="hljs-keyword">return</span> GDK_FILTER_CONTINUE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gtk_im_context_set_client_window</span> <span class="hljs-params">(GtkIMContext *context,</span></span><br><span class="hljs-params"><span class="hljs-function">          GdkWindow    *window)</span></span><br><span class="hljs-function"></span>&#123;<br>  GtkIMContextClass *klass;<br>  g_return_if_fail (GTK_IS_IM_CONTEXT (context));<br>  klass = GTK_IM_CONTEXT_GET_CLASS (context);<br>  <span class="hljs-keyword">if</span> (klass-&gt;set_client_window)<br>    klass-&gt;set_client_window (context, window);<br><br>  <span class="hljs-keyword">if</span>(!GDK_IS_WINDOW (window))<br>    <span class="hljs-keyword">return</span>;<br>  g_object_set_data(G_OBJECT(context),<span class="hljs-string">&quot;window&quot;</span>,window);<br>  <span class="hljs-keyword">int</span> width = gdk_window_get_width(window);<br>  <span class="hljs-keyword">int</span> height = gdk_window_get_height(window);<br>  <span class="hljs-keyword">if</span>(width != <span class="hljs-number">0</span> &amp;&amp; height !=<span class="hljs-number">0</span>) &#123;<br>    gtk_im_context_focus_in(context);<br>    local_context = context;<br>  &#125;<br>  gdk_window_add_filter (window, event_filter, context);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-因为要编译C代码-所以需要安装C的编译环境"><a href="#2-因为要编译C代码-所以需要安装C的编译环境" class="headerlink" title="2. 因为要编译C代码,所以需要安装C的编译环境"></a>2. 因为要编译C代码,所以需要安装C的编译环境</h2><p>打开命令行,安装编译环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install build-essential<br>sudo apt-get install libgtk2.0-dev<br></code></pre></td></tr></table></figure><h2 id="3-编译如上说的C代码-会在当前目录下生成libsublime-imfix-so文件-并将libsublime-imfix-so复制到-opt-sublime-text-目录下"><a href="#3-编译如上说的C代码-会在当前目录下生成libsublime-imfix-so文件-并将libsublime-imfix-so复制到-opt-sublime-text-目录下" class="headerlink" title="3. 编译如上说的C代码,会在当前目录下生成libsublime-imfix.so文件,并将libsublime-imfix.so复制到/opt/sublime_text/目录下."></a>3. 编译如上说的C代码,会在当前目录下生成<code>libsublime-imfix.so</code>文件,并将<code>libsublime-imfix.so</code>复制到<code>/opt/sublime_text/</code>目录下.</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -shared -o libsublime-imfix.so sublime-imfix.c `pkg-config --libs --cflags gtk+-2.0` -fPIC<br></code></pre></td></tr></table></figure><h2 id="4-修改-usr-share-applications-sublime-text-desktop"><a href="#4-修改-usr-share-applications-sublime-text-desktop" class="headerlink" title="4. 修改/usr/share/applications/sublime_text.desktop"></a>4. 修改<code>/usr/share/applications/sublime_text.desktop</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim sublime_text.desktop<br></code></pre></td></tr></table></figure><p>然后修改对应的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Desktop Entry]<br>[...]<br>Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text %F<br>[...]<br><br>[Desktop Action Window]<br>[...]<br>Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text -n<br>[...]<br><br>[Desktop Action Document]<br>[...]<br>Exec=env LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so /opt/sublime_text/sublime_text --command new_file<br>[...]<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.sinosky.org/linux-sublime-text-fcitx.html"> 完美解决 Linux 下 Sublime Text 中文输入 </a></li></ul>]]></content>
    
    
    <categories>
      
      <category>ComputerFoundation</category>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>SublimeText3</tag>
      
      <tag>输入法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AndroidStudio引入AAR依赖</title>
    <link href="/2016/08/10/AndroidStudio%E5%BC%95%E5%85%A5AAR%E4%BE%9D%E8%B5%96/"/>
    <url>/2016/08/10/AndroidStudio%E5%BC%95%E5%85%A5AAR%E4%BE%9D%E8%B5%96/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文介绍 AndroidStudio 项目如何如何进行 aar 包依赖.</p><span id="more"></span><h1 id="AndroidStudio如何引用aar依赖"><a href="#AndroidStudio如何引用aar依赖" class="headerlink" title="AndroidStudio如何引用aar依赖"></a>AndroidStudio如何引用aar依赖</h1><h2 id="未成功方案"><a href="#未成功方案" class="headerlink" title="未成功方案"></a>未成功方案</h2><p>google 了一圈，网上的方法基本都是以下这种，在 <em>module/build.gradle</em> 文件中添加如下代码.同时将 aar 文件 copy 到 libs 文件夹下.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><br>repositories &#123;<br>    flatDir &#123; dirs <span class="hljs-string">&#x27;libs&#x27;</span> &#125;<br>&#125;<br>compile(<span class="hljs-attr">name:</span><span class="hljs-string">&#x27;aarName&#x27;</span>, <span class="hljs-attr">ext:</span><span class="hljs-string">&#x27;aar&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>我尝试了很多次,没有成功.</p><h2 id="亲测有效方案"><a href="#亲测有效方案" class="headerlink" title="亲测有效方案"></a>亲测有效方案</h2><p>采用了以下方法成功了,和上面的内容一致,只是位置不一样.</p><ol><li><p><strong>project</strong> 目录下新建一个目录 aars(名字应该随意),新建的 aars 文件夹是用来存放需要 aar 包的.</p></li><li><p>在 <strong>project</strong> 下的 build.gradle 中添加代码.</p></li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy">allprojects &#123;<br>    repositories &#123;<br>        jcenter()<br>        <span class="hljs-comment">//为了添加aar依赖</span><br>        flatDir &#123;<br>            dirs <span class="hljs-string">&#x27;../aars&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意: 是在根目录下的 build.gradle 文件中修改,添加的节点是在 <strong>allprojects</strong> 的 <strong>repositories</strong> 下.</p><ol start="3"><li>在需要引用的地方添加引用,格式如下.</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><br>compile(<span class="hljs-attr">name:</span><span class="hljs-string">&#x27;aarNameWithoutExtention&#x27;</span>, <span class="hljs-attr">ext:</span><span class="hljs-string">&#x27;aar&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>添加依赖,依赖的格式是 aar 包文件的名字(不带后缀),ext 注明后缀即可.</p><p>采取如上步骤之后,即可成功添加依赖.</p>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
      <category>Gradle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDMS_Threads的简单使用</title>
    <link href="/2016/07/20/DDMS-Threads/"/>
    <url>/2016/07/20/DDMS-Threads/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录在 DDMS 如何查看线程的状态,以及状态表达的含义.</p><span id="more"></span><h1 id="使用-DDMS-查看进程中的线程状态"><a href="#使用-DDMS-查看进程中的线程状态" class="headerlink" title="使用 DDMS 查看进程中的线程状态"></a>使用 DDMS 查看进程中的线程状态</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>DDMS(Dalvik Debug Monitor Service),是 Android 开发的调试工具。</p><h2 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h2><p>在 Android 系统中每个应用都是在单独的一个进程中运行，DDMS 可以将一个进程通过 adb 和 IDE 连接，进行调试。</p><h2 id="面板讲解"><a href="#面板讲解" class="headerlink" title="面板讲解"></a>面板讲解</h2><p><img src="https://github.com/tinggengyan/tinggengyan.github.io/blob/source/imgur/ddms_panel.png?raw=true" alt="DDMS面板"></p><h3 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h3><p>在左侧选中想要监控的进程，点击上方左起第五个图标(Update Threads) ,在对应的右侧打开 Threads 面板，就可以看到当前进程中的 线程状态。</p><h4 id="字段讲解"><a href="#字段讲解" class="headerlink" title="字段讲解"></a>字段讲解</h4><blockquote><ul><li>ID: 线程ID，是当前进程分配的唯一的线程ID.在 Dalvik 虚拟机中，这些值是从奇数3开始计数。</li><li>Tid: Linux 线程 ID， 对于一个进程的主线程而言，这个 ID 对应了进程 ID 。</li><li>Status: 该线程在进程中的状态，守护进程(Daemon thread)前面被标记了一个星号 ( * ) 。状态可取的值:</li></ul></blockquote><ul><li>running: 正在运行的线程。</li><li>sleeping: 休眠的，等待被唤醒的线程。</li><li>monitor: 监视，正在等待获取一个监控锁。</li><li>wait: 执行了wait方法，释放了对象锁。</li><li>native: 正在执行 native 代码。</li><li>vmwait: 正在等待虚拟机的资源。</li><li>zombie: 僵尸线程，即将销往的进程的线程。</li><li>init : 初始化中的线程(理论上不应该看得到)</li><li>starting : 即将启动的线程(理论上不应该看得到)</li></ul><blockquote><ul><li>utime: 花费在用户代码所花的累计时间，一小会儿(通常是10ms)。只有在linux环境下，才能看到。PS:windows 下。 DDMS 看得到，不知道他这里有啥特别的含义。</li><li>stime : 花费在系统代码上的累计时间，一小会儿(通常是10ms)。</li><li>Name: 线程名。</li></ul></blockquote><p>“ID” 和 “Name”  是在线程启动的时候被设置的。其他的字段是每过一段时间就更新一下(默认是4秒)</p><hr><h3 id="VM-Heap"><a href="#VM-Heap" class="headerlink" title="VM Heap"></a>VM Heap</h3><p>展示一些堆的统计数据，在 gc 的过程中会进程更新。如果选中一个 进程的时候，堆信息视图提示堆更新不可用，点击工具栏左上角的 “Show heap updates” 按钮，再回到 VM 堆视图，点击 “Cause GC” 进行垃圾回收，更新堆统计信息。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.linuxtopia.org/online_books/android/devguide/guide/developing/tools/ddms.html">Using Dalvik Debug Monitor Service (DDMS)</a></p>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
      <category>IDE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DDMS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notification_之利用TaskStackBuilder返回App主页</title>
    <link href="/2016/07/13/Notification-1/"/>
    <url>/2016/07/13/Notification-1/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录点击 Notification ,然后停留在 APP 内,而不是返回主页.</p><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景:"></a>背景:</h1><p>一个App会通过通知(Notification)的形式推广自己产品的内容，点击通知，想要看到推送的详情页，点击返回的时候，我们想让用户返回的是App的主页，而不是桌面。这样可以提高转化率等。以前的实现方式是通过重写了每个activity的返回键的响应，现在可以通过TaskStackBuilder 来实现。在网上查看了很多资料，真正正确的倒是没找到。</p><h2 id="TaskStackBuilder-简介"><a href="#TaskStackBuilder-简介" class="headerlink" title="TaskStackBuilder 简介"></a>TaskStackBuilder 简介</h2><p>Utility class for constructing synthetic back stacks for cross-task navigation on Android 3.0 and newer.是一个能够构造返回栈，来实现跨task导航的一个工具类。因为可以构造任务栈，所以，我们可以轻松的实现一个activity返回的上一个任务是什么。</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>1.首先创建一个点击了notification之后跳转到的详情页的intent对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Intent resultIntent = <span class="hljs-keyword">new</span> Intent(<span class="hljs-keyword">this</span>, ResultActivity.class);<br></code></pre></td></tr></table></figure><p>2.在manifest中声明详情页ResultActivity的栈中前一个activity，声明的这个activity就是详情页点击返回键所要跳转的activity。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> </span><br><span class="hljs-tag"><span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;cn.steve.notification.ResultActivity&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">android:parentActivityName</span>=<span class="hljs-string">&quot;cn.steve.notification.NotificationHandlerActivity&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.support.PARENT_ACTIVITY&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;cn.steve.notification.NotificationHandlerActivity&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建一个PendingIntent对象，这个是创建notification的必备。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">PendingIntent pendingIntent = TaskStackBuilder.create(<span class="hljs-keyword">this</span>)<br>           .addNextIntentWithParentStack(resultIntent)<br>           .getPendingIntent(<span class="hljs-number">0</span>, PendingIntent.FLAG_UPDATE_CURRENT);<br></code></pre></td></tr></table></figure><ol start="4"><li>剩下的就是正常的启动一个notification了。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// new notification</span><br>NotificationCompat.Builder mBuilder = <span class="hljs-keyword">new</span> NotificationCompat.Builder(<span class="hljs-keyword">this</span>);<br>mBuilder.setSmallIcon(android.R.drawable.ic_dialog_email);<br>mBuilder.setContentTitle(<span class="hljs-string">&quot;My Notification!&quot;</span>);<br>mBuilder.setContentText(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>mBuilder.setContentIntent(pendingIntent);<br><br>NotificationManager mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);<br>mNotificationManager.notify(<span class="hljs-number">0</span>, mBuilder.build());<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>实现的要点在于notification的设置。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notification</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Service之IntentService</title>
    <link href="/2016/07/02/Service%E4%B9%8BIntentService/"/>
    <url>/2016/07/02/Service%E4%B9%8BIntentService/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录 IntentService 的使用方式,以及可能产生的问题.</p><span id="more"></span><h1 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h1><p>关于IntentService本身的使用很简单，官方的解释也说的很清楚。IntentService是Service类的子类，用来处理异步请求。和正常启动一个Service一样，可以通过startService(Intent)方法启动一个IntentService，同时通过Intent传递数据。IntentService在onCreate()函数中通过HandlerThread开启一个线程来处理Intent请求对象，这样就可以在非主线程执行任务。这里处理消息的时候，也是通过为新创建的线程新建了Handler和Looper对象从消息队列中取出消息进行执行。处理每个Intent所对应的事务都需要调用 onHandleIntent 这个抽象方法。所以，将对不同任务的不同操作通过实现 onHandleIntent 方法就可完成。<br>执行完这个任务(Intent)就会自动停止 Service 。这里有一点需要注意，如果这个任务的执行本身就是异步的，所以，假如添加的任务也是异步的，很难保证能正常执行结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServiceHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Handler</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ServiceHandler</span><span class="hljs-params">(Looper looper)</span> </span>&#123;<br>            <span class="hljs-keyword">super</span>(looper);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(Message msg)</span> </span>&#123;<br>            onHandleIntent((Intent)msg.obj);<br>            stopSelf(msg.arg1);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>从代码可以看出，每执行一次onHandleIntent 都会调用执行 stopSelf 来停止当前的service。也就是假如子类实现的 onHandleIntent 中执行的是异步任务，异步任务可能得不到预期的结果。</p><p>举个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startActionBaz</span><span class="hljs-params">(Context context, String param1, String param2)</span> </span>&#123;<br>    Intent intent = <span class="hljs-keyword">new</span> Intent(context, MyIntentService.class);<br>    intent.setAction(ACTION_BAZ);<br>    intent.putExtra(EXTRA_PARAM1, param1);<br>    intent.putExtra(EXTRA_PARAM2, param2);<br>    context.startService(intent);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onDestroy();<br>    Log.d(TAG, <span class="hljs-string">&quot;onDestroy() dead&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onHandleIntent</span><span class="hljs-params">(Intent intent)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (intent != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">final</span> String action = intent.getAction();<br>      <span class="hljs-keyword">if</span> (ACTION_BAZ.equals(action)) &#123;<br>        <span class="hljs-keyword">final</span> String param1 = intent.getStringExtra(EXTRA_PARAM1);<br>        <span class="hljs-keyword">final</span> String param2 = intent.getStringExtra(EXTRA_PARAM2);<br>        handleActionBaz(param1, param2);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleActionBaz</span><span class="hljs-params">(String param1, String param2)</span> </span>&#123;<br>    Log.d(TAG, <span class="hljs-string">&quot;handleActionBaz() called with: &quot;</span> + <span class="hljs-string">&quot;param1 = [&quot;</span> + param1 + <span class="hljs-string">&quot;], param2 = [&quot;</span> + param2 + <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">//这里的代码是无法执行的。</span><br>          Thread.sleep(<span class="hljs-number">3000</span>);<br>          Log.d(TAG, <span class="hljs-string">&quot;handleActionBaz() called at Thread&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>          e.printStackTrace();<br>        &#125;<br>      &#125;<br>    &#125;);<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>以上代码中的 Runnable 中的代码是不会执行的。</p><p>看下启动两次 IntentService 的log输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">07</span>-<span class="hljs-number">02</span> <span class="hljs-number">10</span>:<span class="hljs-number">04</span>:<span class="hljs-number">03.799</span> <span class="hljs-number">4785</span>-<span class="hljs-number">4785</span>/cn.steve.study D/MyIntentService: MyIntentService() called with: cn.steve.service.MyIntentService<span class="hljs-meta">@f26cde3</span><br><span class="hljs-number">07</span>-<span class="hljs-number">02</span> <span class="hljs-number">10</span>:<span class="hljs-number">04</span>:<span class="hljs-number">03.811</span> <span class="hljs-number">4785</span>-<span class="hljs-number">5288</span>/cn.steve.study D/MyIntentService: handleActionBaz() called with: param1 = [], param2 = []<br><span class="hljs-number">07</span>-<span class="hljs-number">02</span> <span class="hljs-number">10</span>:<span class="hljs-number">04</span>:<span class="hljs-number">03.840</span> <span class="hljs-number">4785</span>-<span class="hljs-number">4785</span>/cn.steve.study D/MyIntentService: onDestroy() dead<br><span class="hljs-number">07</span>-<span class="hljs-number">02</span> <span class="hljs-number">10</span>:<span class="hljs-number">04</span>:<span class="hljs-number">04.079</span> <span class="hljs-number">4785</span>-<span class="hljs-number">4785</span>/cn.steve.study D/MyIntentService: MyIntentService() called with: cn.steve.service.MyIntentService@47d6d5e<br><span class="hljs-number">07</span>-<span class="hljs-number">02</span> <span class="hljs-number">10</span>:<span class="hljs-number">04</span>:<span class="hljs-number">04.089</span> <span class="hljs-number">4785</span>-<span class="hljs-number">5293</span>/cn.steve.study D/MyIntentService: handleActionBaz() called with: param1 = [], param2 = []<br><span class="hljs-number">07</span>-<span class="hljs-number">02</span> <span class="hljs-number">10</span>:<span class="hljs-number">04</span>:<span class="hljs-number">04.114</span> <span class="hljs-number">4785</span>-<span class="hljs-number">4785</span>/cn.steve.study D/MyIntentService: onDestroy() dead<br></code></pre></td></tr></table></figure><p>发现每次都是新建 IntentService 对象，执行完后就会销往。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>系统为我们提供这个 IntentService 能在完成任务后自动停止销往，不需要我们手动停止，但是这个特性只能对一些简单的同步任务而已，对于异步任务，还是需要我们手动去 stop 。</p>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Service</tag>
      
      <tag>IntentService</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个例子说明如何使用  RxJava 进行线程切换</title>
    <link href="/2016/06/14/RxJavaThreadDemo/"/>
    <url>/2016/06/14/RxJavaThreadDemo/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文仅作记录如何在上层使用代码进行 RxJava 的线程切换.</p><span id="more"></span><h1 id="RxJava-线程管理"><a href="#RxJava-线程管理" class="headerlink" title="RxJava 线程管理"></a>RxJava 线程管理</h1><p>RxJava 中通过两个关键的方法 subscribeOn 和 observeOn 实现线程的切换，都说 RxJava 是可以任性的随意切换线程，到底可以多任性呢，在哪任性呢，代码上怎么体现呢？下面通过一个非常简单的例子<br>演示一下如何使用，源码讨论请移步另一篇文章。</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//验证多线程切换的情况</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">multiThreadSwitch</span><span class="hljs-params">()</span> </span>&#123;<br>        Observable.create(<span class="hljs-keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> String&gt; subscriber)</span> </span>&#123;<br>                <span class="hljs-comment">//受subscribeOn的影响，另起一个线程</span><br>                Log.e(TAG, <span class="hljs-string">&quot;create &quot;</span> + Thread.currentThread().toString());<br>                subscriber.onNext(<span class="hljs-string">&quot;hello world&quot;</span>);<br>            &#125;<br>        &#125;)<br>            .subscribeOn(Schedulers.newThread())<br><br>            .doOnSubscribe(<span class="hljs-keyword">new</span> Action0() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>                    <span class="hljs-comment">//和上一个doOnSubscribe运行在同一个线程中,因为中间并未切换线程</span><br>                    Log.e(TAG, <span class="hljs-string">&quot;doOnSubscribe4 &quot;</span> + Thread.currentThread().toString());<br>                &#125;<br>            &#125;)<br>            .doOnSubscribe(<span class="hljs-keyword">new</span> Action0() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>                    <span class="hljs-comment">//受subscribeOn的影响，另起一个线程</span><br>                    Log.e(TAG, <span class="hljs-string">&quot;doOnSubscribe3 &quot;</span> + Thread.currentThread().toString());<br>                &#125;<br>            &#125;)<br>            .subscribeOn(Schedulers.newThread())<br><br>            .map(<span class="hljs-keyword">new</span> Func1&lt;String, String&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                    <span class="hljs-comment">//和create在同一个线程执行</span><br>                    Log.e(TAG, <span class="hljs-string">&quot;map1 &quot;</span> + Thread.currentThread().toString());<br>                    <span class="hljs-keyword">return</span> s;<br>                &#125;<br>            &#125;)<br>            .observeOn(Schedulers.newThread())<br><br>            .doOnSubscribe(<span class="hljs-keyword">new</span> Action0() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>                    <span class="hljs-comment">//受subscribeOn的影响，另起一个线程</span><br>                    Log.e(TAG, <span class="hljs-string">&quot;doOnSubscribe2 &quot;</span> + Thread.currentThread().toString());<br>                &#125;<br>            &#125;)<br>            .map(<span class="hljs-keyword">new</span> Func1&lt;String, String&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                    <span class="hljs-comment">//受observeOn的影响，另起一个线程</span><br>                    Log.e(TAG, <span class="hljs-string">&quot;map2 &quot;</span> + Thread.currentThread().toString());<br>                    <span class="hljs-keyword">return</span> s;<br>                &#125;<br>            &#125;)<br>            .subscribeOn(Schedulers.newThread())<br><br>            .doOnSubscribe(<span class="hljs-keyword">new</span> Action0() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>                    <span class="hljs-comment">//作为消息发送发送的第一站，没有通过subscribeOn指定发送消息的线程，故而这个会在调用subscribe方法的线程上执行,这里是主线程</span><br>                    Log.e(TAG, <span class="hljs-string">&quot;doOnSubscribe1 &quot;</span> + Thread.currentThread().toString());<br>                &#125;<br>            &#125;)<br><br>            .observeOn(Schedulers.newThread())<br>            .subscribe(<span class="hljs-keyword">new</span> Action1&lt;String&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                    <span class="hljs-comment">// 受observeOn的影响，另起一个线程</span><br>                    <span class="hljs-comment">// 假如没有observeOn，则运行在离这 最近 的observeOn，或者 最远(物理位置最远，按照消息自下往上的顺序，其实也是最近) 的subscribeOn线程上</span><br>                    Log.e(TAG, <span class="hljs-string">&quot;subscribe &quot;</span> + Thread.currentThread().toString());<br>                &#125;<br>            &#125;);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h2><p>对于直接运行测试代码，产生的log日志是如下的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">36</span>:<span class="hljs-number">09.315</span> <span class="hljs-number">5471</span>-<span class="hljs-number">5471</span>/ cn.steve.study E/RXJavaActivity: doOnSubscribe1 Thread[main,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">36</span>:<span class="hljs-number">09.319</span> <span class="hljs-number">5471</span>-<span class="hljs-number">12993</span>/cn.steve.study E/RXJavaActivity: doOnSubscribe2 Thread[RxNewThreadScheduler-<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">36</span>:<span class="hljs-number">09.323</span> <span class="hljs-number">5471</span>-<span class="hljs-number">12995</span>/cn.steve.study E/RXJavaActivity: doOnSubscribe3 Thread[RxNewThreadScheduler-<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">36</span>:<span class="hljs-number">09.323</span> <span class="hljs-number">5471</span>-<span class="hljs-number">12995</span>/cn.steve.study E/RXJavaActivity: doOnSubscribe4 Thread[RxNewThreadScheduler-<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">36</span>:<span class="hljs-number">09.327</span> <span class="hljs-number">5471</span>-<span class="hljs-number">12996</span>/cn.steve.study E/RXJavaActivity: create Thread[RxNewThreadScheduler-<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">36</span>:<span class="hljs-number">09.327</span> <span class="hljs-number">5471</span>-<span class="hljs-number">12996</span>/cn.steve.study E/RXJavaActivity: map1 Thread[RxNewThreadScheduler-<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">36</span>:<span class="hljs-number">09.329</span> <span class="hljs-number">5471</span>-<span class="hljs-number">12994</span>/cn.steve.study E/RXJavaActivity: map2 Thread[RxNewThreadScheduler-<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">36</span>:<span class="hljs-number">09.331</span> <span class="hljs-number">5471</span>-<span class="hljs-number">12992</span>/cn.steve.study E/RXJavaActivity: subscribe Thread[RxNewThreadScheduler-<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,main]<br><br></code></pre></td></tr></table></figure><p>对于去掉两个observeOn，产生的log日志是如下的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">43</span>:<span class="hljs-number">42.001</span> <span class="hljs-number">18160</span>-<span class="hljs-number">18160</span>/cn.steve.study E/RXJavaActivity: doOnSubscribe1 Thread[main,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">43</span>:<span class="hljs-number">42.002</span> <span class="hljs-number">18160</span>-<span class="hljs-number">19180</span>/cn.steve.study E/RXJavaActivity: doOnSubscribe2 Thread[RxNewThreadScheduler-<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">43</span>:<span class="hljs-number">42.006</span> <span class="hljs-number">18160</span>-<span class="hljs-number">19181</span>/cn.steve.study E/RXJavaActivity: doOnSubscribe3 Thread[RxNewThreadScheduler-<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">43</span>:<span class="hljs-number">42.006</span> <span class="hljs-number">18160</span>-<span class="hljs-number">19181</span>/cn.steve.study E/RXJavaActivity: doOnSubscribe4 Thread[RxNewThreadScheduler-<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">43</span>:<span class="hljs-number">42.023</span> <span class="hljs-number">18160</span>-<span class="hljs-number">19182</span>/cn.steve.study E/RXJavaActivity: create Thread[RxNewThreadScheduler-<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">43</span>:<span class="hljs-number">42.024</span> <span class="hljs-number">18160</span>-<span class="hljs-number">19182</span>/cn.steve.study E/RXJavaActivity: map1 Thread[RxNewThreadScheduler-<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">43</span>:<span class="hljs-number">42.024</span> <span class="hljs-number">18160</span>-<span class="hljs-number">19182</span>/cn.steve.study E/RXJavaActivity: map2 Thread[RxNewThreadScheduler-<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,main]<br><span class="hljs-number">06</span>-<span class="hljs-number">14</span> <span class="hljs-number">16</span>:<span class="hljs-number">43</span>:<span class="hljs-number">42.024</span> <span class="hljs-number">18160</span>-<span class="hljs-number">19182</span>/cn.steve.study E/RXJavaActivity: subscribe Thread[RxNewThreadScheduler-<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,main]<br><br></code></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这里约定一下描述的规则，我们接下来讲的远近，上下指的是代码物理位置上。<br>响应式编程有个消息的概念，这里消息的产生是从下往上的，当调用了subscribe 的时候，就会产生，接着往上，我们可以通过代码和log可以看出，依次执行了 doOnSubscribe1 -  doOnSubscribe4，最后到达create处。<br>对于数据流，则是从上往下的，经过每个继承 lift 产生的操作符，例如map, reduce,filter等。</p><h3 id="所以"><a href="#所以" class="headerlink" title="所以"></a>所以</h3><ul><li><p>要想指定create所在的线程，需要在create的下方调用 subscribeOn 方法，他受他下方遇到的第一个 subscribeOn 的影响，反正也可以说subscribeOn影响的是在他上方的消息传递的线程，直到遇到下一个subscribeOn为止。假如全程没有一处调用subscribeOn，则消息的传递是在调用subscribe所在的线程。</p></li><li><p>要想指定 map 等lift操作符和Subscriber中的执行线程，则需要在它上方调用observeOn方法；反之observeOn影响的是他下方的lift操作符直到遇到下一个observeOn位置。假如整个代码中未指明observeOn方法，则运行在整个代码中第一个subscribeOn指定的线程，也可以理解成运行在create所在的线程。</p></li><li><p>至于二者均未指定，则可以推导出运行在调用subscribe所在的线程。</p></li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>至于源码解释参见另外一篇。</p>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RxJava</tag>
      
      <tag>Source</tag>
      
      <tag>Thread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>androidarchitecture</title>
    <link href="/2016/04/08/androidarchitecture/"/>
    <url>/2016/04/08/androidarchitecture/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录 Android 官方关于项目架构的文章.</p><span id="more"></span><h1 id="Android-Architecture-Blueprints-beta"><a href="#Android-Architecture-Blueprints-beta" class="headerlink" title="Android Architecture Blueprints [beta]"></a><a href="https://github.com/googlesamples/android-architecture">Android Architecture Blueprints [beta]</a></h1><p>当我们开始明确如何组织和架构一个AndroidApp的时候，Android Framework层提供了很强大的可伸缩性。<br>这份自由虽然很有价值，但是同时也导致一个APP内存在如过重的类，命名体系不一样，架构导致难以测试，维护和扩展苦难等问题。</p><p>Android架构蓝图打算演示解决这类通用问题可能的方法。<br>在这个项目中，我们会提供一个机遇不同架构概念和不同工具的同一个项目实现。</p><p>你可以使用这些例子作为你创建自己的APP的一个参考，或者直接作为一个基础。本篇集中于代码结构，架构，测试和维护性。<br>然而，铭记于心的是，利用这些架构和工具，创建一个APP有很多方式，取决于你的侧重点。所以，这些架构不应该被当做是经典案例。<br>本篇例子中UI刻意保持了简单。</p><h1 id="beat版的意义"><a href="#beat版的意义" class="headerlink" title="beat版的意义"></a>beat版的意义</h1><p>我们一直在做一些可能会影响我们所有例子的决定。所以我们会在发布正式版之前，一直保持初始化的版本号。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>所有的例子都发布在他们对应的分支上。查看对应项目上看的README 以获取详细信息。</p><p>-todo-mvp/- 基本的MVP架构<br>-todo-mvp-loaders/- 基于todo-mvp，使用loaders来获取数据<br>-todo-mvp-databinding/-基于odo-mvp，使用databinding库</p><h2 id="还在进行中的"><a href="#还在进行中的" class="headerlink" title="还在进行中的"></a>还在进行中的</h2><ul><li>todo-mvp-contentproviders - 基于todo-mvp-loaders, 使用Content Providers</li><li>todo-mvp-clean - 基于todo-mvp, 使用Clean Architecture的概念</li><li>todo-mvp-dagger - 基于todo-mvp, 使用Dagger2来进行依赖注入</li></ul><p>此外，还有很多计划中的例子。</p><h1 id="为何是一个待做的项目"><a href="#为何是一个待做的项目" class="headerlink" title="为何是一个待做的项目"></a>为何是一个待做的项目</h1><p>这个APP的目的是能够简单快速的理解，而不是增加演示这个复杂的设计和测试方案的复杂性。<br>可以查看这个APP的规格。</p><p>此外，还有一个类似的JavaScript的项目框架，叫TodoMVC。</p><h1 id="我应该为我的APP选择哪个例子"><a href="#我应该为我的APP选择哪个例子" class="headerlink" title="我应该为我的APP选择哪个例子"></a>我应该为我的APP选择哪个例子</h1><p>每个例子，都有一个选择的尺度，和比较客观的评估，你可以根据你的实际情况选择。</p><p>你可能要考虑到你APP的大小，你整个团队的经验，你预估的维护成本，考虑你是否需要为平板，多平台适配，以及自己的框架偏好。</p><h1 id="TODO-MVP"><a href="#TODO-MVP" class="headerlink" title="TODO-MVP"></a><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/">TODO-MVP</a></h1><h2 id="总概"><a href="#总概" class="headerlink" title="总概"></a>总概</h2><p>这个例子是其他变种版本的基础。这个例子展示MVP模式的一个简单的实现，没有参杂其他的架构框架。<br>这个例子，使用手动注入依赖的方式来提供本地和远端的数据。异步的任务是通过callback实现的。</p><p><img src="https://github.com/googlesamples/android-architecture/wiki/images/mvp.png" alt="示例图"></p><p>注意：在MVP的上下文中，属于view是被重新重载了。<br>android.view.View被称作”Android View”,在MVP中接受presenter发送命令的view被简单的称为”view”.</p><h2 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h2><p>使用fragment有两个理由：<br>activity和fragment进行隔离，非常适合用来实现MVP。</p><ul><li>activity作为一个控制器，用来创建和控制view和presenter。</li><li>可以充分利用fragment框架进行平板和多屏幕适配。</li></ul><h2 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h2><p>在这个APP中有四个特点：<br>任务<br>任务详细<br>添加编辑任务<br>数据统计</p><p>每个特点有:</p><ul><li>约定view和presenter的定义</li><li>activity负责产生fragment和presenter</li><li>fragment实现view中的接口</li><li>presenter实现presenter定义的接口</li></ul><p>总之，业务逻辑在presenter中，并且依赖于实现UI工作的view。<br>view层几乎是不包含业务逻辑的，只负责将presenter中的UI指令转换成UI表现，并且监听用户的UI操作，然后传递给presenter层。<br>通过接口来约定view和presenter之间的连接。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li>常用的Android官方support包(com.android.support.*)</li><li>Android测试包(Espresso, AndroidJUnitRunner…)</li><li>Mockito</li><li>Guava (null checking)</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="复杂性-这个比较容易理解"><a href="#复杂性-这个比较容易理解" class="headerlink" title="复杂性 - 这个比较容易理解"></a>复杂性 - 这个比较容易理解</h3><h4 id="frameworks-libraries-tools的框架使用"><a href="#frameworks-libraries-tools的框架使用" class="headerlink" title="frameworks/libraries/tools的框架使用"></a>frameworks/libraries/tools的框架使用</h4><p>还没有</p><h4 id="概念复杂性"><a href="#概念复杂性" class="headerlink" title="概念复杂性"></a>概念复杂性</h4><p>这个比较低，作为一个纯MVP实现。</p><h3 id="可测试性"><a href="#可测试性" class="headerlink" title="可测试性"></a>可测试性</h3><h4 id="Unit-testing"><a href="#Unit-testing" class="headerlink" title="Unit testing"></a>Unit testing</h4><p>高，presenter可以作为仓库和数据源进行单元测试。</p><h4 id="UI-testing"><a href="#UI-testing" class="headerlink" title="UI testing"></a>UI testing</h4><p>高, 注入一个假的的module，允许进行假数据进行测试。</p><h3 id="Code-metrics"><a href="#Code-metrics" class="headerlink" title="Code metrics"></a>Code metrics</h3><p>和传统没有架构的项目相比，<br>这个例子简绍了额外的类和接口:presenter，仓库，接口等等，所以在MVP中无论是代码的行数还是类的数量都比较高。</p><h3 id="维护性"><a href="#维护性" class="headerlink" title="维护性"></a>维护性</h3><h4 id="易于修改和添加新特性"><a href="#易于修改和添加新特性" class="headerlink" title="易于修改和添加新特性"></a>易于修改和添加新特性</h4><p>高。</p><h4 id="学习成本"><a href="#学习成本" class="headerlink" title="学习成本"></a>学习成本</h4><p>低。项目特点明确，责任清晰明确。开发人员不需要了解项目中的外部依赖。</p>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>architecture</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RxJava源码解析(一)</title>
    <link href="/2016/03/04/RxJavaEssential1/"/>
    <url>/2016/03/04/RxJavaEssential1/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文目的是从源码的角度讲解 Rxjava 的重要概念 Observable.</p><span id="more"></span><h1 id="RxJava要点解析"><a href="#RxJava要点解析" class="headerlink" title="RxJava要点解析"></a>RxJava要点解析</h1><p>对于 Rxjava 还是有很多不理解的地方，加上又有点好奇心，就看看源码，记录在此，水平有限，肯定存在错误的地方，望路过的同行不吝赐教。</p><h2 id="lift变换操作的原理"><a href="#lift变换操作的原理" class="headerlink" title="lift变换操作的原理"></a>lift变换操作的原理</h2><p>看下lift源码,直接拷贝的源码，未做删减。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> &lt;R&gt; <span class="hljs-function">Observable&lt;R&gt; <span class="hljs-title">lift</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Operator&lt;? extends R, ? <span class="hljs-keyword">super</span> T&gt; operator)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Observable&lt;R&gt;(<span class="hljs-keyword">new</span> OnSubscribe&lt;R&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> R&gt; o)</span> </span>&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; st = hook.onLift(operator).call(o);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// new Subscriber created and being subscribed with so &#x27;onStart&#x27; it</span><br>                        st.onStart();<br>                        onSubscribe.call(st);<br>                    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                        <span class="hljs-comment">// localized capture of errors rather than it skipping all operators</span><br>                        <span class="hljs-comment">// and ending up in the try/catch of the subscribe method which then</span><br>                        <span class="hljs-comment">// prevents onErrorResumeNext and other similar approaches to error handling</span><br>                        Exceptions.throwIfFatal(e);<br>                        st.onError(e);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                    Exceptions.throwIfFatal(e);<br>                    <span class="hljs-comment">// if the lift function failed all we can do is pass the error to the final Subscriber</span><br>                    <span class="hljs-comment">// as we don&#x27;t have the operator available to us</span><br>                    o.onError(e);<br>                &#125;<br>            &#125;<br>        &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p> 为了弄懂，而且变量不多，我们一个变量一个变量的看。</p><ul><li><p>lift内部返回的是一个新建的observable，此时产生了一个新的OnSubscribe，此时的OnSubscribe的call方法内传入的Subscriber<br>变量o就是我们写在代码中的订阅者。</p></li><li><p>hook.onLift(operator).call(o);新建了一个Subscriber变量st，这个变量用的是我们传入的Subscriber变量o。<br>而且还是用的operator创建的，我们先不管如何实现的，待会儿我们看看这个是怎么实现的。</p></li><li><p>onSubscribe.call(st);这个onSubscribe是个final类型，因为目前我们还是处于方法内，所以这个onSubscribe还是源observable<br>的onSubscribe对象(比如我们自己写的发射时机等那段代码),这个时候onSubscribe会调用它的call方法，传入的是我们新建的Subscriber变量st。<br>接下来，新的Subscriber变量st会接收到源observable发送来的数据。我们可以自然得想到，这个新的st肯定会经过operator对象中的一些定义的方法对数据操作后，又发送到了我们传入的Subscriber变量o，实现整体的连接。</p><p>其实说白了，我们其实是在中间创建了一个代理。hook的意思不就是钩子嘛。</p><p>接下来来看刚刚未能解决的疑问，hook是怎么工作的。</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T, R&gt; Operator&lt;? extends R, ? <span class="hljs-keyword">super</span> T&gt; onLift(<span class="hljs-keyword">final</span> Operator&lt;? extends R, ? <span class="hljs-keyword">super</span> T&gt; lift) &#123;<br>       <span class="hljs-keyword">return</span> lift;<br>   &#125;<br></code></pre></td></tr></table></figure><p>  我们看到，并未做任何变化，直接将operator变换直接返回了。</p><p>  接着我们继续看，以filter为例。<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Observable&lt;T&gt; <span class="hljs-title">filter</span><span class="hljs-params">(Func1&lt;? <span class="hljs-keyword">super</span> T, Boolean&gt; predicate)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> lift(<span class="hljs-keyword">new</span> OperatorFilter&lt;T&gt;(predicate));<br>    &#125;<br></code></pre></td></tr></table></figure></p><p> 传入的是一个 OperatorFilter 对象。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperatorFilter</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Operator</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Func1&lt;? <span class="hljs-keyword">super</span> T, Boolean&gt; predicate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OperatorFilter</span><span class="hljs-params">(Func1&lt;? <span class="hljs-keyword">super</span> T, Boolean&gt; predicate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.predicate = predicate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; call(<span class="hljs-keyword">final</span> Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; child) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Subscriber&lt;T&gt;(child) &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;<br>                child.onCompleted();<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;<br>                child.onError(e);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(T t)</span> </span>&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (predicate.call(t)) &#123;<br>                        child.onNext(t);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// TODO consider a more complicated version that batches these</span><br>                        request(<span class="hljs-number">1</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                    Exceptions.throwOrReport(e, child, t);<br>                &#125;<br>            &#125;<br><br>        &#125;;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> 变量predicate就是我们自己定义的过滤规则，在上面的代码中我们已经看到了，call传入的child就是我们上面分析，我们自己定义的变量o。</p><p> 这下基本清晰了，每次源observable发射的数据都被OperatorFilter内新的subscriber给接收了，然后根据传入到OperatorFilter我们自己定义的过滤规则进行判断，通过的，就给child发射过去，这样实现了过滤的作用，实现了新的subscriber将数据传送到了我们自定义的subscriber。</p><h2 id="Scheduler-线程切换的原理"><a href="#Scheduler-线程切换的原理" class="headerlink" title="Scheduler 线程切换的原理"></a>Scheduler 线程切换的原理</h2><p>注意：以下的版本是rxjava1.1.1(上下两部分的总结时间不一样，也不去考证是哪个版本了)<br>上面说到了变换的时候，用到的线程的切换的问题，那到底是怎么切换的线程呢？<br>说到线程切换，必须说到两个操作。</p><ul><li>subscribeOn：指定observable调用obsubsriber发射数据所在的线程。</li><li>observeOn： 指定订阅者进行订阅处理所在的线程。</li></ul><h3 id="subscribeOn分析"><a href="#subscribeOn分析" class="headerlink" title="subscribeOn分析"></a>subscribeOn分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Observable&lt;T&gt; <span class="hljs-title">subscribeOn</span><span class="hljs-params">(Scheduler scheduler)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> <span class="hljs-keyword">instanceof</span> ScalarSynchronousObservable) &#123;<br>            <span class="hljs-keyword">return</span> ((ScalarSynchronousObservable&lt;T&gt;)<span class="hljs-keyword">this</span>).scalarScheduleOn(scheduler);<br>        &#125;<br>        <span class="hljs-keyword">return</span> create(<span class="hljs-keyword">new</span> OperatorSubscribeOn&lt;T&gt;(<span class="hljs-keyword">this</span>, scheduler));<br>&#125;<br></code></pre></td></tr></table></figure><p>以上是subscribeOn的源码，传入了指定的发送数据所在的线程Scheduler对象。判断当前的observable是否是一个ScalarSynchronousObservable，这个ScalarSynchronousObservable对象就是直接发射传入数据的对象，就是我们平时使用just所产生的对象。</p><ul><li> 如果是，则调用将scheduler传入scalarScheduleOn方法，创建一个新的Observable作为返回值。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Observable&lt;T&gt; <span class="hljs-title">scalarScheduleOn</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Scheduler scheduler)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Func1&lt;Action0, Subscription&gt; onSchedule;<br>        <span class="hljs-keyword">if</span> (scheduler <span class="hljs-keyword">instanceof</span> EventLoopsScheduler) &#123;<br>            onSchedule = COMPUTATION_ONSCHEDULE;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            onSchedule = <span class="hljs-keyword">new</span> Func1&lt;Action0, Subscription&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> Subscription <span class="hljs-title">call</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Action0 a)</span> </span>&#123;<br>                    <span class="hljs-keyword">final</span> Scheduler.Worker w = scheduler.createWorker();<br>                    w.schedule(<span class="hljs-keyword">new</span> Action0() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                a.call();<br>                            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                                w.unsubscribe();<br>                            &#125;<br>                        &#125;<br>                    &#125;);<br>                    <span class="hljs-keyword">return</span> w;<br>                &#125;<br>            &#125;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> create(<span class="hljs-keyword">new</span> ScalarAsyncOnSubscribe&lt;T&gt;(t, onSchedule));<br>    &#125;<br></code></pre></td></tr></table></figure>以上是scalarScheduleOn的源码，可以看到内部是通过Func1函数进行转换的，通过传入的scheduler创建指定的线程，在指定的线程上调用Func1中传入进来的Action0。<br>那么Action0代表的又是什么呢？我们看到onSchedule又作为参数去构造ScalarAsyncOnSubscribe了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The OnSubscribe implementation that creates the ScalarAsyncProducer for each</span><br><span class="hljs-comment">     * incoming subscriber.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; the value type</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScalarAsyncOnSubscribe</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">OnSubscribe</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>        <span class="hljs-keyword">final</span> T value;<br>        <span class="hljs-keyword">final</span> Func1&lt;Action0, Subscription&gt; onSchedule;<br><br>        ScalarAsyncOnSubscribe(T value, Func1&lt;Action0, Subscription&gt; onSchedule) &#123;<br>            <span class="hljs-keyword">this</span>.value = value;<br>            <span class="hljs-keyword">this</span>.onSchedule = onSchedule;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; s)</span> </span>&#123;<br>            s.setProducer(<span class="hljs-keyword">new</span> ScalarAsyncProducer&lt;T&gt;(s, value, onSchedule));<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>根据代码注释，知道是为每个传入进来的subscriber创建一个ScalarAsyncProducer。看到这里的call方法，我们可以知道，这个call方法就是被Observable在create中被调用的call方法。在call方法里调用了Subscriber的setProducer方法，给它设置了一个ScalarAsyncProducer对象，这里的Subscriber对象s就是我们自定义的订阅者对象，接下来就看看ScalarAsyncProducer的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Represents a producer which schedules the emission of a scalar value on</span><br><span class="hljs-comment">     * the first positive request via the given scheduler callback.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; the value type</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScalarAsyncProducer</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AtomicBoolean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Producer</span>, <span class="hljs-title">Action0</span> </span>&#123;<br>        <span class="hljs-comment">/** */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">2466317989629281651L</span>;<br>        <span class="hljs-keyword">final</span> Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; actual;<br>        <span class="hljs-keyword">final</span> T value;<br>        <span class="hljs-keyword">final</span> Func1&lt;Action0, Subscription&gt; onSchedule;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ScalarAsyncProducer</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; actual, T value, Func1&lt;Action0, Subscription&gt; onSchedule)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.actual = actual;<br>            <span class="hljs-keyword">this</span>.value = value;<br>            <span class="hljs-keyword">this</span>.onSchedule = onSchedule;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0L</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;n &gt;= 0 required but it was &quot;</span> + n);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (n != <span class="hljs-number">0</span> &amp;&amp; compareAndSet(<span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>)) &#123;<br>                actual.add(onSchedule.call(<span class="hljs-keyword">this</span>));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>            Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; a = actual;<br>            <span class="hljs-keyword">if</span> (a.isUnsubscribed()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            T v = value;<br>            <span class="hljs-keyword">try</span> &#123;<br>                a.onNext(v);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                Exceptions.throwOrReport(e, a, v);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (a.isUnsubscribed()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            a.onCompleted();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ScalarAsyncProducer[&quot;</span> + value + <span class="hljs-string">&quot;, &quot;</span> + get() + <span class="hljs-string">&quot;]&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>注释上说，这个类是用来代表一个生产者，这个生产者通过给定的线程回调，在第一个激活的请求上发射数据。在具体看代码之前，我们可以根据注释大致猜到这个是充当了发射数据的生产者，并且要是能实现线程切换，应该是在作为构造参数传递进来的onSchedule上进行调用和回调的。看下里面的源码，在request方法中，这里的actual就是刚刚传入的自定义订阅者对象s,我们看到call方法中就是直接调用了actual的onNext方法，将数据传递到订阅者。<br>再看重点，request方法，有个参数n代表一次性请求的数据的数量，actual.add(onSchedule.call(this))；这个命令我们看到有调用onSchedule的call方法，那么经过这么长时间下来，这个call方法又是啥玩意？这个onSchedule就是我们在scalarScheduleOn中定义的Func1，这个也就是说在这里调用了Func1的call方法，传递进去的按理说是Action0对象，我们注意到ScalarAsyncProducer已经实现了Action0接口。也就是说这里调用了ScalarAsyncProducer(生产者)的call方法。当前ScalarAsyncProducer的call方法就是直接调用自定义订阅者的onNext发射数据。我们在上面说了Func1的call方法会在一个新建的线程中调用call方法传递进来的action0对象(就是此处实现Action0接口的ScalarAsyncProducer)的call方法。到目前为止，关于ScalarSynchronousObservable对象的线程切换的原理就分析结束了。</p><ul><li> 接下来看下，如果不是ScalarSynchronousObservable对象调用subscribeOn方法又会是什么逻辑呢？</li></ul><p>再贴下subscribeOn的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Observable&lt;T&gt; <span class="hljs-title">subscribeOn</span><span class="hljs-params">(Scheduler scheduler)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> <span class="hljs-keyword">instanceof</span> ScalarSynchronousObservable) &#123;<br>            <span class="hljs-keyword">return</span> ((ScalarSynchronousObservable&lt;T&gt;)<span class="hljs-keyword">this</span>).scalarScheduleOn(scheduler);<br>        &#125;<br>        <span class="hljs-keyword">return</span> create(<span class="hljs-keyword">new</span> OperatorSubscribeOn&lt;T&gt;(<span class="hljs-keyword">this</span>, scheduler));<br>    &#125;<br></code></pre></td></tr></table></figure><p>根据当前的observable对象和传递进来的scheduler创建了一个OperatorSubscribeOn对象，然后用这个OperatorSubscribeOn对象创建了一个新的Observable。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Subscribes Observers on the specified &#123;<span class="hljs-doctag">@code</span> Scheduler&#125;.</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * &lt;img width=&quot;640&quot; src=&quot;https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/subscribeOn.png&quot; alt=&quot;&quot;&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; the value type of the actual source</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperatorSubscribeOn</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">OnSubscribe</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">final</span> Scheduler scheduler;<br>    <span class="hljs-keyword">final</span> Observable&lt;T&gt; source;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OperatorSubscribeOn</span><span class="hljs-params">(Observable&lt;T&gt; source, Scheduler scheduler)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.scheduler = scheduler;<br>        <span class="hljs-keyword">this</span>.source = source;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; subscriber)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Worker inner = scheduler.createWorker();<br>        subscriber.add(inner);<br><br>        inner.schedule(<span class="hljs-keyword">new</span> Action0() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">final</span> Thread t = Thread.currentThread();<br><br>                Subscriber&lt;T&gt; s = <span class="hljs-keyword">new</span> Subscriber&lt;T&gt;(subscriber) &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(T t)</span> </span>&#123;<br>                        subscriber.onNext(t);<br>                    &#125;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            subscriber.onError(e);<br>                        &#125; <span class="hljs-keyword">finally</span> &#123;<br>                            inner.unsubscribe();<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            subscriber.onCompleted();<br>                        &#125; <span class="hljs-keyword">finally</span> &#123;<br>                            inner.unsubscribe();<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProducer</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Producer p)</span> </span>&#123;<br>                        subscriber.setProducer(<span class="hljs-keyword">new</span> Producer() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> n)</span> </span>&#123;<br>                                <span class="hljs-keyword">if</span> (t == Thread.currentThread()) &#123;<br>                                    p.request(n);<br>                                &#125; <span class="hljs-keyword">else</span> &#123;<br>                                    inner.schedule(<span class="hljs-keyword">new</span> Action0() &#123;<br>                                        <span class="hljs-meta">@Override</span><br>                                        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>                                            p.request(n);<br>                                        &#125;<br>                                    &#125;);<br>                                &#125;<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;;<br><br>                source.unsafeSubscribe(s);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释直接表明，这个类是用来在指定的线程上订阅subscriber。最主要的方法是call方法，在这个方法里，创建了一个Worker对象，Worker对象调用schedule方法传入一个Action0,在这里Action0的call方法被调用的时候，首先记录当前调用Action0的call方法的线程。在内部用传入的原始subscriber创建一个新的Subscriber对象s(两个subscriber了),在这个s的内部又进行原始subscriber的onNext方法调用发射数据，又覆写了新的subscriber对象的setProducer方法，在覆写的时候对原始的subscriber对象设置一个新的Producer(两个Producer)，在这个新的生产者的request方法中，会判断当前的线程会否就是scheduler指定的线程(刚刚在Action0的call方法中记录了)，如果是，则立即执行；否则将交给scheduler对象指定的Worker对象重新安排这个任务，直到线程一致为止才执行。最后让执行subscribeOn产生的新的observable去订阅这个新产生的subscriber即可。</p><h4 id="subscribeOn总结："><a href="#subscribeOn总结：" class="headerlink" title="subscribeOn总结："></a>subscribeOn总结：</h4><p>线程的切换是由Scheduler对象中的Worker对象负责安排这些任务，不同类型的Scheduler创建出对应的Worker对象，在Worker对象内部会在相应的线程上创建新的Subscriber，通过给新的subscriber设置Producer，通过新的Producer在指定的线程上请求数据，代理了实现发射线程的切换。</p><h3 id="observeOn分析"><a href="#observeOn分析" class="headerlink" title="observeOn分析"></a>observeOn分析</h3><p>接下来分析observeOn,了解在异步线程上分发事件就可以知道线程切换的大致原理了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Observable&lt;T&gt; <span class="hljs-title">observeOn</span><span class="hljs-params">(Scheduler scheduler)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> <span class="hljs-keyword">instanceof</span> ScalarSynchronousObservable) &#123;<br>            <span class="hljs-keyword">return</span> ((ScalarSynchronousObservable&lt;T&gt;)<span class="hljs-keyword">this</span>).scalarScheduleOn(scheduler);<br>        &#125;<br>        <span class="hljs-keyword">return</span> lift(<span class="hljs-keyword">new</span> OperatorObserveOn&lt;T&gt;(scheduler, <span class="hljs-keyword">false</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到假如是 ScalarSynchronousObservable 实例的话，操作和 subscribeOn 是一样的。直接看看第二种不是 ScalarSynchronousObservable 的情况。<br>我们看到使用的是 lift 操作符，Operator 的构造方式和上面的 filter 有点不一样，传入了 scheduler 和一个 false 。看下这个 OperatorObserveOn 的代码。按照刚刚 lift 操作的原理，操作符中的 call 方法是关键，是会被代理调用的。这边的代码太长，贴关键部分的代码，上面的都是全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; call(Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; child) &#123;<br>        <span class="hljs-keyword">if</span> (scheduler <span class="hljs-keyword">instanceof</span> ImmediateScheduler) &#123;<br>            <span class="hljs-comment">// avoid overhead, execute directly</span><br>            <span class="hljs-keyword">return</span> child;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (scheduler <span class="hljs-keyword">instanceof</span> TrampolineScheduler) &#123;<br>            <span class="hljs-comment">// avoid overhead, execute directly</span><br>            <span class="hljs-keyword">return</span> child;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ObserveOnSubscriber&lt;T&gt; parent = <span class="hljs-keyword">new</span> ObserveOnSubscriber&lt;T&gt;(scheduler, child, delayError);<br>            parent.init();<br>            <span class="hljs-keyword">return</span> parent;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>根据上面的经验，这里的返回的 Subscriber 的将会在 lift 新创建的 observable 中的 OnSubscribe 对象的 call 方法中被原始自定义的 OnSubscribe 当做参数传递给它自身的 call 方法中，这里有点乱，但是是和上面的 lift 是一样的，可以回到上面看看 lift 的分析。所以数据会先通过这里创建的 ObserveOnSubscriber ，也就是这里返回的 child 或者 parent。child 的应该比较简单，是直接返回自定义的  Subscriber，这样在 lift 中的情况也一样，其实是直接发给了原始的 observable，相当于没做任何的线程变换。<br>那么重点就是在 ObserveOnSubscriber 上了，这个应该是在做线程的切换了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// don&#x27;t want this code in the constructor because `this` can escape through the </span><br>    <span class="hljs-comment">// setProducer call</span><br>    Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; localChild = child;<br>    <br>    localChild.setProducer(<span class="hljs-keyword">new</span> Producer() &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0L</span>) &#123;<br>                BackpressureUtils.getAndAddRequest(requested, n);<br>                schedule();<br>            &#125;<br>        &#125;<br><br>    &#125;);<br>    localChild.add(recursiveScheduler);<br>    localChild.add(<span class="hljs-keyword">this</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(<span class="hljs-keyword">final</span> T t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isUnsubscribed() || finished) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!queue.offer(on.next(t))) &#123;<br>        onError(<span class="hljs-keyword">new</span> MissingBackpressureException());<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    schedule();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上面看到，在创建 parent的时候，会调用 init 方法，在 init 方法中为 child (自定义的 subscriber )设置了 Producer，在 request 里调用了 schedule 方法，<br>schedule 方法就是执行在指定的异步线程上的。我们看到在 onNext 方法中，又调用了 schedule 方法，这样就实现了循环分发的效果，直到把所有的数据分发完。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">schedule</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (counter.getAndIncrement() == <span class="hljs-number">0</span>) &#123;<br>                recursiveScheduler.schedule(<span class="hljs-keyword">this</span>);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>schedule方法里是将当前的对象加入到任务安排中，我们知道schedule方法的参数是一个Action0对象，所以需要看下当前对象实现Action0接口中的call方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">long</span> emitted = <span class="hljs-number">0L</span>;<br><br>            <span class="hljs-keyword">long</span> missed = <span class="hljs-number">1L</span>;<br><br>            <span class="hljs-comment">// these are accessed in a tight loop around atomics so</span><br>            <span class="hljs-comment">// loading them into local variables avoids the mandatory re-reading</span><br>            <span class="hljs-comment">// of the constant fields</span><br>            <span class="hljs-keyword">final</span> Queue&lt;Object&gt; q = <span class="hljs-keyword">this</span>.queue;<br>            <span class="hljs-keyword">final</span> Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; localChild = <span class="hljs-keyword">this</span>.child;<br>            <span class="hljs-keyword">final</span> NotificationLite&lt;T&gt; localOn = <span class="hljs-keyword">this</span>.on;<br>            <br>            <span class="hljs-comment">// requested and counter are not included to avoid JIT issues with register spilling</span><br>            <span class="hljs-comment">// and their access is is amortized because they are part of the outer loop which runs</span><br>            <span class="hljs-comment">// less frequently (usually after each RxRingBuffer.SIZE elements)</span><br>            <br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-keyword">if</span> (checkTerminated(finished, q.isEmpty(), localChild, q)) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">long</span> requestAmount = requested.get();<br>                <span class="hljs-keyword">boolean</span> unbounded = requestAmount == Long.MAX_VALUE;<br>                <span class="hljs-keyword">long</span> currentEmission = <span class="hljs-number">0L</span>;<br>                <br>                <span class="hljs-keyword">while</span> (requestAmount != <span class="hljs-number">0L</span>) &#123;<br>                    <span class="hljs-keyword">boolean</span> done = finished;<br>                    Object v = q.poll();<br>                    <span class="hljs-keyword">boolean</span> empty = v == <span class="hljs-keyword">null</span>;<br>                    <br>                    <span class="hljs-keyword">if</span> (checkTerminated(done, empty, localChild, q)) &#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    <br>                    <span class="hljs-keyword">if</span> (empty) &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <br>                    localChild.onNext(localOn.getValue(v));<br>                    <br>                    requestAmount--;<br>                    currentEmission--;<br>                    emitted++;<br>                &#125;<br>                <br>                <span class="hljs-keyword">if</span> (currentEmission != <span class="hljs-number">0L</span> &amp;&amp; !unbounded) &#123;<br>                    requested.addAndGet(currentEmission);<br>                &#125;<br>                <br>                missed = counter.addAndGet(-missed);<br>                <span class="hljs-keyword">if</span> (missed == <span class="hljs-number">0L</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> (emitted != <span class="hljs-number">0L</span>) &#123;<br>                request(emitted);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>可以看到上面其实和 Android 本身的 looper 一样，也是一个循环发射的一个过程，checkTerminated 根据当前发射的完成状况和 subscriber 的订阅状态判断是否需要停止。不去过多的理解这个，看重点for循环。<br>在 for 循环里还有一个 while 循环，在 while 中给 Subscriber 对象发射数据。这样就是在 recursiveScheduler 中新的线程中发射的数据。这样就实现了 observeOn 中的线程切换。</p><h4 id="observeOn总结"><a href="#observeOn总结" class="headerlink" title="observeOn总结"></a>observeOn总结</h4><p>observeOn 的线程切换也是通过给自定义的 Subscriber 设置新的 Producer，在新的 Producer中 指定分发(subscriber.onNext())调用的线程,这样就实现了 observeOn 线程的切换。</p><h3 id="subscribe分析"><a href="#subscribe分析" class="headerlink" title="subscribe分析"></a>subscribe分析</h3><p>再看看订阅的执行流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Subscription <span class="hljs-title">subscribe</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; subscriber)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Observable.subscribe(subscriber, <span class="hljs-keyword">this</span>);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Subscription <span class="hljs-title">subscribe</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> T&gt; subscriber, Observable&lt;T&gt; observable)</span> </span>&#123;<br>     <span class="hljs-comment">// validate and proceed</span><br>        <span class="hljs-keyword">if</span> (subscriber == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;observer can not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (observable.onSubscribe == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;onSubscribe function can not be null.&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// new Subscriber so onStart it</span><br>        subscriber.onStart();<br>        <span class="hljs-comment">// if not already wrapped</span><br>        <span class="hljs-keyword">if</span> (!(subscriber <span class="hljs-keyword">instanceof</span> SafeSubscriber)) &#123;<br>            <span class="hljs-comment">// assign to `observer` so we return the protected version</span><br>            subscriber = <span class="hljs-keyword">new</span> SafeSubscriber&lt;T&gt;(subscriber);<br>        &#125;<br>        <span class="hljs-comment">// The code below is exactly the same an unsafeSubscribe but not used because it would </span><br>        <span class="hljs-comment">// add a significant depth to already huge call stacks.</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// allow the hook to intercept and/or decorate</span><br>            hook.onSubscribeStart(observable, observable.onSubscribe).call(subscriber);<br>            <span class="hljs-keyword">return</span> hook.onSubscribeReturn(subscriber);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-comment">// special handling for certain Throwable/Error/Exception types</span><br>            Exceptions.throwIfFatal(e);<br>            <span class="hljs-comment">// if an unhandled error occurs executing the onSubscribe we will propagate it</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                subscriber.onError(hook.onSubscribeError(e));<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e2) &#123;<br>                Exceptions.throwIfFatal(e2);<br>                <span class="hljs-comment">// if this happens it means the onError itself failed (perhaps an invalid function implementation)</span><br>                <span class="hljs-comment">// so we are unable to propagate the error correctly and will just throw</span><br>                RuntimeException r = <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Error occurred attempting to subscribe [&quot;</span> + e.getMessage() + <span class="hljs-string">&quot;] and then again while trying to pass to onError.&quot;</span>, e2);<br>                <span class="hljs-comment">// TODO could the hook be the cause of the error in the on error handling.</span><br>                hook.onSubscribeError(r);<br>                <span class="hljs-comment">// TODO why aren&#x27;t we throwing the hook&#x27;s return value.</span><br>                <span class="hljs-keyword">throw</span> r;<br>            &#125;<br>            <span class="hljs-keyword">return</span> Subscriptions.unsubscribed();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>我们看到hook.onSubscribeStart(observable, observable.onSubscribe).call(subscriber);这就是所谓的只要在订阅的时候才会发射数据的原因。 subscriber 作为参数传递到调用 subscribe 方法的 observable 中 onSubscribe 的 call 方法了。也就是说最终的subscriber是被传递给了最后一个调用它的 observable 了，因为我们知道在整个操作链中，每个操作符都会返回一个新的 observable ，并且内部都是创建了一个新的 subscriber ，利用代理的方式调用我们自定义的 subscriber。</p><h3 id="实例讲解流程"><a href="#实例讲解流程" class="headerlink" title="实例讲解流程"></a>实例讲解流程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleFilter</span><span class="hljs-params">()</span> </span>&#123;<br>    Observable.create(<span class="hljs-keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Observable:&quot;</span> + Thread.currentThread());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>          subscriber.onNext(i);<br>        &#125;<br>        subscriber.onCompleted();<br>      &#125;<br>    &#125;)<br>        <span class="hljs-comment">//  决定了最终在哪个线程调用OnSubscribe的call方法，这会让源observable订阅subscribeOn内新创建的subscriber,</span><br>        <span class="hljs-comment">//  内部新的subscriber会在指定的IO线程上执行。</span><br>        .subscribeOn(Schedulers.io())<br>            <span class="hljs-comment">// filter会返回一个 observable，这个observable会订阅后面的subscriber，接收到之后交给Operator，Operator调用Func1操作完之后再交给调用这个filter</span><br>            <span class="hljs-comment">// 的observable中的OnSubscribe调用，运行在调用这个filter的observable的call方法运行的线程上。</span><br>        .filter(<span class="hljs-keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">call</span><span class="hljs-params">(Integer integer)</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;filter:&quot;</span> + Thread.currentThread());<br>            <span class="hljs-keyword">if</span> (integer &gt; <span class="hljs-number">2</span>) &#123;<br>              <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>          &#125;<br>        &#125;)<br><br>        <span class="hljs-comment">// 指定subscriber中的call方法运行的线程，内部也是通过lift操作实现的，也新建了一个subscriber，</span><br>            <span class="hljs-comment">// 这个新的subscriber为后面订阅的subscriber设置了新producer，</span><br>            <span class="hljs-comment">// 新的producer指定了后面订阅的subscriber的分发数据的线程，也就是订阅的subscriber调用onNext的线程。</span><br>        .observeOn(AndroidSchedulers.mainThread())<br>            <span class="hljs-comment">//订阅，直接运行，分发数据</span><br>        .subscribe(<span class="hljs-keyword">new</span> Action1&lt;Integer&gt;() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(Integer integer)</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;Action1:&quot;</span> + Thread.currentThread());<br>            textViewMain.setText(integer.toString());<br>          &#125;<br>        &#125;);<br><br>  &#125;<br></code></pre></td></tr></table></figure><p>具体的解释就在上面的注释部分了，暂时rxjava部分的解析先暂停，以上的内容，还有许多待斟酌的，遇到错误，看到的希望指教。</p>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RxJava</tag>
      
      <tag>Source</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RxAndroid入门分享(二)</title>
    <link href="/2016/02/26/RxAndroidIntroduction2/"/>
    <url>/2016/02/26/RxAndroidIntroduction2/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录 RxJava 中在 Android 中的应用,介绍 RxAndroid 的使用.</p><span id="more"></span><h1 id="More-RxJava-及其在Android上的应用"><a href="#More-RxJava-及其在Android上的应用" class="headerlink" title="More RxJava 及其在Android上的应用"></a>More RxJava 及其在Android上的应用</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>在 module 的 gradle 中添加 RxAndroid 的相关依赖，如果想体验 rx 在 Android 上的更方便的功能。可以添加 Jake 大神的兼容包 RxBinding。<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">//RXAndroid</span><br>compile <span class="hljs-string">&#x27;io.reactivex:rxandroid:1.1.0&#x27;</span><br><span class="hljs-comment">//RxBinding</span><br>compile <span class="hljs-string">&#x27;com.jakewharton.rxbinding:rxbinding:0.3.0&#x27;</span><br>compile <span class="hljs-string">&#x27;com.jakewharton.rxbinding:rxbinding-support-v4:0.3.0&#x27;</span><br>compile <span class="hljs-string">&#x27;com.jakewharton.rxbinding:rxbinding-appcompat-v7:0.3.0&#x27;</span><br>compile <span class="hljs-string">&#x27;com.jakewharton.rxbinding:rxbinding-design:0.3.0&#x27;</span><br>compile <span class="hljs-string">&#x27;com.jakewharton.rxbinding:rxbinding-recyclerview-v7:0.3.0&#x27;</span><br><span class="hljs-comment">//compile &#x27;com.jakewharton.rxbinding:rxbinding-leanback-v17:0.3.0&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="以下开始用一个demo来演示"><a href="#以下开始用一个demo来演示" class="headerlink" title="以下开始用一个demo来演示"></a>以下开始用一个demo来演示</h2><p>目的地有三个 tab，每个 tab 内的详情用 RecyclerView 展示，下拉刷新用 SwipeRefreshLayout。<br>布局界面如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.support.v4.widget.SwipeRefreshLayout</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/destinationSwipeRefreshLayout&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">android.support.v7.widget.RecyclerView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/destinationRecyclerView&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:clipToPadding</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">android.support.v7.widget.RecyclerView</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>开始 RxAndroid 的编写，我们开始考虑在目的地页面需要有的步骤</p><ul><li>网络请求数据(放在 IO 线程)；</li><li>填充网络请求返回的数据到页面(UI 线程展示)；<br>RxAndroid 是基于响应式的编程，我们考虑将以上的网络请求产生的结果作为一个事件，他产生的数据就可以定义为数据流了。</li></ul><h3 id="Observable-amp-amp-create"><a href="#Observable-amp-amp-create" class="headerlink" title="Observable&amp;&amp;create"></a>Observable&amp;&amp;create</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//网络请求，从头开始，自定义创建一个数据流。自主决定数据流的发射时机。</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Observable&lt;DestinationDataModel&gt; <span class="hljs-title">getDestinationDataObservable</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String url)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Observable.create(<span class="hljs-keyword">new</span> Observable.OnSubscribe&lt;DestinationDataModel&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> DestinationDataModel&gt; subscriber)</span> </span>&#123;<br>                Gson gson = <span class="hljs-keyword">new</span> Gson();<br>                Request request = <span class="hljs-keyword">new</span> Request.Builder().url(url).build();<br>                Response response = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    response = client.newCall(request).execute();<br>                    DestinationDataModel destinationDataModel = gson.fromJson(response.body().string(), DestinationDataModel.class);<br>                    <span class="hljs-keyword">if</span> (subscriber.isUnsubscribed())&#123;<span class="hljs-comment">//判断连接是否断开，避免无谓的操作</span><br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    subscriber.onNext(destinationDataModel);<br>                    <span class="hljs-keyword">if</span> (!subscriber.isUnsubscribed())&#123;<br>                        subscriber.onCompleted();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里我们定义了一个方法，这个方法返回一个 Observable，里面封装了数据流,其实不是很计较的情况下，我们先将 Observable 事件等价(自我的理解，未在官方文档找到合适的解释，如有找到望不吝赐教)，事件对外以数据流的形式展现，这个事件就是在发射数据，然后发射结束就通知，失败了也通知。此处我们用到了操作符 create，一种创建操作符，这种操作的扩展性极大，但是我们也需要自己负责发射数据。全程的执行规范都在你的手里。<br>这里可能会有误区，数据流，不一定是多个，非要像 list，数组似的，那种有多个值，像弹珠似的连续发射。像上面的代码，我们只是发射了一个 destinationDataModel 对象，这个也是数据流，即，你发射出去的就是数据流的子集。</p><p>现在，我们有数据流了，就需要在某个适当的地方进行响应。我们思考，需要响应什么？对一个事件可能存在三种情况，事件对应的数据发射失败了( onError )，发射成功了( onCompleted ),还有接收到了发射来的数据( onNext )。<br>有点需要注意，这里的失败，以及成功，这两个回调，只是一个通知而已。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">  Subscriber&lt;DestinationDataModel&gt; subscriber = <span class="hljs-keyword">new</span> Subscriber&lt;DestinationDataModel&gt;() &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStart</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onStart();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;<br>    Toast.makeText(getActivity(), <span class="hljs-string">&quot;onCompleted&quot;</span>, Toast.LENGTH_SHORT).show();<br>    destinationSwipeRefreshLayout.setRefreshing(<span class="hljs-keyword">false</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;<br>    e.printStackTrace();<br>    destinationSwipeRefreshLayout.setRefreshing(<span class="hljs-keyword">false</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(DestinationDataModel destinationDataModel)</span> </span>&#123;<br>    destinationRecyclerView.setAdapter(<span class="hljs-keyword">new</span> DestinationRecyclerAdapter(getActivity(), destinationDataModel.getDatas()));<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们定义了一个 Subscriber 对象，在上篇中讲到了什么是 Subscriber。这个是对数据流发射的相应，差不多对应了观察者模式中的观察者。当得到失败和成功的通知的时候，我们这里进行 log 的输出并且显示刷新的图标。当接收到数据的时候，我们就创建 recyclerview 的 adapter，进行列表的填充显示。</p><h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><p>一旦我们订阅，就会执行数据的发射，默认的情况下，没有订阅操作，数据是不会被发射的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">getDestinationDataObservable(url).subscribe(subscriber);<br></code></pre></td></tr></table></figure><p>以上的操作就会完成订阅，正常的数据产生，发射，相应都会发生。但是，真当我们允许的时候，就会报错，原因是我们都知道，对 UI 的操作都必须在 UI 主线程中。</p><h3 id="subscribeOn-amp-amp-observeOn"><a href="#subscribeOn-amp-amp-observeOn" class="headerlink" title="subscribeOn &amp;&amp; observeOn"></a>subscribeOn &amp;&amp; observeOn</h3><p>指定数据产生发射的线程和订阅响应的线程。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">getDestinationDataObservable(url).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(subscriber);<br></code></pre></td></tr></table></figure><br> subscribeOn 表示 Observable 执行所在的线程，这里指的是网络请求，请求的数据进行 gson 解析，再将数据发射的线程。<br> observeOn 表示的订阅响应的线程，这里指的是填充发射过来的数据到列表中。<br> 运行就能看到我们想要的效果。到此我们学会了最基本的一些使用，基本上掌握了这几个就可以轻松地展开工作了。当然还有很多其他的技巧。</p><h3 id="From-amp-amp-Just"><a href="#From-amp-amp-Just" class="headerlink" title="From &amp;&amp; Just"></a>From &amp;&amp; Just</h3><p>我们刚刚有说过，数据流不一定是连续的，那么肯定存在连续的，连续不断的弹射，更符合官方文档那种弹珠示意图。from 就是一个这样的操作符。<br>这个目前未想到在当前这个模块的应用场景。</p><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><p>这个是重复，我们让当前的列表中的数据重复发送两次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">getDestinationDataObservableByCreate(url).repeat(<span class="hljs-number">2</span>)<br>            .subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())<br>            .subscribe(subscriber);<br></code></pre></td></tr></table></figure><p>修改下subscriber</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(DestinationDataModel destinationDataModel)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span> (destinationRecyclerView.getAdapter() == <span class="hljs-keyword">null</span>) &#123;<br>                    DestinationRecyclerAdapter adapter = <span class="hljs-keyword">new</span> DestinationRecyclerAdapter(getActivity(), destinationDataModel.getDatas());<br>                    destinationRecyclerView.setAdapter(adapter);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    DestinationRecyclerAdapter adapter = (DestinationRecyclerAdapter) destinationRecyclerView.getAdapter();<br>                    adapter.datas.get(<span class="hljs-number">0</span>).getInfos().addAll(destinationDataModel.getDatas().get(<span class="hljs-number">0</span>).getInfos());<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></figure><p>上面的结果是，请求两次网络。我们会看到数据重复了，同样的数据被发送了两次，并且是从头到尾的重复了两次。</p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p>延迟操作，等到订阅的时候再准备数据流。这里尤其对 just 和 from 操作符的效果最为明显,以下是国外的一个 just 的例子说明，from 的原理一样。<br><a href="http://blog.danlew.net/2015/07/23/deferring-observable-code-until-subscription-in-rxjava/">借用一个国外的例子</a><br><a href="http://www.jianshu.com/p/c83996149f5b">国内的翻译</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SomeType</span> </span>&#123;<br><span class="hljs-keyword">private</span> String value;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setValue</span><span class="hljs-params">(String value)</span> </span>&#123;<br>  <span class="hljs-keyword">this</span>.value = value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Observable&lt;String&gt; <span class="hljs-title">valueObservable</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> Observable.just(value);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于以下代码的调用会出现怎么样的结果呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">SomeType instance = <span class="hljs-keyword">new</span> SomeType();  <br>Observable&lt;String&gt; value = instance.valueObservable();  <br>instance.setValue(<span class="hljs-string">&quot;Some Value&quot;</span>);  <br>value.subscribe(System.out::println); <span class="hljs-comment">//订阅的时候发射数据</span><br></code></pre></td></tr></table></figure><p>如果你认为会打印出 “Some Value”，那就错了。而实际打印结果是 “null”。因为在调用 Observable.just() 的时候，value 已经初始化了。<br>just()，from() 这类能够创建 Observable 的操作符（译者注：创建 Observable 的操作符）在创建之初，就已经存储了对象的值，而不被订阅的时候。订阅的时候只是发射数据。<br>这种情况，显然不是预期表现，我想要的 valueObservable() 是无论什么时候请求，都能够表现为当前值。所以我们需要延迟数据的创建直到有人订阅。有两个方法，一个是用 create 自主创建，我们可以自己精确的控制发射什么，什么时候发射，还有一个是用的 defer 延迟操作符。defer() 中的代码直到被订阅才会执行。我们只需要在请求数据的时候调用 Observable.just() 就行了，使用 defer() 操作符的唯一缺点就是，每次订阅都会创建一个新的 Observable 对象。create() 操作符则为每一个订阅者都使用同一个函数，所以，后者效率更高。</p><p>因为我学习的时候，难以想清楚延迟和 create 操作符中的 call 的时间顺序和区别，我们用另外一个例子解释一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Observable&lt;Integer&gt; <span class="hljs-title">getInt</span><span class="hljs-params">()</span> </span>&#123;<br><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyyMMdd_HHmmss&quot;</span>);<br>        String currentDateandTime = sdf.format(<span class="hljs-keyword">new</span> Date());<br>        Log.e(<span class="hljs-string">&quot;GetInt&quot;</span>, currentDateandTime);<br><br>        <span class="hljs-keyword">return</span> Observable.create(<span class="hljs-keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span> (subscriber.isUnsubscribed()) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                subscriber.onNext(<span class="hljs-number">42</span>);<br>                subscriber.onCompleted();<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">//simple defer</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleDefer</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//defer中的getInt操作等到有人订阅deferObservable的时候才会被执行</span><br>        <span class="hljs-comment">//假如这里不用defer，直接用getInt返回，那么调用simpleDefer的时候就会打印时间</span><br>        deferObservable = Observable.defer(<span class="hljs-keyword">new</span> Func0&lt;Observable&lt;Integer&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Observable&lt;Integer&gt; <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> getInt();<br>            &#125;<br>        &#125;);<br><span class="hljs-comment">//        deferObservable.subscribe(new Action1&lt;Integer&gt;() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public void call(Integer integer) &#123;</span><br><span class="hljs-comment">//                System.out.println(&quot;subscribe:&quot; + integer);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>在不用延迟的情况下，我们调用 simpleDefer 返回一个数据流的时候就会打印时间，反之我们不用延迟的话，则会在调用 simpleDefer 的时候就已经打印了当前的时间。<br>所以，这里被延迟的是我们 getInt 被调用的时机。注意：create 中的发射 42 和延迟 <em>无关</em>，这个 call 函数就是在 <em>发射</em> 数据，<em>订阅的时候才会发射数据</em> ，一旦订阅发生的额时候，就会发射42。</p><p>总之记住，defer 延迟的是参数 function 中的操作。只要将需要延迟创建的操作放到 function 函数中即可。这个对于数据的新鲜度有要求的操作很有用。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>我们接受到的数据常常用些是不满足我们的需求的，这时候就可以用 filter 操作符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">getDestinationDataObservableByCreate(url).filter(<span class="hljs-keyword">new</span> Func1&lt;DestinationDataModel, Boolean&gt;() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">call</span><span class="hljs-params">(DestinationDataModel destinationDataModel)</span> </span>&#123;<br>               <span class="hljs-keyword">return</span> destinationDataModel != <span class="hljs-keyword">null</span>;<br>           &#125;<br>       &#125;)<br>           .subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())<br>           .subscribe(subscriber);<br></code></pre></td></tr></table></figure><p>比如我们可以对发射的数据中 null 数据进行过滤，虽然我们也可以在 onNext 或者在 subscriber 中进行过滤，那样就会破坏代码的业务逻辑，这样，每个函数只要注重自身的业务逻辑即可。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>我们有时候随着需求的变更，版本的迭代，可能用同一套数据可能会做不用的用处，亦或者同一个功能的同一个数据源，但是上层的应用对数据结构的需求发生了变化。这时候，如果我们去变更数据提供层，或者让上层去适配，都会破坏代码逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">getDestinationDataObservableByCreate(url).map(<span class="hljs-keyword">new</span> Func1&lt;DestinationDataModel, String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">(DestinationDataModel destinationDataModel)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> destinationDataModel.getVersion();<br>    &#125;<br>&#125;).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())<br>    .subscribe(<span class="hljs-keyword">new</span> Action1&lt;String&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(String s)</span> </span>&#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><p>看上面，我们并没有修改 getDestinationDataObservableByCreate 的业务逻辑，这样就不会影响其他的代码逻辑，也不会去贸然修改底层数据提供，用 map 操作符，我们就将 getDestinationDataObservableByCreate 发射的 DestinationDataModel 类型的数据，一个个变换成了 String 类型。<br>map适用于这些数据结构的变化的操作。</p><h3 id="FlatMap-amp-amp-ConcatMap"><a href="#FlatMap-amp-amp-ConcatMap" class="headerlink" title="FlatMap &amp;&amp; ConcatMap"></a>FlatMap &amp;&amp; ConcatMap</h3><p>对于一些 Observable 本身也会返回 Observable，我们可以将这些子 Observable 发射的数据进行统一，合并这些 Observables 发射的数据，最后将合并后的结果作为最终的 Observable。<br>这就是为什么叫做铺平的原因。<br>提示：合并部分是允许交叉的。意味着 flatMap() 不能够保证在最终生成的 Observable 中源 Observables 确切的发射顺序。ConcatMap 可以保证顺序，用法和 flatMap 一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Observable&lt;Observable&lt;DestinationDataModel&gt;&gt; getDestinationDataObservableByFlatMap(<span class="hljs-keyword">final</span> String url) &#123;<br>        <span class="hljs-keyword">return</span> Observable.create(<span class="hljs-keyword">new</span> Observable.OnSubscribe&lt;Observable&lt;DestinationDataModel&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> Observable&lt;DestinationDataModel&gt;&gt; subscriber)</span> </span>&#123;<br>                Gson gson = <span class="hljs-keyword">new</span> Gson();<br>                Request request = <span class="hljs-keyword">new</span> Request.Builder().url(url).build();<br>                Response response = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    response = client.newCall(request).execute();<br>                    DestinationDataModel destinationDataModel = gson.fromJson(response.body().string(), DestinationDataModel.class);<br>                    <span class="hljs-keyword">if</span> (subscriber.isUnsubscribed()) &#123;<span class="hljs-comment">//判断连接是否断开，避免无谓的操作</span><br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    subscriber.onNext(Observable.just(destinationDataModel));<br>                    subscriber.onNext(Observable.just(destinationDataModel));<br>                    subscriber.onCompleted();<br>                    <span class="hljs-keyword">if</span> (!subscriber.isUnsubscribed()) &#123;<br>                        subscriber.onCompleted();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">getDestinationDataObservableByFlatMap(url).flatMap(<span class="hljs-keyword">new</span> Func1&lt;Observable&lt;DestinationDataModel&gt;, Observable&lt;DestinationDataModel&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Observable&lt;DestinationDataModel&gt; <span class="hljs-title">call</span><span class="hljs-params">(Observable&lt;DestinationDataModel&gt; destinationDataModelObservable)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> destinationDataModelObservable;<br>            &#125;<br>        &#125;)<br>        .subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())subscribe(subscriber);<br></code></pre></td></tr></table></figure><p>上面我们用 subscriber.onNext(Observable.just(destinationDataModel));模拟发送两个 Observable,然后通过 flatMap 进行扁平化处理。我们看到效果是列表中有两组相同的数据。<br>flatMap() 和 map() 有一个相同点：它也是把传入的参数转化之后返回另一个对象。 但需要注意，和 map() 不同的是， flatMap() 中返回的是个 Observable 对象，并且这个 Observable 对象并不是被直接发送到了 Subscriber 的回调方法中。<br> flatMap() 的原理是这样的：</p><ol><li>使用传入的事件对象创建一个 Observable 对象；</li><li>并不发送这个 Observable, 而是将它激活，于是它开始发送事件；</li><li>每一个创建出来的 Observable 发送的事件，都被汇入同一个 Observable ，而这个 Observable 负责将这些事件统一交给 Subscriber 的回调方法。<br>这三个步骤，把事件拆成了两级，通过一组新创建的 Observable 将初始的对象『铺平』之后通过统一路径分发了下去。 而这个『铺平』就是 flatMap() 所谓的 flat。</li></ol><h3 id="SwitchMap"><a href="#SwitchMap" class="headerlink" title="SwitchMap"></a>SwitchMap</h3><p>和上面的操作符类似 ，都是 Observable 发射 Observable,不同的是，这个操作不会合并数据项中的所有数据，而是当遇到后一个 Observable 发射数据的时候，就停止对前一个 Observable 的接收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">getDestinationDataObservableByFlatMap(url).switchMap(<span class="hljs-keyword">new</span> Func1&lt;Observable&lt;DestinationDataModel&gt;, Observable&lt;DestinationDataModel&gt;&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Observable&lt;DestinationDataModel&gt; <span class="hljs-title">call</span><span class="hljs-params">(Observable&lt;DestinationDataModel&gt; destinationDataModelObservable)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> destinationDataModelObservable;<br>    &#125;<br>&#125;).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())<br>    .subscribe(subscriber);<br></code></pre></td></tr></table></figure><p>只要换个操作符即可 switchMap，这里因为发射的数据只有一个，效果不明显，如果是列表，交叉发射的话，会很明显，效果回事丢失一部分数据。</p><h3 id="GroupBy"><a href="#GroupBy" class="headerlink" title="GroupBy"></a>GroupBy</h3><p>我们对数据按照某个依据进行分组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Observable&lt;GroupedObservable&lt;String, DestinationDataModel&gt;&gt; groupedObservableObservable = getDestinationDataObservableByCreate(url).groupBy(<span class="hljs-keyword">new</span> Func1&lt;DestinationDataModel, String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">(DestinationDataModel destinationDataModel)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> destinationDataModel.getVersion();<br>            &#125;<br>        &#125;);<br>        Observable.concat(groupedObservableObservable).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(subscriber);<br></code></pre></td></tr></table></figure><p>以上依旧版本号对数据进行分组，一组的将在一起当做一个 Observable 发射。</p><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>对数据进行整合一起发射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Observable&lt;DestinationDataModel&gt; merge1 = getDestinationDataObservableByCreate(url);<br>Observable&lt;DestinationDataModel&gt; merge2 = getDestinationDataObservableByCreate(url);<br>Observable&lt;DestinationDataModel&gt; merge = Observable.merge(merge1, merge2);<br>merge.subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(subscriber);<br></code></pre></td></tr></table></figure><p>merge 作为一个可观测序列，发射源 merge1，merge2 中的所有数据。注意发射的数据被交叉合并到一个 Observable 里面。如果同步的合并 Observable，它们将连接在一起并且不会交叉。</p><h3 id="zip-join-amp-amp-combineLatest"><a href="#zip-join-amp-amp-combineLatest" class="headerlink" title="zip $$ join &amp;&amp; combineLatest"></a>zip $$ join &amp;&amp; combineLatest</h3><p>上面的数据，是原样的放在一个可观测序列中进行发射的，然而如果我们想对源数据中两两的进行操作后再放到一个数据列中呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Observable&lt;DestinationDataModel&gt; zip1 = getDestinationDataObservableByCreate(url);<br>       Observable&lt;DestinationDataModel&gt; zip2 = getDestinationDataObservableByCreate(url);<br>       Observable&lt;DestinationDataModel&gt; zip = Observable.zip(zip1, zip2, <span class="hljs-keyword">new</span> Func2&lt;DestinationDataModel, DestinationDataModel, DestinationDataModel&gt;() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-function"><span class="hljs-keyword">public</span> DestinationDataModel <span class="hljs-title">call</span><span class="hljs-params">(DestinationDataModel destinationDataModel, DestinationDataModel destinationDataModel2)</span> </span>&#123;<br>               <span class="hljs-comment">//进行数据的合并操作</span><br>               destinationDataModel.setCode(destinationDataModel.getCode() + destinationDataModel2.getCode());<br>               <span class="hljs-keyword">return</span> destinationDataModel;<br>           &#125;<br>       &#125;);<br>       zip.subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(subscriber);<br></code></pre></td></tr></table></figure><p>上面在 Func2 中对两个数据源中的数据进行两两操作，我们只是简单的将 model 的 code 值相加来模拟合并操作，作为新的数据返回，假如两数据源的长度相同，则只会返回一个数据源长度的数据，假如长度不一样，以短的数据长度为准。</p><p>zip 作用于最近未打包的两个 Observables,还有一个需求就是我们不一定要非都是未打包的，并不一定要两个数据源要一定的长度相等，这个时候可以用 combineLatest，相反，combineLatest() 作用于最近发射的数据项：如果 Observable1 发射了 A 并且 Observable2 发射了 B 和 C，combineLatest() 将会分组处理 AB 和 AC。</p><p>join 操作符把类似于 combineLatest 操作符，也是两个 Observable 产生的结果进行合并，合并的结果组成一个新的 Observable，但是 join 操作符可以控制每个 Observable 产生结果的生命周期，在每个结果的生命周期内，可以与另一个 Observable 产生的结果按照一定的规则进行合并。</p><h2 id="RxAndroid-rxbinding"><a href="#RxAndroid-rxbinding" class="headerlink" title="RxAndroid rxbinding"></a>RxAndroid rxbinding</h2><p>Jake 为 Android 控件写的包，这个的使用就太多了。这个我们以一个登陆界面为例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/linearLayoutRoot&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/textViewRxAndroid&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Result&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/editTextRXAndroid&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;输入自己的内容，上面的textview会在400毫秒之后显示出来&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;@color/blue_light&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/email&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;Email&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;@color/blue_light&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/phone&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;Phone&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;@color/blue_light&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/username&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;UserName&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;@color/blue_light&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/LoginButton&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;注册&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们用第一个 TextView 来演示怎么样定时操作 TextView 的响应。场景常见于搜索，智能提示，我们不能用户输入什么就不停地网络请求。比如用户停止输入的内容有变，500秒之后再进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//两个事件源的时间间隔小于规定的时间单位的，都会被忽略。</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleDebounce</span><span class="hljs-params">()</span> </span>&#123;<br>        RxTextView.textChangeEvents(editTextRXAndroid)<br>            .debounce(<span class="hljs-number">400</span>, TimeUnit.MILLISECONDS)<br>            .observeOn(AndroidSchedulers.mainThread())<br>            .subscribe(<span class="hljs-keyword">new</span> Observer&lt;TextViewTextChangeEvent&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(TextViewTextChangeEvent textViewTextChangeEvent)</span> </span>&#123;<br>                  <span class="hljs-comment">//模拟响应</span><br>                    textViewRxAndroid.setText(textViewTextChangeEvent.text());<br>                &#125;<br>            &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>以上的代码中，在400毫秒的时间窗口内，如若临近的事件发生间隔在400毫秒以内的，都将被忽略，当相差的时间间隔达到400毫秒到达的时候，发射最近的一次事件。</p><p>在登录的时候，必须验证三要素都齐全才能进行注册的网络请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用combineLatest合并最近N个结点</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleCombineLatest</span><span class="hljs-params">()</span> </span>&#123;<br>        Observable&lt;CharSequence&gt; emailChangeObservable = RxTextView.textChanges(email);<br>        Observable&lt;CharSequence&gt; phoneChangeObservable = RxTextView.textChanges(phone);<br>        Observable&lt;CharSequence&gt; usernameChangeObservable = RxTextView.textChanges(username);<br>        Observable.combineLatest(emailChangeObservable, phoneChangeObservable, usernameChangeObservable, <span class="hljs-keyword">new</span> Func3&lt;CharSequence, CharSequence, CharSequence, Boolean&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">call</span><span class="hljs-params">(CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(charSequence) &amp;&amp; !TextUtils.isEmpty(charSequence2) &amp;&amp; !TextUtils.isEmpty(charSequence3)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;).subscribe(<span class="hljs-keyword">new</span> Action1&lt;Boolean&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(Boolean aBoolean)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span> (aBoolean) &#123;<br>                    LoginButton.setEnabled(<span class="hljs-keyword">true</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    LoginButton.setEnabled(<span class="hljs-keyword">false</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用 combineLatest 操作符，合并三个 TextView 的事件源，判断三个事件源都满足条件的时候，我们就返回 true，接着进行响应。</p><p>有时候，我们获取数据的渠道有很多，最后我们还是需要放到一起进行显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用merge合并两个数据源。</span><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleMerge</span><span class="hljs-params">()</span> </span>&#123;<br>      Observable.merge(getDataFromFile(), getDataFromNet())<br>          .subscribeOn(Schedulers.io())<br>          .observeOn(AndroidSchedulers.mainThread())<br>          .subscribe(<span class="hljs-keyword">new</span> Action1&lt;String&gt;() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                  textViewRxAndroid.setText(s + textViewRxAndroid.getText());<br>              &#125;<br>          &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure><p>以上我们对来自于本地的和网络请求的数据进行 merge 操作，产生新的数据流。</p><p>对于数据获取，我们有时候也有优先级，先去判断内存中是否有数据，有我们取内存中的，依次接下里是本地缓存，再次我们再去请求网络获取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//依次检查memory、disk、network</span><br>        Observable.concat(memory, disk, network)<br>            .first()<br>            .subscribeOn(Schedulers.newThread())<br>            .subscribe(<span class="hljs-keyword">new</span> Action1&lt;String&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                    System.out.println(<span class="hljs-string">&quot;选择了：&quot;</span> + s);<br>                &#125;<br>            &#125;);<br></code></pre></td></tr></table></figure><p>使用 timer 做定时操作。当有“x秒后执行y操作”类似的需求的时候，想到使用 timer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleTimer</span><span class="hljs-params">()</span> </span>&#123;<br>        Observable.timer(<span class="hljs-number">2</span>, TimeUnit.SECONDS)<br>            .subscribe(<span class="hljs-keyword">new</span> Observer&lt;Long&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;<br>                    System.out.println(<span class="hljs-string">&quot;现在是2秒之后&quot;</span>);<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;<br><br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(Long aLong)</span> </span>&#123;<br><br>                &#125;<br>            &#125;);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>使用 interval 做周期性操作。当有“每隔xx秒后执行yy操作”类似的需求的时候，想到使用 interval</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleInterval</span><span class="hljs-params">()</span> </span>&#123;<br>        Observable.interval(<span class="hljs-number">2</span>, TimeUnit.SECONDS)<br>            .subscribe(<span class="hljs-keyword">new</span> Observer&lt;Long&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(Long number)</span> </span>&#123;<br>                &#125;<br>            &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><p>以两秒为周期，不断的发送数据。</p><p>使用 throttleFirst 防止按钮重复点击,ps：debounce 也能达到同样的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">simpleThrottleFirst</span><span class="hljs-params">()</span> </span>&#123;<br>    RxView.clicks(LoginButton)<br>        .throttleFirst(<span class="hljs-number">1</span>, TimeUnit.SECONDS)<br>        .subscribe(<span class="hljs-keyword">new</span> Subscriber&lt;Void&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(Void aVoid)</span> </span>&#123;<br><br>            &#125;<br>        &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>以上的含义是在一秒以内，只接收第一个数据，其他的将会被忽略。</p>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RxJava</tag>
      
      <tag>Android</tag>
      
      <tag>RxAndroid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LayoutInflater中inflate的使用方法</title>
    <link href="/2016/02/23/LayoutInflater%E4%B8%ADinflate%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2016/02/23/LayoutInflater%E4%B8%ADinflate%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录 LayoutInflater 的 inflate 方法的三个参数的含义.</p><span id="more"></span><p>常常需要使用 LayoutInflater 中 inflate 方法。这个方法有两个重载的版本，一个是含有三个参数的，一个是两个参数的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//resource 代表了要被加载的布局文件的 ID，root 是待附加的父布局</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">inflate</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> resource, ViewGroup root)</span></span><br><span class="hljs-function"><span class="hljs-comment">//前两个是一样的，最后一个 attachToRoot 代表是否加载到父布局的树形结构中</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">inflate</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> resource, ViewGroup root, <span class="hljs-keyword">boolean</span> attachToRoot)</span> </span><br></code></pre></td></tr></table></figure><p>我们使用最频繁的地方应该就是在 adapter 的 getView 方法中，将 root 值设为 null，或者设一个 parent，将 attachToRoot 设为 false。一般没有特殊的需求的话，这样就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">getView</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;<br>       View root;<br>       ViewHolder viewHolder;<br>       <span class="hljs-keyword">if</span> (convertView == <span class="hljs-keyword">null</span>) &#123;<br>           viewHolder = <span class="hljs-keyword">new</span> ViewHolder();<br>           <span class="hljs-comment">//加载布局</span><br>           root = LayoutInflater.from(mContext).inflate(R.layout.listitem_campaign, parent, <span class="hljs-keyword">false</span>);<br>           <span class="hljs-comment">//加载布局，上面是含有第三个参数的版本，下面是含有两个参数的版本。和上面的效果是一样的；</span><br>           <span class="hljs-comment">//root = LayoutInflater.from(mContext).inflate(R.layout.listitem_campaign,null);</span><br>           viewHolder.time = (TextView) root.findViewById(R.id.campaignItemTimeTextView);<br>           viewHolder.imageView = (ImageView) root.findViewById(R.id.campaignItemImageView);<br>           viewHolder.title = (TextView) root.findViewById(R.id.campaignItemTitleTextView);<br>           viewHolder.desc = (TextView) root.findViewById(R.id.campaignItemDescTextView);<br>           viewHolder.redCircle = (ImageView) root.findViewById(R.id.redCircleImageView);<br>           root.setTag(viewHolder);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           root = convertView;<br>           viewHolder = (ViewHolder) root.getTag();<br>       &#125;<br>       Campaign campaign = data.get(position);<br>       viewHolder.time.setText(campaign.getTime());<br>       viewHolder.title.setText(campaign.getTitle());<br>       viewHolder.desc.setText(campaign.getDescription());<br>       viewHolder.time.setText(campaign.getTime());<br>       viewHolder.redCircle.setVisibility(campaign.isRead() ? View.INVISIBLE : View.VISIBLE);<br>       <span class="hljs-keyword">return</span> root;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>当 parent 为 null 的时候，attachToRoot 就为 false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">inflate</span><span class="hljs-params">(<span class="hljs-meta">@LayoutRes</span> <span class="hljs-keyword">int</span> resource, <span class="hljs-meta">@Nullable</span> ViewGroup root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> inflate(resource, root, root != <span class="hljs-keyword">null</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>再看下 inflate 方法的关键部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Temp is the root view that was found in the xml</span><br>                    <span class="hljs-keyword">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);<br><br>                    ViewGroup.LayoutParams params = <span class="hljs-keyword">null</span>;<br><br>                    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (DEBUG) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;Creating params from root: &quot;</span> +<br>                                    root);<br>                        &#125;<br>                        <span class="hljs-comment">// Create layout params that match root, if supplied</span><br>                        params = root.generateLayoutParams(attrs);<br>                        <span class="hljs-keyword">if</span> (!attachToRoot) &#123;<br>                            <span class="hljs-comment">// Set the layout params for temp if we are not</span><br>                            <span class="hljs-comment">// attaching. (If we are, we use addView, below)</span><br>                            temp.setLayoutParams(params);<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (DEBUG) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;-----&gt; start inflating children&quot;</span>);<br>                    &#125;<br><br>                    <span class="hljs-comment">// Inflate all children under temp against its context.</span><br>                    rInflateChildren(parser, temp, attrs, <span class="hljs-keyword">true</span>);<br><br>                    <span class="hljs-keyword">if</span> (DEBUG) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;-----&gt; done inflating children&quot;</span>);<br>                    &#125;<br><br>                    <span class="hljs-comment">// We are supposed to attach all the views we found (int temp)</span><br>                    <span class="hljs-comment">// to root. Do that now.</span><br>                    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span> &amp;&amp; attachToRoot) &#123;<br>                        root.addView(temp, params);<br>                    &#125;<br><br>                    <span class="hljs-comment">// Decide whether to return the root that was passed in or the</span><br>                    <span class="hljs-comment">// top view found in xml.</span><br>                    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span> || !attachToRoot) &#123;<br>                        result = temp;<br>                    &#125;<br>                &#125; <br></code></pre></td></tr></table></figure><p>当 root 为空的时候，直接返回了 temp (temp是从xml布局文件中加载的view)，而当 root 不为空的时候，会将 root 作为父布局，根据 xml 解析布局文件中的节点，获取属性元素，重新生成 temp 的布局参数 params (此时假如 attachToRoot 为 false，则会将 temp 的布局参数设置成生成的布局参数 params),而后根据 temp 重新inflate temp 中的子 view，该设置 params 的设置 params。而后如果 parent 不为空，attachToRoot 为 true，就会将整个布局中的所有元素挨个添加到 parent 中。最后返回的是 parent。</p><p>那么当 parent 为空的时候，又是什么个情况呢？因为 parent 为空，也就是 xml 文件根布局没有 parent 作为参照，解析的时候，他的高无论节点上设置的是什么都会默认是 wrap_content，宽都会是 match_parent。</p><p>假设目前有个布局文件为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;25dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;25dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#ff0000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;red&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>这里我们指定了 textview 的宽高。这里的 textview 就一个布局文件的跟布局。看下下面的代码，adapter 的 item 的布局也是类似的，原理一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LayoutInflaterActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> View view = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_layoutinflater_main);<br><br>        ViewGroup parent = (ViewGroup) findViewById(R.id.layoutInflaterContainer);<br>        <span class="hljs-comment">// result: layout_height=wrap_content layout_width=match_parent</span><br>        view = LayoutInflater.from(<span class="hljs-keyword">this</span>).inflate(R.layout.activity_layoutinflater_sub, <span class="hljs-keyword">null</span>);<br>        parent.addView(view);<br><br>        <span class="hljs-comment">// result: layout_height=100 layout_width=100</span><br>        view = LayoutInflater.from(<span class="hljs-keyword">this</span>).inflate(R.layout.activity_layoutinflater_sub, <span class="hljs-keyword">null</span>);<br>        parent.addView(view, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">// result: layout_height=25dp layout_width=25dp</span><br>        <span class="hljs-comment">// view=textView due to attachRoot=false</span><br>        view = LayoutInflater.from(<span class="hljs-keyword">this</span>).inflate(R.layout.activity_layoutinflater_sub, parent, <span class="hljs-keyword">false</span>);<br>        parent.addView(view);<br><br>        <span class="hljs-comment">// result: layout_height=25dp layout_width=25dp</span><br>        <span class="hljs-comment">// parent.addView not necessary as this is already done by attachRoot=true</span><br>        <span class="hljs-comment">// view=root due to parent supplied as hierarchy root and attachRoot=true</span><br>        view = LayoutInflater.from(<span class="hljs-keyword">this</span>).inflate(R.layout.activity_layoutinflater_sub, parent, <span class="hljs-keyword">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>第一种方案，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// result: layout_height=wrap_content layout_width=match_parent</span><br>view = LayoutInflater.from(<span class="hljs-keyword">this</span>).inflate(R.layout.activity_layoutinflater_sub, <span class="hljs-keyword">null</span>);<br>parent.addView(view);<br></code></pre></td></tr></table></figure><p>效果就是加载的布局宽度为充满 match_parent ，高度为 wrap_content。</p><ul><li>第二种方案</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// result: layout_height=100 layout_width=100</span><br>view = LayoutInflater.from(<span class="hljs-keyword">this</span>).inflate(R.layout.activity_layoutinflater_sub, <span class="hljs-keyword">null</span>);<br>parent.addView(view, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>效果就是加载的布局宽宽高均为 100 个像素。</p><ul><li>第三种方案</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// result: layout_height=25dp layout_width=25dp</span><br><span class="hljs-comment">// view=textView due to attachRoot=false</span><br>view = LayoutInflater.from(<span class="hljs-keyword">this</span>).inflate(R.layout.activity_layoutinflater_sub, parent, <span class="hljs-keyword">false</span>);<br>parent.addView(view);<br></code></pre></td></tr></table></figure><p>效果就是加载的布局宽宽高均为布局中设置的 25dp。</p><ul><li>第四种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// result: layout_height=25dp layout_width=25dp</span><br><span class="hljs-comment">// parent.addView not necessary as this is already done by attachRoot=true</span><br><span class="hljs-comment">// view=root due to parent supplied as hierarchy root and attachRoot=true</span><br>view = LayoutInflater.from(<span class="hljs-keyword">this</span>).inflate(R.layout.activity_layoutinflater_sub, parent, <span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><p>效果就是加载的布局宽宽高均为布局中设置的 25dp，并且添加到了当前的布局中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以，要能在 getview 中，自定义宽高，办法有两个，一个是在最外层再套一层布局，然后 parent 设为 null。另一个是指定 parent，将 attachToRoot 设为 false。</p>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LayoutInflater</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DataBinding 入门简介</title>
    <link href="/2016/02/20/DataBinding/"/>
    <url>/2016/02/20/DataBinding/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文介绍 DataBinding 的基本概念和接入流程</p><span id="more"></span><h1 id="DataBinding出现的背景"><a href="#DataBinding出现的背景" class="headerlink" title="DataBinding出现的背景"></a>DataBinding出现的背景</h1><p>作为一种 MVVM 的实现方式出现.</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>将数据的 provider 和 consumer 进行绑定，而后进行二者之间同步的一种技术。实现逻辑层和表现层的绑定。</p><hr><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul><li>使用的编译工具必须是 gradle，并且使用的 Android gradle 插件版本依旧官方所说，不能低于 Android Plugin for Gradle 1.3.0-beta4；</li><li>在使用的 module 的 gradle 文件中添加 apply plugin: ‘com.android.databinding’；</li></ul><hr><p>以上部分是 beta 1.3 版本的环境搭建以下是 1.5 的</p><hr><ul><li>使用gradle for android 1.5</li><li>在 APP module 的 gradle 中添加代码段 </li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">dataBinding &#123;<br>    enabled = true<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="工作的流程原理"><a href="#工作的流程原理" class="headerlink" title="工作的流程原理"></a>工作的流程原理</h2><ol><li><p>在编译的时候，dataBinding 回去布局文件中进行文件的解析，然后获取关于 dataBinding 的设置，然后为对应的 view 设置 tag，<br>然后删除关于 dataBinding 的所有内容。</p></li><li><p>对于属性中引用 java 变量的值的地方，原理都是调用的对应的 java 的 set 方法进行设置，比如 TextView 的属性 text 对应了 setText();对于 ImageView 的 src 属性<br>通过一些注解，让其对应 setImageResource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@BindingMethod(</span><br><span class="hljs-meta">type = android.widget.ImageView.class,</span><br><span class="hljs-meta">attribute = &quot;android:src&quot;,</span><br><span class="hljs-meta">method = &quot;setImageResource&quot;)</span><br></code></pre></td></tr></table></figure></li><li><p>dataBinding 的 BaseObservable，继承的类，通过注解 @Bindable 注解对应属性的 get 方法可以在属性变化的时候及时的通知布局中更新 UI。</p></li><li><p>BindingAdapter 方法，用在 adapter 中的</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@BindingAdapter(&quot;android:src&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setImageUrl</span><span class="hljs-params">(ImageView view, String url)</span> </span>&#123;<br>    Picasso.with(view.getContext()).load(url).into(view);<br>&#125;<br></code></pre></td></tr></table></figure><p>1.额外的属性,同样是 adapter 中<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span> …</span><br><span class="hljs-tag">   <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@&#123;contact.largeImageUrl&#125;&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">app:placeHolder</span>=<span class="hljs-string">&quot;@&#123;R.drawable.contact_placeholder&#125;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@BindingAdapter(value = &#123;&quot;android:src&quot;, &quot;placeHolder&quot;&#125;,requireAll = false)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setImageUrl</span><span class="hljs-params">(ImageView view, String url,<span class="hljs-keyword">int</span> placeHolder)</span> </span>&#123;<br>    RequestCreator requestCreator =Picasso.with(view.getContext()).load(url);<br>    <span class="hljs-keyword">if</span> (placeHolder != <span class="hljs-number">0</span>) &#123;<br>        requestCreator.placeholder(placeHolder);<br>    &#125;<br>    requestCreator.into(view);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li>参考官方指导：<br>  <a href="https://developer.android.com/tools/data-binding/guide.html">https://developer.android.com/tools/data-binding/guide.html</a></li><li>同时发现，敲完代码发现这个demo写的很详细：<br>  <a href="https://github.com/LyndonChin/MasteringAndroidDataBinding">https://github.com/LyndonChin/MasteringAndroidDataBinding</a></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DataBinding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RxAndroid入门分享(一)</title>
    <link href="/2016/02/08/RxAndroidIntroduction1/"/>
    <url>/2016/02/08/RxAndroidIntroduction1/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文记录 RxJava 的概念.</p><span id="more"></span><h1 id="RxJava-以及响应式函数思想篇"><a href="#RxJava-以及响应式函数思想篇" class="headerlink" title="RxJava 以及响应式函数思想篇"></a>RxJava 以及响应式函数思想篇</h1><h2 id="Why-技术产生的背景"><a href="#Why-技术产生的背景" class="headerlink" title="Why 技术产生的背景"></a>Why 技术产生的背景</h2><p>在编程中，经常需要切换线程，为了能对结果进行相应处理，经常需要进行回调，随着业务需求的增加，嵌套的回调也会随之增加，不仅增加了代码量，也增加了逻辑的复杂性，增加了理解和维护的难度。<br>所以就需要一种</p><ul><li>既能方便切换线程</li><li>又能即是相应变化</li><li>又可以简化代码的逻辑，方便维护，</li><li>还不需要回调。</li></ul><h2 id="What-ReactiveX是什么"><a href="#What-ReactiveX是什么" class="headerlink" title="What ReactiveX是什么"></a>What ReactiveX是什么</h2><p>Reactive Extensions,简称 RX，原来只是微软开发的一个 LINQ 的一个扩展。</p><p>微软给的定义是，Rx 是一个函数库，让开发者可以利用<strong>可观察序列</strong>和<strong>LINQ风格查询操作符</strong>来编写<strong>异步</strong>和基于<strong>事件</strong>的程序，使用 Rx，开发者可以用Observables 表示异步数据流，用 LINQ 操作符查询异步数据流，用 Schedulers 参数化异步数据流的并发处理，Rx 可以这样定义：<strong>Rx = Observables + LINQ + Schedulers。</strong></p><p>ReactiveX.io 给的定义是，Rx 是一个使用可观察数据流进行异步编程的<strong>编程接口</strong>，ReactiveX 结合了观察者模式、迭代器模式和函数式编程的精华。</p><p>看完微软给的定义已经很详细了，开源组织给的更加精简，里面提到了数据流还有事件，我们来自己看看怎么理解。</p><p>这里得提到响应式编程的概念，其中有两个关键点，</p><ul><li>事件，事件可以被观察，等待，过滤，响应，也可以触发其他的事件，事件通过数据流的形式对外呈现。</li><li>数据流，数据流就像一条河：它可以<strong>被观测，被过滤，被操作，或者与另外一条流合并为一条新的流来给新的消费者消费</strong>。</li></ul><p>所以，响应式编程就是一种基于异步<strong>数据流</strong>概念的编程模式。其实 EventBus 还有其他的点击事件一样，本质上就是异步的数据流，我们可以为任何的事件创建数据流。比如我们可以为登录操作创建数据流，然后监听这个数据流，进行登录验证这样的响应操作。</p><p>主要特点有：</p><ul><li>易于并发从而更好的利用服务器的能力。</li><li>易于有条件的异步执行。</li><li>一种更好的方式来避免回调地狱。</li><li>一种响应式方法。</li></ul><h2 id="RxJava与传统的Java的不同"><a href="#RxJava与传统的Java的不同" class="headerlink" title="RxJava与传统的Java的不同"></a>RxJava与传统的Java的不同</h2><p>在 Rx 中，开发者用 Observables 模拟可被观察的异步数据流，从纯 Java 的观点看，RxJava 的 Observable 类源自于经典的 Gang Of Four 的观察者模式。</p><h3 id="与传统观察者的不同"><a href="#与传统观察者的不同" class="headerlink" title="与传统观察者的不同"></a>与传统观察者的不同</h3><p>它添加了三个缺少的功能：</p><ul><li>生产者在没有更多数据可用时能够发出信号通知：onCompleted()事件。</li><li>生产者在发生错误时能够发出信号通知：onError()事件。</li><li>RxJava Observables 能够组合而不是嵌套，从而避免开发者陷入回调地狱。</li></ul><h3 id="与传统的Iterable的不同"><a href="#与传统的Iterable的不同" class="headerlink" title="与传统的Iterable的不同"></a>与传统的Iterable的不同</h3><p>Observables 和 IterablesAPI 是很相似的：我们在 Iterable 可以执行的许多操作也都同样可以在 Observables 上执行。当然，由于 Observables 流的本质，没有如Iterable.remove() 这样相应的方法,因为数据可能已经发射出去了，remove 也没有任何意义。</p><p>使用 Iterable 时，消费者从生产者那里以同步的方式得到值，在这些值得到之前线程处于阻塞状态。相反，使用 Observable 时，生产者以异步的方式把值 push 给观察者，无论何时，这些值都是可用的。这种方法之所以更灵活是因为即便值是同步或异步方式到达，消费者在这两种场景都可以根据自己的需要来处理。</p><table><thead><tr><th>Pattern</th><th align="right">一个返回值</th><th align="center">多个返回值</th></tr></thead><tbody><tr><td>Synchronous</td><td align="right">T getData()</td><td align="center">Iterable<T></td></tr><tr><td>Asynchronous</td><td align="right">Future<T> getData()</td><td align="center">Observable<T> getData()</td></tr></tbody></table><p>Observable 的生命周期包含了三种可能的易于与 Iterable 生命周期事件相比较的事件，下表展示了如何将 Observable async/push 与 Iterable sync/pull 相关联起来。</p><table><thead><tr><th>Event</th><th align="right">Iterable(pull)</th><th align="center">Observable(push)</th></tr></thead><tbody><tr><td>检索数据</td><td align="right">T next()</td><td align="center">onNext(T)</td></tr><tr><td>发现错误</td><td align="right">throws Exception</td><td align="center">onError(Throwable)</td></tr><tr><td>完成</td><td align="right">!hasNext()</td><td align="center">onCompleted()</td></tr></tbody></table><p>所以，由以上这些新增的特点，开发者只要简单的去请求，当请求完成的时候，会得到一个通知。开发者需要对可能发生的每个事件提供一个清晰的响应链。</p><h3 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h3><p>用户提交完用户名和密码，我们可以用 observable 模拟这个登录的数据流，而后我们需要对可能发生的情况进行定义；</p><ul><li>用户名密码正确，登录成功，转到登录成功界面。</li><li>用户名和密码匹配不成功，登录失败，给用户个提示。</li></ul><p>这样，我们不需要等待结果，等到有结果的时候，会有通知，这个过程是异步的。这中间可以做很多其他的事情，保存到缓存，显示进度条等等。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h3><p>当我们异步执行一些复杂的事情，Java 提供了传统的类，例如 Thread、Future、FutureTask、CompletableFuture 来处理这些问题。当复杂度提升，这些方案就会变得麻烦和难以维护。最糟糕的是，它们都不支持链式调用。RxJava Observables 可以解决这些问题。它可以作用于单个结果程序上，也可以作用于序列上。无论何时你想发射单个标量值，或者一连串值，甚至是无穷个数值流，你都可以使用 Observable。和传统的观察者模式一样，也有冷热之分。</p><ul><li>热的 observable，只要创建了 observable，就开始发射数据了，所以，后续订阅他的 observer 可能从中间某个位置开始接收数据。</li><li>冷的 observable，等到有订阅的时候才开始发射数据。</li></ul><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><p>观察者，订阅 observable 发射的数据，对其做出相应，对可能出现的情况的定义就在这里。</p><p>三个重要的回调方法 (onNext, onCompleted, onError)<br>通过Subscribe方法可以将观察者连接到 Observable，观察者需要实现以下方法的一个子集:</p><ul><li>onNext(T item):Observable 调用这个方法发射数据，方法的参数就是 Observable 发射的数据，这个方法可能会被调用多次，取决于你的实现。</li><li>onError(Exception ex):当 Observable 遇到错误或者无法返回期望的数据时会调用这个方法，这个调用会终止 Observable，后续不会再调用 onNext 和 onCompleted，onError 方法的参数是抛出的异常。</li><li>onComplete:正常终止，如果没有遇到错误，Observable 在最后一次调用 onNext 之后调用此方法。</li></ul><p>根据 Observable 协议的定义，onNext 可能会被调用<strong>零次或者很多次</strong>，最后会有一次 onCompleted 或 onError 调用（不会同时），传递数据给 onNext 通常被称作发射，onCompleted 和 onError 被称作通知。</p><h3 id="Subscriber"><a href="#Subscriber" class="headerlink" title="Subscriber"></a>Subscriber</h3><p>Observers 和 Subscribers 是两个“消费”实体。Subscriber 是一个实现了 Observer 的一个抽象类。相对于基本的 Observer，提供了手动解开订阅的方法 unsubscribe 和在 subscribe 刚开始，而事件还未发送之前被调用的方法 onStart。其他的使用方式是一样的。</p><h3 id="Subjects"><a href="#Subjects" class="headerlink" title="Subjects"></a>Subjects</h3><p>Subject = Observable + Observer。<br>subject 是一个神奇的对象，它可以是一个 Observable 同时也可以是一个 Observer：它作为连接这两个世界的一座桥梁。一个 Subject 可以订阅一个 Observable，就像一个观察者，并且它可以发射新的数据，或者传递它接受到的数据，就像一个 Observable。很明显，作为一个 Observable，观察者们或者其它 Subject 都可以订阅它。<br>一旦 Subject 订阅了 Observable，它将会触发 Observable 开始发射。如果原始的 Observable 是“冷”的，这将会对订阅一个“热”的 Observable 变量产生影响。</p><h2 id="How怎么使用"><a href="#How怎么使用" class="headerlink" title="How怎么使用"></a>How怎么使用</h2><p>接下来讨论他的具体使用方法。首先是需要搭建环境，我们就以 AS 为例。</p><ul><li>因为就是为了 Android 开发所学的，在 module 的 gradle 中添加 RxAndroid 的仓库地址,RxAndroid 本身是依赖 RxJava 的，所以会自动下载 RxJava 的依赖包。<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">compile <span class="hljs-string">&#x27;io.reactivex:rxandroid:1.1.0&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="创建Observable"><a href="#创建Observable" class="headerlink" title="创建Observable"></a>创建Observable</h3><h4 id="Create之从头创建"><a href="#Create之从头创建" class="headerlink" title="Create之从头创建"></a>Create之从头创建</h4><p>这个操作符传递一个<strong>含有观察者作为参数的函数</strong>的对象，编写这个函数让它的行为表现为一个 Observable –恰当的调用观察者的 onNext，onError 和 onCompleted 方法。下面是个非常简单的一个例子，先有个直观的大致的认识。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java">Observable.OnSubscribe&lt;String&gt; f = <span class="hljs-keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(Subscriber&lt;? <span class="hljs-keyword">super</span> String&gt; o)</span> </span>&#123;<br>                <span class="hljs-comment">//完全自己决定发射数据给subscriber和通知subscriber的时机以及方式</span><br>                o.onNext(<span class="hljs-string">&quot;发射的数据&quot;</span>);<br>                o.onCompleted();<br>            &#125;<br>        &#125;;<br>        Observable observable = Observable.create(f);<br>        <span class="hljs-comment">//创建订阅者</span><br>        Subscriber subscriber = <span class="hljs-keyword">new</span> Subscriber() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-comment">//正常结束，收到发射的通知</span><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;<br>                <span class="hljs-comment">//出现了错误的通知</span><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>                <span class="hljs-comment">//收到observable发射的数据</span><br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//订阅，一旦订阅发生，observable将开始发射数据</span><br>        observable.subscribe(subscriber);<br></code></pre></td></tr></table></figure><h4 id="From"><a href="#From" class="headerlink" title="From"></a>From</h4><p>这个操作符需要传入数组或者列表等可以迭代的类型，将会返回一个 Observable 对象，这个 Observable 会迭代列表里的数据，然后将数据一个一个的发射出去。</p><h4 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h4><p>这个操作符会返回一个 Observable，这个 Observable 将传入的对象直接发射出去。这个操作符对于进行旧版本的改造非常有用，对于暂时不想做过多操作的函数，可以直接传入到 just 操作符中，这样就自动构造出了一个数据流。</p><h4 id="Repeat"><a href="#Repeat" class="headerlink" title="Repeat"></a>Repeat</h4><p>这个操作符需要一个整形数字作为参数，代表了重复发射的次数，比如发射“123”三次，就会变成发射”123123123”。</p><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>这个操作符可以延迟 Observable 的创建，当有订阅者的时候才开始创建，这个对于一些不是每次都需要创建的数据流而言，很有用。怎么理解呢，我们简单的看个例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Subscriber subscriber;<br>    <span class="hljs-keyword">private</span> Observable simpleObservable;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">doSomeThing</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;在执行just的时候，这里需要执行的操作已经执行结束了。。。&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SteveYan&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        simpleObservable = Observable.just(doSomeThing());<br>        subscriber = <span class="hljs-keyword">new</span> Subscriber() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-comment">//正常结束，收到发射的通知</span><br>                System.out.println(<span class="hljs-string">&quot;onCompleted&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;<br>                <span class="hljs-comment">//出现了错误的通知</span><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>                <span class="hljs-comment">//收到observable发射的数据</span><br>                System.out.println(<span class="hljs-string">&quot;Receive &quot;</span> + o.toString());<br>            &#125;<br>        &#125;;<br>        init();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        findViewById(R.id.button).setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">//每次点击的时候都进行订阅</span><br>                simpleObservable.subscribe(subscriber);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，每次点击就进行一次订阅，在 onCreate 方法里，在执行 just 的时候，doSomeThing 已经执行完了，<br>但是并未发射数据，但是假如使用 defer 操作符的话，doSomeThing 则会等到点击的时候才执行。<br>修改成的 defer 操作符的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Subscriber subscriber;<br>    <span class="hljs-keyword">private</span> Observable simpleObservable;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">doSomeThing</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Do Some&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SteveYan&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        simpleObservable = Observable.defer(<span class="hljs-keyword">new</span> Func0&lt;Observable&lt;String&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Observable&lt;String&gt; <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> Observable.just(doSomeThing());<br>            &#125;<br>        &#125;);<br>        subscriber = <span class="hljs-keyword">new</span> Subscriber() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-comment">//正常结束，收到发射的通知</span><br>                System.out.println(<span class="hljs-string">&quot;onCompleted&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;<br>                <span class="hljs-comment">//出现了错误的通知</span><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>                <span class="hljs-comment">//收到observable发射的数据</span><br>                System.out.println(<span class="hljs-string">&quot;Receive &quot;</span> + o.toString());<br>            &#125;<br>        &#125;;<br>        init();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        findViewById(R.id.button).setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">//每次点击的时候都进行订阅</span><br>                simpleObservable.subscribe(subscriber);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="range-从一个指定的数字X开始发射N个数字"><a href="#range-从一个指定的数字X开始发射N个数字" class="headerlink" title="range 从一个指定的数字X开始发射N个数字"></a>range 从一个指定的数字X开始发射N个数字</h4><p>range() 函数用两个数字作为参数：第一个是起始点，第二个是我们想发射数字的个数。目前未发现在实际项目中的用处。</p><h4 id="interval-重复轮训操作"><a href="#interval-重复轮训操作" class="headerlink" title="interval  重复轮训操作"></a>interval  重复轮训操作</h4><p>interval() 函数的两个参数：一个指定两次发射的时间间隔，另一个是用到的时间单位。需要创建一个轮询程序时非常好用</p><h4 id="timer-一段时间之后才发射的Observable"><a href="#timer-一段时间之后才发射的Observable" class="headerlink" title="timer 一段时间之后才发射的Observable"></a>timer 一段时间之后才发射的Observable</h4><p>接受两个参数，一个是延迟发射的时间，第二个参数是时间的。</p><h3 id="可观测序列的本质：过滤"><a href="#可观测序列的本质：过滤" class="headerlink" title="可观测序列的本质：过滤"></a>可观测序列的本质：过滤</h3><p>过滤：如何从发射的 Observable 中选取我们想要的值，如何获取有限个数的值，如何处理溢出的场景，以及更多的有用的技巧。</p><h4 id="filter函数，进行内容的过滤"><a href="#filter函数，进行内容的过滤" class="headerlink" title="filter函数，进行内容的过滤"></a>filter函数，进行内容的过滤</h4><p>接受一个参数，对数据流中的每个数据进行过滤。</p><h4 id="Take-取序列的前N个元素"><a href="#Take-取序列的前N个元素" class="headerlink" title="Take,取序列的前N个元素"></a>Take,取序列的前N个元素</h4><p>take() 函数用整数N来作为一个参数，从原始的序列中发射前 N 个元素</p><h4 id="takeLast-取序列的最后的N个元素"><a href="#takeLast-取序列的最后的N个元素" class="headerlink" title="takeLast,取序列的最后的N个元素"></a>takeLast,取序列的最后的N个元素</h4><p>如果我们想要最后 N 个元素，接给 takeLast<br>函数传入 N 作为参数。有一点值得注意，为了得到最后的数据，所以 takeLast 方法只能作用于一组有限的序列（发射元素），它只能应用于一个完整的序列。否则他无从知晓最后到哪。</p><h4 id="Distinct-有且仅有一个"><a href="#Distinct-有且仅有一个" class="headerlink" title="Distinct 有且仅有一个"></a>Distinct 有且仅有一个</h4><p>distinct 函数去掉重复的。就像 takeLast 一样，distinct 也必须作用于一个完整的序列，然后得到重复的过滤项，它需要记录每一个发射的值。如果你在处理一大堆序列或者大的数据记得关注内存使用情况。</p><h4 id="DistinctUntilsChanged-改变的时候就记录"><a href="#DistinctUntilsChanged-改变的时候就记录" class="headerlink" title="DistinctUntilsChanged 改变的时候就记录"></a>DistinctUntilsChanged 改变的时候就记录</h4><p>如果我们想在一个可观测序列发射一个不同于之前的一个新值时，让我们得到通知，就可以用这个操作符。</p><h4 id="First-And-Last"><a href="#First-And-Last" class="headerlink" title="First And Last"></a>First And Last</h4><p>从 Observable 中只发射第一个元素或者最后一个元素。这两个都可以传 Func1 作为参数，：一个可以确定我们感兴趣的第一个或者最后一个的谓词。<br>与 first()和 last()相似的变量有：firstOrDefault() 和 lastOrDefault().这两个函数当可观测序列完成时不再发射任何值时用得上。在这种场景下，如果 Observable 不再发射任何值时我们可以指定发射一个默认的值</p><h4 id="Skip-And-SkipLast"><a href="#Skip-And-SkipLast" class="headerlink" title="Skip And SkipLast"></a>Skip And SkipLast</h4><p>它们用整数 N 作参数，从本质上来说，它们不让 Observable 发射前 N 个或者后 N 个值。这个和上面的 First 和 Last 正好相反。</p><h4 id="elementAt-观察指定位置的数据"><a href="#elementAt-观察指定位置的数据" class="headerlink" title="elementAt 观察指定位置的数据"></a>elementAt 观察指定位置的数据</h4><p>elementAt() 函数仅从一个序列中发射第 n 个元素然后就完成了。<br>如果我们想查找第五个元素但是可观测序列只有三个元素可供发射时该怎么办？我们可以使用 elementAtOrDefault()。</p><h4 id="sample-每隔一段时间取最近的数据"><a href="#sample-每隔一段时间取最近的数据" class="headerlink" title="sample 每隔一段时间取最近的数据"></a>sample 每隔一段时间取最近的数据</h4><p>创建一个新的可观测序列，它将在一个指定的时间间隔里由 Observable 发射最近一次的数值。<br>如果我们想让它定时发射第一个元素而不是最近的一个元素，我们可以使用 throttleFirst()。</p><h4 id="timeout-超时操作"><a href="#timeout-超时操作" class="headerlink" title="timeout 超时操作"></a>timeout 超时操作</h4><p>使用 timeout() 函数来监听源可观测序列,就是在我们设定的时间间隔内如果没有得到一个值则发射一个错误。</p><h4 id="debounce-除去发射过快的数据"><a href="#debounce-除去发射过快的数据" class="headerlink" title="debounce 除去发射过快的数据"></a>debounce 除去发射过快的数据</h4><p>debounce() 函数过滤掉由 Observable 发射的速率过快的数据；如果在一个指定的时间间隔过去了仍旧没有发射一个，那么它将发射最后的那个。</p><h3 id="转换Observables"><a href="#转换Observables" class="headerlink" title="转换Observables"></a>转换Observables</h3><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>转换发射的数据，将发射数据 A 的 Observable 变换成发射数据 B 的 Observable。适用于对数据的再加工场景。</p><h4 id="FlatMap-铺平序列"><a href="#FlatMap-铺平序列" class="headerlink" title="FlatMap 铺平序列"></a>FlatMap 铺平序列</h4><p>这样的 Observable：它发射一个数据序列，这些数据本身也可以发射 Observable。等于是说发射的数据可以再发射数据。flatMap 函数提供一种铺平序列的方式，然后合并这些 Observables 发射的数据，最后将合并后的结果作为最终的 Observable.</p><p>当我们在处理可能有大量的 Observables 时，重要是记住任何一个 Observables 发生错误的情况，flatMap 将会触发它自己的 onError 函数并放弃整个链。</p><p>重要的一点提示是关于合并部分：它允许交叉。正如上图所示，这意味着 flatMap 不能够保证在最终生成的 Observable 中源 Observables 确切的发射顺序。</p><h4 id="ConcatMap-保证有序的铺平"><a href="#ConcatMap-保证有序的铺平" class="headerlink" title="ConcatMap 保证有序的铺平"></a>ConcatMap 保证有序的铺平</h4><p>和上面的 FlatMap 一样，就是弥补了交叉这个一个特点。</p><h4 id="FlatMapIterable"><a href="#FlatMapIterable" class="headerlink" title="FlatMapIterable"></a>FlatMapIterable</h4><p>它将源数据两两结成对并生成 Iterable，而不是原始数据项和生成的 Observables。</p><h4 id="SwitchMap-切换数据流-喜新厌旧"><a href="#SwitchMap-切换数据流-喜新厌旧" class="headerlink" title="SwitchMap 切换数据流(喜新厌旧)"></a>SwitchMap 切换数据流(喜新厌旧)</h4><p>switchMap() 和 flatMap() 很像，除了一点：每当源 Observable 发射一个新的数据项（Observable）时，它将取消订阅并停止监视之前那个数据项产生的 Observable，并开始监视当前发射的这一个。</p><h4 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h4><p>RxJava 的 scan() 函数可以看做是一个累积函数。scan 函数对原始 Observable 发射的每一项数据都应用一个函数，计算出函数的结果值，并将该值填充回可观测序列，等待和下一次发射的数据一起使用。简单的说是每次可以处理的数据有本次的和上次的数据。</p><h4 id="groupBy-分组"><a href="#groupBy-分组" class="headerlink" title="groupBy 分组"></a>groupBy 分组</h4><p>接受一个方法，在方法里进行分组操作，返回一个自定义的值，系统将根据这个值将进行分组。</p><h4 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h4><p>每次发射一组值，是一个列表，而不是一个个的发射。接受一个整形参数 N，表示 N 个一组进行发射。也可以接受两个参数，SKIP，表示 SKIP 个值中取 N 个一组进行发射。</p><h4 id="window"><a href="#window" class="headerlink" title="window"></a>window</h4><p>和 buffer 类似，但是他发射的不是一个列表，而是一个 Observable。</p><h4 id="cast"><a href="#cast" class="headerlink" title="cast"></a>cast</h4><p>和 map 类似，不同的是将数据进行转换成一个新的类型。TODO 目前测试未发现怎么使用。</p><h3 id="组合Observable"><a href="#组合Observable" class="headerlink" title="组合Observable"></a>组合Observable</h3><p>以上的内容是对 Observable 的发射数据进行过滤，接下来谈谈怎么组合数据流。</p><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>将多个 Observable 发射的值进行合并成一个新的 Observable 然后再发射。中途合并的时候出现任何一个错误都会导致链条断裂，如果想延迟这样的错误处理，可以用 mergeDelayError。</p><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>这个操作符和 merge 一样，也是合并两个 Observable 的数据；不一样的是，他是将两个未进行打包的数据根据传入的谓词规则进行合并成一个新的数据,再进行发射。值得注意的是，两个数据流的长度必须一样，多余的数据将会因为不能打包而得不到发射。</p><h4 id="join-TODO-待详细验证用途"><a href="#join-TODO-待详细验证用途" class="headerlink" title="join TODO 待详细验证用途"></a>join TODO 待详细验证用途</h4><p>有四个参数，</p><ul><li>第一个参数为，Observable，表示和源 Observable 结合的数据流。</li><li>Func1参数：在指定的由时间窗口定义时间间隔内，源 Observable 发射的数据和从第二个 Observable 发射的数据相互配合返回的 Observable。</li><li>Func1参数：在指定的由时间窗口定义时间间隔内，第二个 Observable 发射的数据和从源 Observable 发射的数据相互配合返回的 Observable。</li><li>Func2参数：定义已发射的数据如何与新发射的数据项相结合。</li></ul><h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><p>和 Zip 一样，去组合两个数据流发射的数据，并且进行组合，合并成一个新的数据进行发射，不同的是，Zip 发射的是最近未进行打包的，而 combineLatest 走的是相反的路线，打包最近发射的数据，不管是否已经打包过了。这样的话，就会弥补 Zip 的长度限制，全部得到发射。</p><h4 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h4><p>Observable 开始发射他们的数据之前， startWith() 通过传递一个参数来先发射一个数据序列。 表示发射之前先将传入的参数法发射出去。</p><h3 id="Schedulers-随时切换运行的线程"><a href="#Schedulers-随时切换运行的线程" class="headerlink" title="Schedulers 随时切换运行的线程"></a>Schedulers 随时切换运行的线程</h3><p>这里大致说一下有哪几种情况，因为在 Java 中的情况和 Android 稍有差异，并且必须结合实例才能明白这个好处。</p><h4 id="RxJava提供的五种调度器"><a href="#RxJava提供的五种调度器" class="headerlink" title="RxJava提供的五种调度器"></a>RxJava提供的五种调度器</h4><ul><li>.io()<br>这个调度器时用于 I/O 操作。它基于根据需要，增长或缩减来自适应的线程池。由于它专用于 I/O 操作，所以并不是 RxJava 的默认方法；正确的使用它是由开发者决定的。重点需要注意的是线程池是无限制的，大量的 I/O 调度操作将创建许多个线程并占用内存。</li><li>.computation()<br>这个是计算工作默认的调度器，与I/O 操作无关。也是许多 RxJava 方法的默认调度器：buffer(),debounce(),delay(),interval(),sample(),skip()。所以可以将一些耗时的，但是与 IO 无关的一些操作。</li><li>.immediate()<br>这个调度器允许你立即在当前线程执行你指定的工作。它是 timeout(),timeInterval(),以及 timestamp() 方法默认的调度器。</li><li>.newThread()<br>这个调度器正如它所看起来的那样：它为指定任务启动一个新的线程。</li><li>.trampoline()<br>当我们想在当前线程执行一个任务时，并不是立即，我们可以用<br>.trampoline 将它入队。这个调度器将会处理它的队列并且按序运行队列中每一个任务。它是 repeat()和 retry() 方法默认的调度器。</li></ul><h4 id="SubscribeOn-and-ObserveOn，指定线程，线程切换"><a href="#SubscribeOn-and-ObserveOn，指定线程，线程切换" class="headerlink" title="SubscribeOn and ObserveOn，指定线程，线程切换"></a>SubscribeOn and ObserveOn，指定线程，线程切换</h4><p>subscribeOn() 方法来用于每个 Observable 对象。subscribeOn() 方法用 Scheduler 来作为参数并在这个 Scheduler 上执行 Observable 调用。<br>observeOn() 方法将会在指定的调度器上返回结果。observeOn() 方法用 Scheduler 来作为参数，在指定的线程上返回结果，观察者在返回结果的线程上消费这个结果。</p><h3 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h3><p>Retrofit 完美的支持 Rx 编程，可以完美的结合。</p><p>##感激,非常感激，万分的感激！</p><p>感谢以下的文章以及其作者和翻译的开发者们,排名不分先后</p><ul><li><a href="http://rxjava.yuxingxin.com/">RxJava Essentials 中文翻译版</a></li><li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/">ReactiveX文档中文翻译</a></li><li><a href="http://gank.io/post/560e15be2dca930e00da1083">给 Android 开发者的 RxJava 详解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Mobile</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RxJava</tag>
      
      <tag>Android</tag>
      
      <tag>RxAndroid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标题：Hello World</title>
    <link href="/2016/02/07/hello-world/"/>
    <url>/2016/02/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>序言：Hello World.新的一年，希望有一个新的开始。</p><p>开个博客，方便自己平时写总结，公司内部也有分享，这样一举两得，而且用的是markdown，对于我这样懒惰的人，减轻了很多排版的烦恼。</p><p>希望我的内容不会浪费大家的时间，不会增加大家筛选有用信息的时间。</p><h1 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h1><p>之后所有的总结分享类的文章脉络，应该遵循Why-&gt;What-&gt;How的原则总结。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
