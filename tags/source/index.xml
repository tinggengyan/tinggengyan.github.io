<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Source - Tag - Tinggeng</title>
        <link>https://tinggengyan.github.io/tags/source/</link>
        <description>Source - Tag - Tinggeng</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tinggengyan@gmail.com (Tinggeng)</managingEditor>
            <webMaster>tinggengyan@gmail.com (Tinggeng)</webMaster><lastBuildDate>Tue, 14 Jun 2016 16:07:10 &#43;0000</lastBuildDate><atom:link href="https://tinggengyan.github.io/tags/source/" rel="self" type="application/rss+xml" /><item>
    <title>一个例子说明如何使用  RxJava 进行线程切换</title>
    <link>https://tinggengyan.github.io/2016/06/rxjavathreaddemo/</link>
    <pubDate>Tue, 14 Jun 2016 16:07:10 &#43;0000</pubDate>
    <author>Tinggeng</author>
    <guid>https://tinggengyan.github.io/2016/06/rxjavathreaddemo/</guid>
    <description><![CDATA[概述 本文仅作记录如何在上层使用代码进行 RxJava 的线程切换.
RxJava 线程管理 RxJava 中通过两个关键的方法 subscribeOn 和 observeOn 实现线程的切换，都说 RxJava 是可以任性的随意切换线程，到底可以多任性呢，在哪任性呢，代码上怎么体现呢？下面通过一个非常简单的例子 演示一下如何使用，源码讨论请移步另一篇文章。
###　测试代码
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 //验证多线程切换的情况 private void multiThreadSwitch() { Observable.]]></description>
</item>
<item>
    <title>RxJava源码解析(一)</title>
    <link>https://tinggengyan.github.io/2016/03/rxjavaessential1/</link>
    <pubDate>Fri, 04 Mar 2016 00:23:15 &#43;0000</pubDate>
    <author>Tinggeng</author>
    <guid>https://tinggengyan.github.io/2016/03/rxjavaessential1/</guid>
    <description><![CDATA[概述 本文目的是从源码的角度讲解 Rxjava 的重要概念 Observable.
RxJava要点解析 对于 Rxjava 还是有很多不理解的地方，加上又有点好奇心，就看看源码，记录在此，水平有限，肯定存在错误的地方，望路过的同行不吝赐教。
lift变换操作的原理 看下lift源码,直接拷贝的源码，未做删减。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public final &lt;R&gt; Observable&lt;R&gt; lift(final Operator&lt;? extends R, ? super T&gt; operator) { return new Observable&lt;R&gt;(new OnSubscribe&lt;R&gt;() { @Override public void call(Subscriber&lt;? super R&gt; o) { try { Subscriber&lt;? super T&gt; st = hook.]]></description>
</item>
</channel>
</rss>
