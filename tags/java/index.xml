<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java - Tag - Tinggeng</title>
        <link>https://tinggengyan.github.io/tags/java/</link>
        <description>Java - Tag - Tinggeng</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tinggengyan@gmail.com (Tinggeng)</managingEditor>
            <webMaster>tinggengyan@gmail.com (Tinggeng)</webMaster><lastBuildDate>Tue, 06 Jul 2021 19:57:21 &#43;0000</lastBuildDate><atom:link href="https://tinggengyan.github.io/tags/java/" rel="self" type="application/rss+xml" /><item>
    <title>mySoftware</title>
    <link>https://tinggengyan.github.io/2021/07/mysoftware/</link>
    <pubDate>Tue, 06 Jul 2021 19:57:21 &#43;0000</pubDate>
    <author>Tinggeng</author>
    <guid>https://tinggengyan.github.io/2021/07/mysoftware/</guid>
    <description><![CDATA[概述 记录我平时使用的一些软件,提效的,娱乐的.
快速打开 Raycast Alfred Contexts
目的: 用于快速打开应用软件和文件夹 其中比较知名的就是 Alfread了,我目前把它和Context进行配合使用.
Raycast 和 Alfred 差不多,Raycast 我装了,但是用的频率不高,目前没发现他有什么特别的亮点,用来作为 Alfred 的备选,毕竟免费.
Context有一个feature就是可以切换window,比如,AndroidStudio里打开了多个Project,形成了多个window,这说话,直接Alfred打开Androidstudio的话,只是打开了软件,至于哪个Window,有时候不清楚,这种情况下,Context 是个很好的补充. Context 的缺陷就是,他只是用来打开,已有的窗口的.
输入法 搜狗输入法
目前国内也就搜狗输入法还行了,当然百度也有Mac版本,但是体验上,还是搜狗好点.
终端 iterm2 oh-my-zsh Mac 下很好的终端工具了.目前没发现其他替代品;
Git fork Native开发,相比对sourceTree,颜值和性能都更高,无他,颜值即正义.
Android开发 AndroidStudio
开发Android必备,只是有一点至今让我诟病的地方,就是ActivityStack的打印被删除了&hellip;
C/Cpp开发 Clion
VSC配置cpp开发环境也试过,繁琐.Mac 下的Xcode也用过,感觉一般, 不得不说,jetbrains做的IDE,真香.
Java开发 IntellijIdea Eclipse NetBeans
目前在用的就是 IntellijIdea 了,其他的基本不用了.只有一个 NetBeans 在某些场景下是有优势的,那就是JavaSE GUI开发的时候.
清除广告 AdBlock Pro 清除Safari广告用; 看动漫太多的广告了,Chrome 上清除广告很容易,Safari就只能依赖这个plugin了.
database DataGrip 一个客户端,支持查看所有的数据库,jetbrains太香了.
分屏 Grid
windows 系统有个自动管理窗口的功能,这个软件就是在Mac上实现类似的功能;
扩展屏幕 Deskreen 只要有个浏览器就可以实现屏幕的扩展,有时候可以将自己的iPad用上.
statusbar 隐藏图标 Dozer Bartender]]></description>
</item>
<item>
    <title>jdk携带的一个HttpServer实现</title>
    <link>https://tinggengyan.github.io/2020/04/jdk-httpserver/</link>
    <pubDate>Mon, 20 Apr 2020 18:57:56 &#43;0000</pubDate>
    <author>Tinggeng</author>
    <guid>https://tinggengyan.github.io/2020/04/jdk-httpserver/</guid>
    <description><![CDATA[概述 记录一个意外发现的一个类 com.sun.net.httpserver.HttpsServer. 一个 Http 的 Server 端.
用处 适用于泛前端类开发者,在无后端服务的情况下,可以用来mock数据或者mock后端行为,非常灵活. 适用于网络库的开发者,测试库的行为; 缺点 目前不支持HTTP2协议. 分类 HTTP 协议 自定义一个 HTTP 服务; 1 2 3 4 5 6 HttpsServer server = HttpsServer.create(new InetSocketAddress(8500), 0); HttpsConfigurator httpsConfigurator = new HttpsConfigurator(SSLContext.getDefault()); server.setHttpsConfigurator(httpsConfigurator); HttpContext context = server.createContext(&#34;/example&#34;); context.setHandler(new CustomHttpHandler()); server.start(); 该 Http 服务,是在本机的 8500 端口启动的; 根目录为 example. 所以,直接通过 http://127.0.0.1:8500/example 即可访问.
Server 的行为定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 public class CustomHttpHandler implements HttpHandler { @Override public void handle(HttpExchange exchange) throws IOException { URI requestURI = exchange.]]></description>
</item>
</channel>
</rss>
