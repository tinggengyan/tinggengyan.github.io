<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Message - Tag - Tinggeng</title>
        <link>https://tinggengyan.github.io/tags/message/</link>
        <description>Message - Tag - Tinggeng</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tinggengyan@gmail.com (Tinggeng)</managingEditor>
            <webMaster>tinggengyan@gmail.com (Tinggeng)</webMaster><lastBuildDate>Sat, 17 Dec 2016 20:27:50 &#43;0000</lastBuildDate><atom:link href="https://tinggengyan.github.io/tags/message/" rel="self" type="application/rss+xml" /><item>
    <title>Android消息机制_Java层</title>
    <link>https://tinggengyan.github.io/2016/12/messgaemechanism/</link>
    <pubDate>Sat, 17 Dec 2016 20:27:50 &#43;0000</pubDate>
    <author>Tinggeng</author>
    <guid>https://tinggengyan.github.io/2016/12/messgaemechanism/</guid>
    <description><![CDATA[概述 本文记录 Android 的消息机制在 java 层的原理分析.
背景 在学习 Binder,IPC 的时候,涉及到消息机制,顺带整理一下.
概述 进程:系统进行资源分配和调度的基本单位. 在 Andrid 中,对于每个 App 运行时前,系统都会为其创建一个进程，App 就运行在一个进程中.
线程: 作为程序执行的最小单元。 该线程与 App 所在进程之间资源共享，从 Linux 角度来说进程与线程除了是否共享资源外，并没有本质的区别，都是一个 task_struct 结构体，在 CPU 看来进程或线程无非就是一段可执行的代码.
Android 主线程: 一个进程中就一个主线程,这个主线程负责更新 UI.
Why 目前对为什么需要消息机制,还没认真的研究,个人觉得系统的运转和程序的运行说到底都是消息的传递,如何让这些程序的消息传递高效地的运转,于是产生了消息机制一说.
What 什么是消息机制?消息机制的三大要素:
消息队列 消息循环 消息类型 How 在 Android 中是如何使用消息机制的? Android 中典型的消息机制就是 Handler. 以下是我们平时使用 Handler 经常使用的方式.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 private Handler mHandler = new Handler(new Callback() { @Override public boolean handleMessage(Message msg) { System.]]></description>
</item>
</channel>
</rss>
